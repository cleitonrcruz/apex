CREATE TABLE "EBA_SALES_ACCESS_LEVELS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ACCESS_LEVEL" VARCHAR2(30) NOT NULL ENABLE, 
	"ROW_VERSION" NUMBER, 
	 CONSTRAINT "EBA_SALES_ACCESS_LEVELS_CK" CHECK (access_level in ( 'Administrator', 'Contributor', 'Reader', 'Approval Pending', 'No Access' )) ENABLE, 
	 CONSTRAINT "EBA_SALES_ACCESS_LEVELS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_USERS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(255) NOT NULL ENABLE, 
	"ACCESS_LEVEL_ID" NUMBER NOT NULL ENABLE, 
	"ACCOUNT_LOCKED" VARCHAR2(1) NOT NULL ENABLE, 
	"ROW_VERSION" NUMBER, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 CONSTRAINT "EBA_SALES_USERS_USERNAME_CK" CHECK (upper(username)=username) ENABLE, 
	 CONSTRAINT "EBA_SALES_USERS_ACC_LOCKED_CK" CHECK (account_locked in ('Y','N')) ENABLE, 
	 CONSTRAINT "EBA_SALES_USERS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_RISK_ASSESSMENTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DISPLAY_ORDER" NUMBER, 
	"ASSESSMENT_TEXT" VARCHAR2(255) NOT NULL ENABLE, 
	"ASSESSMENT_DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_STATUS_ASSESSMENTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DISPLAY_ORDER" NUMBER, 
	"ASSESSMENT_TEXT" VARCHAR2(255) NOT NULL ENABLE, 
	"ASSESSMENT_DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_TERRITORIES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"TERRITORY_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"TERRITORY_DESCRIPTION" VARCHAR2(4000), 
	"VP_ID" NUMBER, 
	"SVP_ID" NUMBER, 
	"TERRITORY_TYPE" VARCHAR2(255), 
	"TAGS" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 CONSTRAINT "EBA_SALES_TERR_TERR_CC" CHECK (territory_type in ('STATE','NAMED_ACCOUNT','KEY_ACCOUNT','COUNTRY','REGION')) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_CUSTOMER_CONTACTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"TAGS" VARCHAR2(4000), 
	"CUSTOMER_ID" NUMBER NOT NULL ENABLE, 
	"CONTACT_NAME" VARCHAR2(255), 
	"CONTACT_TITLE" VARCHAR2(100), 
	"CONTACT_EMAIL" VARCHAR2(255), 
	"CONTACT_PHONE" VARCHAR2(255), 
	"CONTACT_CELL" VARCHAR2(255), 
	"CONTACT_ADDRESS" VARCHAR2(4000), 
	"CONTACT_DESCRIPTION" VARCHAR2(4000), 
	"CONTACT_LINKEDIN" VARCHAR2(1000), 
	"CONTACT_FACEBOOK" VARCHAR2(1000), 
	"CONTACT_TWITTER" VARCHAR2(1000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_FIN_ASSESSMENTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DISPLAY_ORDER" NUMBER, 
	"ASSESSMENT_TEXT" VARCHAR2(255) NOT NULL ENABLE, 
	"ASSESSMENT_DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_ACCOUNT_STANDING" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DISPLAY_ORDER" NUMBER, 
	"STANDING_TEXT" VARCHAR2(255) NOT NULL ENABLE, 
	"STANDING_DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_DEALS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER(*,0), 
	"ROW_KEY" VARCHAR2(255), 
	"TAGS" VARCHAR2(4000), 
	"DEAL_CURRENCY" VARCHAR2(8), 
	"CUSTOMER_ID" NUMBER NOT NULL ENABLE, 
	"SALESREP_ID_01" NUMBER, 
	"SALESREP_ID_02" NUMBER, 
	"SALESREP_ID_03" NUMBER, 
	"SALESREP_ID_04" NUMBER, 
	"TEAM_MEMBERS" VARCHAR2(4000), 
	"VP_ID" NUMBER, 
	"SVP_ID" NUMBER, 
	"DEAL_NAME" VARCHAR2(255), 
	"TERRITORY_ID_OLD" NUMBER, 
	"DEAL_CLOSE_DATE" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"DEAL_CLOSE_DATE_ALT" TIMESTAMP (6) WITH TIME ZONE, 
	"DEAL_PROBABILITY" NUMBER(*,0), 
	"DEAL_STAGE" NUMBER, 
	"DEAL_AMOUNT" NUMBER, 
	"DEAL_LICENSE" NUMBER, 
	"DEAL_SUPPORT" NUMBER, 
	"DEAL_EDUCATION" NUMBER, 
	"DEAL_CONSULTING" NUMBER, 
	"DEAL_STATUS_CODE_ID" NUMBER, 
	"DEAL_CUSTOMER_LOCATION" VARCHAR2(4000), 
	"DEAL_CONTACTS" VARCHAR2(4000), 
	"DEAL_SUMMARY" VARCHAR2(4000), 
	"DEAL_SYSTEM_ID" VARCHAR2(30), 
	"DEAL_PRODUCTS" VARCHAR2(4000), 
	"DEAL_COMPETITORS" VARCHAR2(4000), 
	"STRATEGY" VARCHAR2(4000), 
	"FINANCIAL_ASSESSMENT_ID" NUMBER, 
	"STATUS_ASSESSMENT_ID" NUMBER, 
	"RISK_ASSESSMENT_ID" NUMBER, 
	"ACCOUNT_STANDING_ID" NUMBER, 
	"PRO_RE_ACTIVE" VARCHAR2(30), 
	"NATIONAL_TOP_25_YN" VARCHAR2(1), 
	"PARTNER" VARCHAR2(1), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"QTR" VARCHAR2(8), 
	"SPONSOR_CONTACT_ID" NUMBER, 
	"EXTERNAL_OPPORTUNITY_ID" VARCHAR2(512), 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	"DEAL_CONTRACT_SIGNING_DATE" TIMESTAMP (6), 
	"DEAL_OPPORTUNITY_EXP_DATE" TIMESTAMP (6), 
	"DEAL_ADDRESS" VARCHAR2(4000), 
	 CONSTRAINT "EBA_SALES_DEALS_PROB_CC" CHECK (deal_probability between 0 and 100) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_USER" 
   (	"ID" NUMBER, 
	"ID_PROFILE" NUMBER, 
	"LOGIN" VARCHAR2(255), 
	"PASSWORD" VARCHAR2(255), 
	"EMAIL" VARCHAR2(255), 
	"ACCOUNT_LOCKED" VARCHAR2(1), 
	"ALT_PASSWORD" VARCHAR2(1), 
	"NAME" VARCHAR2(255), 
	"RECOVERY_CODE" VARCHAR2(255), 
	"RECOVERY_DATE" DATE, 
	 CONSTRAINT "EBA_SALES_USER_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EBA_SALES_USER_UK_EMAIL" UNIQUE ("EMAIL")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EBA_SALES_USER_UK_LOGIN" UNIQUE ("LOGIN")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_SALESREPS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"REP_LAST_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"REP_FIRST_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"REP_EMAIL" VARCHAR2(100) NOT NULL ENABLE, 
	"REP_MANAGER_ID" NUMBER, 
	"REP_EBA_SALES_USERNAME" VARCHAR2(255), 
	"REP_ROLE" NUMBER, 
	"REP_OFFICE" VARCHAR2(255), 
	"REP_OFFICE_PHONE" VARCHAR2(100), 
	"REP_CELL_PHONE" VARCHAR2(100), 
	"REP_PAGER" VARCHAR2(100), 
	"SVP_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	"REP_USER" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_INDUSTRIES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"INDUSTRY_NAME" VARCHAR2(255), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_CUSTOMERS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"CUSTOMER_NAME" VARCHAR2(255), 
	"TAGS" VARCHAR2(4000), 
	"DEFAULT_REP_ID" NUMBER, 
	"SECONDARY_REP" VARCHAR2(255), 
	"CUSTOMER_SIC" VARCHAR2(30), 
	"CUSTOMER_DUNS" VARCHAR2(30), 
	"CUSTOMER_WEB_SITE" VARCHAR2(512), 
	"CUSTOMER_STOCK_SYMB" VARCHAR2(30), 
	"CUSTOMER_NUMBER_OF_EMP" NUMBER, 
	"CUSTOMER_IS_PUBLIC_COMP_YN" VARCHAR2(1), 
	"CUSTOMER_FACEBOOK" VARCHAR2(1000), 
	"CUSTOMER_LINKEDIN" VARCHAR2(1000), 
	"CUSTOMER_TWITTER" VARCHAR2(1000), 
	"CUSTOMER_DESCRIPTION" VARCHAR2(4000), 
	"CUSTOMER_TERRITORY_ID" NUMBER, 
	"CUSTOMER_INDUSTRY_ID" NUMBER, 
	"CUSTOMER_IS_KEY_ACCOUNT_YN" VARCHAR2(1) NOT NULL DISABLE, 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	"CUSTOMER_LAST_NAME" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_CUST_CK_KEY_ACCT" CHECK (customer_is_key_account_yn in ('Y','N')) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_COMPETITORS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"COMPETITOR_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"COMPETITOR_DESC" VARCHAR2(4000), 
	"URL_1" VARCHAR2(255), 
	"URL_1_NAME" VARCHAR2(255), 
	"URL_2" VARCHAR2(255), 
	"URL_2_NAME" VARCHAR2(255), 
	"URL_3" VARCHAR2(255), 
	"URL_3_NAME" VARCHAR2(255), 
	"URL_4" VARCHAR2(255), 
	"URL_4_NAME" VARCHAR2(255), 
	"TAGS" VARCHAR2(4000), 
	"EXPERTS" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_COMPETITOR_THREATS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DISPLAY_ORDER" NUMBER, 
	"COMPETITOR_THREAT" VARCHAR2(255) NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_ACT_COMPETITION" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"COMPETITOR_ID" NUMBER NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER NOT NULL ENABLE, 
	"COMPETITOR_THREAT_ID" NUMBER, 
	"COMPETITION_DESC" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_LEAD_STATUS_CODES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DISPLAY_ORDER" NUMBER, 
	"STATUS_CODE" VARCHAR2(30) NOT NULL ENABLE, 
	"STATUS_DESCRIPTION" VARCHAR2(4000), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_ACCOUNT_TYPE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ACCOUNT_TYPE_DESCRIPTION" VARCHAR2(30), 
	 CONSTRAINT "EBA_SALES_ACCOUNT_TYPE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_LEAD_SOURCES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"LEAD_SOURCE" VARCHAR2(255) NOT NULL ENABLE, 
	"LEAD_SOURCE_DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_LEADS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"ACCOUNT_ID" NUMBER, 
	"LEAD_SOURCE_ID" NUMBER, 
	"LEAD_DETAILS" VARCHAR2(4000), 
	"LEAD_STATUS" VARCHAR2(30), 
	"LEAD_STATUS_ID" NUMBER, 
	"OPPORTUNITY_ID" NUMBER, 
	"LEAD_EMAIL_01" VARCHAR2(255), 
	"LEAD_EMAIL_02" VARCHAR2(255), 
	"LEAD_EMAIL_03" VARCHAR2(255), 
	"LEAD_NAME_01" VARCHAR2(255) NOT NULL ENABLE, 
	"LEAD_NAME_02" VARCHAR2(255), 
	"LEAD_NAME_03" VARCHAR2(255), 
	"LEAD_ADDRESS_01" VARCHAR2(255), 
	"LEAD_ADDRESS_02" VARCHAR2(255), 
	"LEAD_ADDRESS_03" VARCHAR2(255), 
	"TAGS" VARCHAR2(4000), 
	"LEAD_PRIORITY" NUMBER, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	"LEAD_ACCOUNT_TYPE" NUMBER, 
	"LEAD_PHONE" VARCHAR2(30), 
	"LEAD_MOBILE" VARCHAR2(30), 
	"LEAD_ARCHIVE" VARCHAR2(1), 
	"LEAD_SALESREPS" NUMBER, 
	"LEAD_START_DATE" TIMESTAMP (6) WITH TIME ZONE, 
	"LEAD_END_DATE" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_DEAL_TEAM" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DEAL_ID" NUMBER NOT NULL ENABLE, 
	"REP_ID" NUMBER NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_UNIT_MEASURE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"UNIT_MEASURE" VARCHAR2(255), 
	"UNIT_MEASURE_DESCRIPTION" VARCHAR2(255), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6), 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6), 
	"TAGS" VARCHAR2(4000), 
	 CONSTRAINT "EBA_SALES_UNIT_MEASURE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_PRODUCTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"PRODUCT_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"PRODUCT_DESCRIPTION" VARCHAR2(4000) NOT NULL ENABLE, 
	"PRODUCT_FAMILY_ID" NUMBER, 
	"PRODUCT_SKU" VARCHAR2(255), 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"TAGS" VARCHAR2(4000), 
	"SOLD_AS" VARCHAR2(50), 
	"PRODUCT_UNIT_MEASURE" NUMBER, 
	"PRICE" NUMBER, 
	"RATE" VARCHAR2(1), 
	 CHECK (SOLD_AS in ('SUBSCRIPTION','PURCHASE')) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_CLICKS" 
   (	"ID" NUMBER, 
	"CUST_ID" NUMBER, 
	"LEAD_ID" NUMBER, 
	"OPP_ID" NUMBER, 
	"VIEW_TIMESTAMP" TIMESTAMP (6) WITH TIME ZONE, 
	"APP_SESSION" VARCHAR2(255), 
	"ENTITY_TYPE" VARCHAR2(20) NOT NULL ENABLE, 
	"TERRITORY_ID" NUMBER, 
	"CONTACT_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"APP_USERNAME" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_CLICKS_ENT_TYPE_CK" CHECK (entity_type in ('OPPORTUNITY','LEAD','TERRITORY','ACCOUNT', 'CONTACT', 'PRODUCT')) ENABLE, 
	 CONSTRAINT "EBA_SALES_CLICKS_ENT_FK_CK" CHECK (
  entity_type = 'OPPORTUNITY' and opp_id is not null
    or entity_type = 'LEAD' and lead_id is not null
    or entity_type = 'TERRITORY' and territory_id is not null
    or entity_type = 'ACCOUNT' and cust_id is not null
    or entity_type = 'CONTACT' and contact_id is not null
    or entity_type = 'PRODUCT' and product_id is not null
) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_COMMENTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"DEAL_ID" NUMBER, 
	"NOTE" CLOB NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"ENTITY_TYPE" VARCHAR2(20) NOT NULL ENABLE, 
	"LEAD_ID" NUMBER, 
	"TERRITORY_ID" NUMBER, 
	"ACCOUNT_ID" NUMBER, 
	"CONTACT_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	 CONSTRAINT "EBA_SALES_COMMENTS_ENT_TYPE_CK" CHECK (entity_type in ('OPPORTUNITY','LEAD','TERRITORY','ACCOUNT', 'CONTACT', 'PRODUCT')) ENABLE, 
	 CONSTRAINT "EBA_SALES_COMMENTS_ENT_FK_CK" CHECK (
  entity_type = 'OPPORTUNITY' and deal_id is not null
    or entity_type = 'LEAD' and lead_id is not null
    or entity_type = 'TERRITORY' and territory_id is not null
    or entity_type = 'ACCOUNT' and account_id is not null
    or entity_type = 'CONTACT' and contact_id is not null
    or entity_type = 'PRODUCT' and product_id is not null
) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_FILES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DEAL_ID" NUMBER, 
	"FILENAME" VARCHAR2(4000), 
	"FILE_MIMETYPE" VARCHAR2(512), 
	"FILE_CHARSET" VARCHAR2(512), 
	"FILE_BLOB" BLOB, 
	"FILE_COMMENTS" VARCHAR2(4000), 
	"TAGS" VARCHAR2(4000), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"ENTITY_TYPE" VARCHAR2(20) NOT NULL ENABLE, 
	"LEAD_ID" NUMBER, 
	"TERRITORY_ID" NUMBER, 
	"ACCOUNT_ID" NUMBER, 
	"CONTACT_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"ESTIMATE_ID" NUMBER, 
	 CONSTRAINT "EBA_SALES_FILES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EBA_SALES_FILES_ENT_TYPE_CK" CHECK ( entity_type in ('OPPORTUNITY','LEAD','TERRITORY','ACCOUNT', 'CONTACT', 'PRODUCT', 'ESTIMATE')) ENABLE, 
	 CONSTRAINT "EBA_SALES_FILES_ENT_FK_CK" CHECK ( 
    entity_type = 'OPPORTUNITY' and deal_id is not null 
or entity_type = 'LEAD' and lead_id is not null 
or entity_type = 'TERRITORY' and territory_id is not null 
or entity_type = 'ACCOUNT' and account_id is not null 
or entity_type = 'CONTACT' and contact_id is not null 
or entity_type = 'PRODUCT' and product_id is not null
or entity_type = 'ESTIMATE' and estimate_id is not null
) ENABLE
   ) ;

CREATE TABLE "EBA_SALES_LINKS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER NOT NULL ENABLE, 
	"DEAL_ID" NUMBER, 
	"LINK_TARGET" VARCHAR2(4000) NOT NULL ENABLE, 
	"LINK_TEXT" VARCHAR2(255) NOT NULL ENABLE, 
	"LINK_COMMENTS" VARCHAR2(4000), 
	"TAGS" VARCHAR2(4000), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"ENTITY_TYPE" VARCHAR2(20) NOT NULL ENABLE, 
	"LEAD_ID" NUMBER, 
	"TERRITORY_ID" NUMBER, 
	"ACCOUNT_ID" NUMBER, 
	"CONTACT_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	 CONSTRAINT "EBA_SALES_LINKS_ENT_TYPE_CK" CHECK (entity_type in ('OPPORTUNITY','LEAD','TERRITORY','ACCOUNT', 'CONTACT', 'PRODUCT')) ENABLE, 
	 CONSTRAINT "EBA_SALES_LINKS_ENT_FK_CK" CHECK (
  entity_type = 'OPPORTUNITY' and deal_id is not null
    or entity_type = 'LEAD' and lead_id is not null
    or entity_type = 'TERRITORY' and territory_id is not null
    or entity_type = 'ACCOUNT' and account_id is not null
    or entity_type = 'CONTACT' and contact_id is not null
    or entity_type = 'PRODUCT' and product_id is not null
) ENABLE, 
	 CONSTRAINT "EBA_SALES_LINKS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_TERRITORY_ACL" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"TERRITORY_ID" NUMBER, 
	"USERID" VARCHAR2(255) NOT NULL ENABLE, 
	"ACL_COMMENTS" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_01" VARCHAR2(255), 
	"FLEX_02" VARCHAR2(255), 
	"FLEX_03" VARCHAR2(255), 
	"FLEX_04" VARCHAR2(255), 
	"FLEX_05" VARCHAR2(255), 
	"FLEX_06" VARCHAR2(255), 
	"FLEX_07" VARCHAR2(255), 
	"FLEX_08" VARCHAR2(255), 
	"FLEX_09" VARCHAR2(255), 
	"FLEX_10" VARCHAR2(255), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_COUNTRIES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"COUNTRY_CODE" VARCHAR2(30), 
	"COUNTRY_NAME" VARCHAR2(255), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_STATES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER NOT NULL ENABLE, 
	"STATE" VARCHAR2(255) NOT NULL ENABLE, 
	"CODE" VARCHAR2(255), 
	"COUNTRY" VARCHAR2(255), 
	"STATE_REGION" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 CONSTRAINT "EBA_SALES_STATES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_TERR_MAP" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER NOT NULL ENABLE, 
	"TERRITORY_ID" NUMBER NOT NULL ENABLE, 
	"STATE_ID" NUMBER, 
	"COUNTRY_ID" NUMBER, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_TERR_MAP_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_VERIFICATIONS" 
   (	"ID" NUMBER, 
	"CUST_ID" NUMBER, 
	"LEAD_ID" NUMBER, 
	"OPP_ID" NUMBER, 
	"VERIFICATION_COMMENT" VARCHAR2(4000), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"TERRITORY_ID" NUMBER, 
	"ENTITY_TYPE" VARCHAR2(20) NOT NULL ENABLE, 
	"CONTACT_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"VERIFIED_BY" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_VERIF_ENT_TYPE_CK" CHECK (entity_type in ('OPPORTUNITY','LEAD','TERRITORY','ACCOUNT', 'CONTACT', 'PRODUCT')) ENABLE, 
	 CONSTRAINT "EBA_SALES_VERIF_ENT_FK_CK" CHECK (
  entity_type = 'OPPORTUNITY' and opp_id is not null
    or entity_type = 'LEAD' and lead_id is not null
    or entity_type = 'TERRITORY' and territory_id is not null
    or entity_type = 'ACCOUNT' and cust_id is not null
    or entity_type = 'CONTACT' and contact_id is not null
    or entity_type = 'PRODUCT' and product_id is not null
) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_EVENTS" 
   (	"ID_EVENT" NUMBER NOT NULL ENABLE, 
	"LEAD" NUMBER, 
	"DEALS" NUMBER, 
	"CUSTOMERS" NUMBER, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"START_DATE" TIMESTAMP (6), 
	"END_DATE" TIMESTAMP (6), 
	"DESCRIPTION" VARCHAR2(4000), 
	"STATUS" VARCHAR2(1), 
	"SALES_REP" VARCHAR2(255), 
	"TYPE" VARCHAR2(1), 
	 CONSTRAINT "EBA_SALES_LEADS_EVENTS_PK" PRIMARY KEY ("ID_EVENT")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_CUSTOMER_LOCATIONS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"CUSTOMER_ADDRESS_TYPE" VARCHAR2(30), 
	"CUSTOMER_ADDRESS_DESC" VARCHAR2(4000), 
	"CUSTOMER_ID" NUMBER NOT NULL ENABLE, 
	"CUSTOMER_LOCATION_NAME" VARCHAR2(255), 
	"CUSTOMER_ADDRESS1" VARCHAR2(255), 
	"CUSTOMER_ADDRESS2" VARCHAR2(255), 
	"CUSTOMER_CITY" VARCHAR2(255), 
	"CUSTOMER_STATE" VARCHAR2(255), 
	"CUSTOMER_COUNTRY" VARCHAR2(255), 
	"CUSTOMER_POSTAL_CODE" VARCHAR2(30), 
	"CUSTOMER_DESCRIPTION" VARCHAR2(4000), 
	"CUSTOMER_TERRITORY_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 CONSTRAINT "EBA_SALES_CUST_LOC_AT" CHECK (customer_address_type in ('BILLTO','SHIPTO','OLD','OTHER')) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_AGREEMENT_TYPES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"NAME" VARCHAR2(255), 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_AGREEMENTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"NAME" VARCHAR2(255), 
	"AGREEMENT_TYPE_ID" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_TERMS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(255), 
	"MONTH_EQUIV" NUMBER, 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_CUST_AGRMNT_MAP" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"NAME" VARCHAR2(255), 
	"CLOSE_DATE" TIMESTAMP (6) WITH TIME ZONE, 
	"TERM_ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"AGREEMENT_ID" NUMBER, 
	"QUOTE_PRICE" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_SUPRT_AMT_TYPES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"NAME" VARCHAR2(255), 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_SUPPORT_AMTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"NAME" VARCHAR2(255), 
	"AMOUNT_TYPE_ID" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_CUST_SPT_AMT_MAP" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"NAME" VARCHAR2(255), 
	"CLOSE_DATE" TIMESTAMP (6) WITH TIME ZONE, 
	"TERM_ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"AMOUNT_ID" NUMBER, 
	"QUOTE_PRICE" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_DEAL_COMPETITION" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"COMPETITOR_ID" NUMBER NOT NULL ENABLE, 
	"DEAL_ID" NUMBER NOT NULL ENABLE, 
	"COMPETITOR_THREAT_ID" NUMBER, 
	"COMPETITION_DESC" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"INTERNAL_FLEX_FLAG_01" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_02" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_03" VARCHAR2(30), 
	"INTERNAL_FLEX_FLAG_04" VARCHAR2(30), 
	"INTERNAL_FLEX_01" VARCHAR2(4000), 
	"INTERNAL_FLEX_02" VARCHAR2(4000), 
	"INTERNAL_FLEX_03" VARCHAR2(4000), 
	"INTERNAL_FLEX_04" VARCHAR2(4000), 
	"FLEX_FLAG_01" VARCHAR2(30), 
	"FLEX_FLAG_02" VARCHAR2(30), 
	"FLEX_FLAG_03" VARCHAR2(30), 
	"FLEX_FLAG_04" VARCHAR2(30), 
	"FLEX_FLAG_05" VARCHAR2(30), 
	"FLEX_FLAG_06" VARCHAR2(30), 
	"FLEX_FLAG_07" VARCHAR2(30), 
	"FLEX_FLAG_08" VARCHAR2(30), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	 CONSTRAINT "EBA_SALES_DEAL_COMP_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_PRODUCT_LOBS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"NAME" VARCHAR2(255), 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_PRODUCT_FAMILIES" 
   (	"ID" NUMBER, 
	"PRODUCT_FAMILY" VARCHAR2(100), 
	"DESCRIPTION" VARCHAR2(4000), 
	"LOB_ID" NUMBER, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_PRODUCT_FAMILIES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_ESTIMATE" 
   (	"ID" NUMBER, 
	"DEAL_ID" NUMBER, 
	"EMAIL" VARCHAR2(255), 
	"BILLING_ADDRESS" VARCHAR2(500), 
	"ESTIMATE_DATE" DATE, 
	"EXPIRATION_DATE" DATE, 
	"MESSAGE_ESTIMATE" VARCHAR2(4000), 
	"MESSAGE_STATEMENT" VARCHAR2(4000), 
	 CONSTRAINT "EBA_SALES_ESTIMATE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_ESTIMATE_PRODUCTS" 
   (	"ID" NUMBER, 
	"SEQ" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"ESTIMATE_ID" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000), 
	"QUANTITY" NUMBER, 
	"RATE" NUMBER, 
	"AMOUNT" NUMBER, 
	 CONSTRAINT "EBA_SALES_ESTIMATE_PRODUCTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_DEAL_PRODUCTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"DEAL_ID" NUMBER NOT NULL ENABLE, 
	"PRODUCT_ID" NUMBER NOT NULL ENABLE, 
	"QUOTE_PRICE" NUMBER, 
	"TCV" NUMBER, 
	"TERM" NUMBER, 
	"CLOSE_DATE" DATE, 
	"QTR" VARCHAR2(8), 
	"DEAL_PROD_PROBABILITY" NUMBER, 
	"DEAL_PROD_DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"FLEX_05" VARCHAR2(4000), 
	"FLEX_06" VARCHAR2(4000), 
	"FLEX_07" VARCHAR2(4000), 
	"FLEX_08" VARCHAR2(4000), 
	"FLEX_09" VARCHAR2(4000), 
	"FLEX_10" VARCHAR2(4000), 
	"FLEX_D01" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D02" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D03" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D04" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_D05" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_N01" NUMBER, 
	"FLEX_N02" NUMBER, 
	"FLEX_N03" NUMBER, 
	"FLEX_N04" NUMBER, 
	"FLEX_N05" NUMBER, 
	"FLEX_N06" NUMBER, 
	"FLEX_N07" NUMBER, 
	"FLEX_N08" NUMBER, 
	"FLEX_N09" NUMBER, 
	"FLEX_N10" NUMBER, 
	"ESTIMATE_ID" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_NOTIFICATIONS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"NOTIFICATION_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"NOTIFICATION_DESCRIPTION" VARCHAR2(4000), 
	"NOTIFICATION_TYPE" VARCHAR2(30) NOT NULL ENABLE, 
	"DISPLAY_SEQUENCE" NUMBER, 
	"DISPLAY_FROM" TIMESTAMP (6) WITH TIME ZONE, 
	"DISPLAY_UNTIL" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 CONSTRAINT "EBA_SALES_NOTE_TP_CC" CHECK (notification_type in ('RED','YELLOW')) ENABLE, 
	 CONSTRAINT "EBA_SALES_NOTE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_HISTORY" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DEAL_ID" NUMBER, 
	"DEAL_ROWKEY" VARCHAR2(30), 
	"COLUMN_NAME" VARCHAR2(60) NOT NULL ENABLE, 
	"OLD_VALUE" VARCHAR2(4000), 
	"NEW_VALUE" VARCHAR2(4000), 
	"CHANGE_DATE" TIMESTAMP (6) WITH TIME ZONE, 
	"CHANGED_BY" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_HISTORY_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_DEAL_STAGES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER NOT NULL ENABLE, 
	"STAGE" VARCHAR2(255), 
	"STAGE_DESC" VARCHAR2(4000), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_STAGES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_TAGS_SUM" 
   (	"TAG" VARCHAR2(255), 
	"TAG_COUNT" NUMBER, 
	 CONSTRAINT "EBA_SALES_TAGS_SUM_PK" PRIMARY KEY ("TAG")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_PREFERENCES" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"PREFERENCE_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"PREFERENCE_VALUE" VARCHAR2(255) NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"CREATED_ON" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED_ON" TIMESTAMP (6) WITH TIME ZONE, 
	 CONSTRAINT "EBA_SALES_PREFS_PREFNAME_CK" CHECK (upper(preference_name)=preference_name) ENABLE, 
	 CONSTRAINT "EBA_SALES_PREFERENCES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_ERROR_LOOKUP" 
   (	"CONSTRAINT_NAME" VARCHAR2(30) NOT NULL ENABLE, 
	"MESSAGE" VARCHAR2(4000) NOT NULL ENABLE, 
	"LANGUAGE_CODE" VARCHAR2(30) NOT NULL ENABLE, 
	 CONSTRAINT "EBA_SALES_ERROR_LOOKUP_PK" PRIMARY KEY ("CONSTRAINT_NAME")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_DEAL_STATUS_CODES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"DISPLAY_ORDER" NUMBER, 
	"CODE_TYPE" VARCHAR2(30), 
	"STATUS_CODE" VARCHAR2(255) NOT NULL ENABLE, 
	"CORRESPONDING_PROB_PCT" NUMBER(3,0) NOT NULL ENABLE, 
	"CODE_DESCRIPTION" VARCHAR2(4000), 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"SHOW_KANBAN" VARCHAR2(1), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_GPT_SETTINGS" 
   (	"API_KEY" VARCHAR2(255), 
	"PROMPT_COMMAND" CLOB, 
	"ID" NUMBER, 
	 CONSTRAINT "EBA_SALES_GPT_SETTINGS_CON" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_SVPS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"SVP_NAME" VARCHAR2(255), 
	"SVP_ORG_DESCRIPTION" VARCHAR2(4000), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_SALESREP_ROLES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROLE_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"IS_SALES_REP" VARCHAR2(1), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_TAGS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"TAG" VARCHAR2(255) NOT NULL ENABLE, 
	"CONTENT_ID" NUMBER, 
	"CONTENT_TYPE" VARCHAR2(30), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_TAGS_CK" CHECK (content_type in ('ACCOUNT','CONTACT','DEAL','COMPETITOR', 'TERRITORY', 'PRODUCT', 'LEAD')) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_TAGS_TYPE_SUM" 
   (	"TAG" VARCHAR2(255), 
	"CONTENT_TYPE" VARCHAR2(30), 
	"TAG_COUNT" NUMBER, 
	 CONSTRAINT "EBA_SALES_TAGS_TP_SUM_PK" PRIMARY KEY ("TAG", "CONTENT_TYPE")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_ERRORS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ERR_TIME" TIMESTAMP (6) WITH TIME ZONE DEFAULT current_timestamp NOT NULL ENABLE, 
	"APP_ID" NUMBER, 
	"APP_PAGE_ID" NUMBER, 
	"APP_USER" VARCHAR2(512), 
	"USER_AGENT" VARCHAR2(4000), 
	"IP_ADDRESS" VARCHAR2(512), 
	"IP_ADDRESS2" VARCHAR2(512), 
	"MESSAGE" VARCHAR2(4000), 
	"PAGE_ITEM_NAME" VARCHAR2(255), 
	"REGION_ID" NUMBER, 
	"COLUMN_ALIAS" VARCHAR2(255), 
	"ROW_NUM" NUMBER, 
	"APEX_ERROR_CODE" VARCHAR2(255), 
	"ORA_SQLCODE" NUMBER, 
	"ORA_SQLERRM" VARCHAR2(4000), 
	"ERROR_BACKTRACE" VARCHAR2(4000), 
	 CONSTRAINT "EBA_SALES_ERRORS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_SALES_PERIODS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"PERIOD_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"FIRST_DAY" TIMESTAMP (6) WITH TIME ZONE, 
	"LAST_DAY" TIMESTAMP (6) WITH TIME ZONE, 
	"FISCAL_YEAR" NUMBER(2,0), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_CURRENCIES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"ROW_KEY" VARCHAR2(255), 
	"CURRENCY_CODE" VARCHAR2(50) NOT NULL ENABLE, 
	"CURRENCY_DESCRIPTION" VARCHAR2(4000), 
	"USD_EX_RATE" NUMBER, 
	"CURRENCY_SYMBOL" VARCHAR2(30), 
	"CREATED_BY" VARCHAR2(255), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"FLEX_01" VARCHAR2(4000), 
	"FLEX_02" VARCHAR2(4000), 
	"FLEX_03" VARCHAR2(4000), 
	"FLEX_04" VARCHAR2(4000), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_PROFILE" 
   (	"ID" NUMBER, 
	"DESCRIPTION" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_PROFILE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE "EBA_SALES_TZ_PREF" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ROW_VERSION_NUMBER" NUMBER(*,0), 
	"USERID" VARCHAR2(255) NOT NULL ENABLE, 
	"TIMEZONE_PREFERENCE" VARCHAR2(255) NOT NULL ENABLE, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "EBA_SALES_TZ_PREF_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

ALTER TABLE "EBA_SALES_EVENTS" ADD CONSTRAINT "EBA_SALES_LEADS_EVENTS_FK_SALES_LEADS" FOREIGN KEY ("LEAD")
	  REFERENCES "EBA_SALES_LEADS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_EVENTS" ADD CONSTRAINT "EBA_SALES_LEADS_EVENTS_FK_SALES_CUSTOMERS" FOREIGN KEY ("CUSTOMERS")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_EVENTS" ADD CONSTRAINT "EBA_SALES_LEADS_EVENTS_FK_SALES_DEALS" FOREIGN KEY ("DEALS")
	  REFERENCES "EBA_SALES_DEALS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_ESTIMATE" ADD CONSTRAINT "EBA_SALES_ESTIMATE_FK_DEAL" FOREIGN KEY ("DEAL_ID")
	  REFERENCES "EBA_SALES_DEALS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_DEAL_PRODUCTS" ADD CONSTRAINT "EBA_SALES_DEAL_PRODUCTS_FK_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "EBA_SALES_ESTIMATE" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_ESTIMATE_PRODUCTS" ADD CONSTRAINT "EBA_SALES_ESTIMATE_PRODUCTS_FK_PRODUCT" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "EBA_SALES_PRODUCTS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_ESTIMATE_PRODUCTS" ADD CONSTRAINT "EBA_SALES_EST_PRODUCTS_FK_EST" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "EBA_SALES_ESTIMATE" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_SALESREPS" ADD CONSTRAINT "EBA_SALES_SALESREPS_FK_USER" FOREIGN KEY ("REP_USER")
	  REFERENCES "EBA_SALES_USER" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_AGREEMENTS" ADD FOREIGN KEY ("AGREEMENT_TYPE_ID")
	  REFERENCES "EBA_SALES_AGREEMENT_TYPES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CUST_AGRMNT_MAP" ADD FOREIGN KEY ("TERM_ID")
	  REFERENCES "EBA_SALES_TERMS" ("ID") ON DELETE SET NULL ENABLE;

ALTER TABLE "EBA_SALES_CUST_AGRMNT_MAP" ADD FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE SET NULL ENABLE;

ALTER TABLE "EBA_SALES_CUST_AGRMNT_MAP" ADD FOREIGN KEY ("AGREEMENT_ID")
	  REFERENCES "EBA_SALES_AGREEMENTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_SUPPORT_AMTS" ADD FOREIGN KEY ("AMOUNT_TYPE_ID")
	  REFERENCES "EBA_SALES_SUPRT_AMT_TYPES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CUST_SPT_AMT_MAP" ADD FOREIGN KEY ("TERM_ID")
	  REFERENCES "EBA_SALES_TERMS" ("ID") ON DELETE SET NULL ENABLE;

ALTER TABLE "EBA_SALES_CUST_SPT_AMT_MAP" ADD FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE SET NULL ENABLE;

ALTER TABLE "EBA_SALES_CUST_SPT_AMT_MAP" ADD FOREIGN KEY ("AMOUNT_ID")
	  REFERENCES "EBA_SALES_SUPPORT_AMTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_LEADS" ADD CONSTRAINT "EBA_SALES_LEADS_FK_ACCOUNT_TYPE" FOREIGN KEY ("LEAD_ACCOUNT_TYPE")
	  REFERENCES "EBA_SALES_ACCOUNT_TYPE" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_LEADS" ADD CONSTRAINT "EBA_SALES_LEADS_FK_SALES_SALESREPS" FOREIGN KEY ("LEAD_SALESREPS")
	  REFERENCES "EBA_SALES_SALESREPS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_FILES" ADD CONSTRAINT "EBA_SALES_FILES_ACCT_FK" FOREIGN KEY ("ACCOUNT_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_FILES" ADD CONSTRAINT "EBA_SALES_FILES_CONT_FK" FOREIGN KEY ("CONTACT_ID")
	  REFERENCES "EBA_SALES_CUSTOMER_CONTACTS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_FILES" ADD CONSTRAINT "EBA_SALES_FILES_FK" FOREIGN KEY ("DEAL_ID")
	  REFERENCES "EBA_SALES_DEALS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_FILES" ADD CONSTRAINT "EBA_SALES_FILES_LEADS_FK" FOREIGN KEY ("LEAD_ID")
	  REFERENCES "EBA_SALES_LEADS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_FILES" ADD CONSTRAINT "EBA_SALES_FILES_PROD_FK" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "EBA_SALES_PRODUCTS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_FILES" ADD CONSTRAINT "EBA_SALES_FILES_TERR_FK" FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_LINKS" ADD CONSTRAINT "EBA_SALES_LINKS_ACCT_FK" FOREIGN KEY ("ACCOUNT_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_LINKS" ADD CONSTRAINT "EBA_SALES_LINKS_CONT_FK" FOREIGN KEY ("CONTACT_ID")
	  REFERENCES "EBA_SALES_CUSTOMER_CONTACTS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_LINKS" ADD CONSTRAINT "EBA_SALES_LINKS_LEADS_FK" FOREIGN KEY ("LEAD_ID")
	  REFERENCES "EBA_SALES_LEADS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_LINKS" ADD CONSTRAINT "EBA_SALES_LINKS_PROD_FK" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "EBA_SALES_PRODUCTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_LINKS" ADD CONSTRAINT "EBA_SALES_LINKS_TERR_FK" FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_LINKS" ADD CONSTRAINT "EBA_SALES_LINK_FK" FOREIGN KEY ("DEAL_ID")
	  REFERENCES "EBA_SALES_DEALS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_TERRITORY_ACL" ADD CONSTRAINT "EBA_SALES_TERR_ACL_FK" FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_TERR_MAP" ADD CONSTRAINT "EBA_SALES_TERR_MAP_FK" FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_TERR_MAP" ADD CONSTRAINT "EBA_SALES_TERR_MAP_FK3" FOREIGN KEY ("STATE_ID")
	  REFERENCES "EBA_SALES_STATES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_TERR_MAP" ADD CONSTRAINT "EBA_SALES_TERR_MAP_FK4" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "EBA_SALES_COUNTRIES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_VERIFICATIONS" ADD CONSTRAINT "EBA_SALES_VERIF_CONTACT_FK" FOREIGN KEY ("CONTACT_ID")
	  REFERENCES "EBA_SALES_CUSTOMER_CONTACTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_VERIFICATIONS" ADD CONSTRAINT "EBA_SALES_VERIF_PRODUCT_FK" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "EBA_SALES_PRODUCTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_VERIFICATIONS" ADD FOREIGN KEY ("CUST_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_VERIFICATIONS" ADD FOREIGN KEY ("LEAD_ID")
	  REFERENCES "EBA_SALES_LEADS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_VERIFICATIONS" ADD FOREIGN KEY ("OPP_ID")
	  REFERENCES "EBA_SALES_DEALS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_VERIFICATIONS" ADD FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_LEADS" ADD FOREIGN KEY ("LEAD_SOURCE_ID")
	  REFERENCES "EBA_SALES_LEAD_SOURCES" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_LEADS" ADD FOREIGN KEY ("LEAD_STATUS_ID")
	  REFERENCES "EBA_SALES_LEAD_STATUS_CODES" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_USERS" ADD CONSTRAINT "EBA_SALES_USERS_ACC_LEVEL_FK" FOREIGN KEY ("ACCESS_LEVEL_ID")
	  REFERENCES "EBA_SALES_ACCESS_LEVELS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_CLICKS" ADD CONSTRAINT "EBA_SALES_CLICKS_CONTACT_FK" FOREIGN KEY ("CONTACT_ID")
	  REFERENCES "EBA_SALES_CUSTOMER_CONTACTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CLICKS" ADD CONSTRAINT "EBA_SALES_CLICKS_OPPS_FK" FOREIGN KEY ("OPP_ID")
	  REFERENCES "EBA_SALES_DEALS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CLICKS" ADD CONSTRAINT "EBA_SALES_CLICKS_PRODUCT_FK" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "EBA_SALES_PRODUCTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CLICKS" ADD CONSTRAINT "EBA_SALES_CLICKS_TERR_FK" FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CLICKS" ADD FOREIGN KEY ("CUST_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CLICKS" ADD FOREIGN KEY ("LEAD_ID")
	  REFERENCES "EBA_SALES_LEADS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_COMMENTS" ADD CONSTRAINT "EBA_SALES_COMMENTS_ACNTS_FK" FOREIGN KEY ("ACCOUNT_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_COMMENTS" ADD CONSTRAINT "EBA_SALES_COMMENTS_CNTS_FK" FOREIGN KEY ("CONTACT_ID")
	  REFERENCES "EBA_SALES_CUSTOMER_CONTACTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_COMMENTS" ADD CONSTRAINT "EBA_SALES_COMMENTS_LEADS_FK" FOREIGN KEY ("LEAD_ID")
	  REFERENCES "EBA_SALES_LEADS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_COMMENTS" ADD CONSTRAINT "EBA_SALES_COMMENTS_OPPS_FK" FOREIGN KEY ("DEAL_ID")
	  REFERENCES "EBA_SALES_DEALS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_COMMENTS" ADD CONSTRAINT "EBA_SALES_COMMENTS_PRODS_FK" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "EBA_SALES_PRODUCTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_COMMENTS" ADD CONSTRAINT "EBA_SALES_COMMENTS_TERRS_FK" FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CUSTOMER_LOCATIONS" ADD CONSTRAINT "EBA_SALES_CUSTOMER_LOC_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_DEAL_COMPETITION" ADD FOREIGN KEY ("COMPETITOR_THREAT_ID")
	  REFERENCES "EBA_SALES_COMPETITOR_THREATS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_DEAL_TEAM" ADD FOREIGN KEY ("DEAL_ID")
	  REFERENCES "EBA_SALES_DEALS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_DEAL_TEAM" ADD FOREIGN KEY ("REP_ID")
	  REFERENCES "EBA_SALES_SALESREPS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_CUSTOMERS" ADD CONSTRAINT "EBA_SALES_CUST_REPS_FK" FOREIGN KEY ("DEFAULT_REP_ID")
	  REFERENCES "EBA_SALES_SALESREPS" ("ID") ON DELETE SET NULL ENABLE;

ALTER TABLE "EBA_SALES_CUSTOMERS" ADD CONSTRAINT "EBA_SALES_CUST_TERR_FK" FOREIGN KEY ("CUSTOMER_TERRITORY_ID")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_CUSTOMERS" ADD FOREIGN KEY ("CUSTOMER_INDUSTRY_ID")
	  REFERENCES "EBA_SALES_INDUSTRIES" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_ACT_COMPETITION" ADD CONSTRAINT "EBA_SALES_ACT_COMP_FK" FOREIGN KEY ("COMPETITOR_ID")
	  REFERENCES "EBA_SALES_COMPETITORS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_ACT_COMPETITION" ADD CONSTRAINT "EBA_SALES_ACT_COMP_FK2" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "EBA_SALES_CUSTOMERS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_ACT_COMPETITION" ADD CONSTRAINT "EBA_SALES_ACT_COMP_FK3" FOREIGN KEY ("COMPETITOR_THREAT_ID")
	  REFERENCES "EBA_SALES_COMPETITOR_THREATS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_PRODUCT_FAMILIES" ADD FOREIGN KEY ("LOB_ID")
	  REFERENCES "EBA_SALES_PRODUCT_LOBS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_PRODUCTS" ADD CONSTRAINT "EBA_SALES_PRODUCTS_FAMILIES_FK" FOREIGN KEY ("PRODUCT_FAMILY_ID")
	  REFERENCES "EBA_SALES_PRODUCT_FAMILIES" ("ID") ON DELETE SET NULL ENABLE;

ALTER TABLE "EBA_SALES_DEALS" ADD FOREIGN KEY ("SPONSOR_CONTACT_ID")
	  REFERENCES "EBA_SALES_CUSTOMER_CONTACTS" ("ID") ON DELETE CASCADE ENABLE;

ALTER TABLE "EBA_SALES_DEALS" ADD CONSTRAINT "EBA_SALES_DEALS_TERR_FK" FOREIGN KEY ("TERRITORY_ID_OLD")
	  REFERENCES "EBA_SALES_TERRITORIES" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_DEALS" ADD FOREIGN KEY ("FINANCIAL_ASSESSMENT_ID")
	  REFERENCES "EBA_SALES_FIN_ASSESSMENTS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_DEALS" ADD FOREIGN KEY ("STATUS_ASSESSMENT_ID")
	  REFERENCES "EBA_SALES_STATUS_ASSESSMENTS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_DEALS" ADD FOREIGN KEY ("RISK_ASSESSMENT_ID")
	  REFERENCES "EBA_SALES_RISK_ASSESSMENTS" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_DEALS" ADD FOREIGN KEY ("ACCOUNT_STANDING_ID")
	  REFERENCES "EBA_SALES_ACCOUNT_STANDING" ("ID") ENABLE;

ALTER TABLE "EBA_SALES_PRODUCTS" ADD CONSTRAINT "EBA_SALES_PRODUCTS_FK_UNIT_MEASURE" FOREIGN KEY ("PRODUCT_UNIT_MEASURE")
	  REFERENCES "EBA_SALES_UNIT_MEASURE" ("ID") ENABLE;

CREATE UNIQUE INDEX "EBA_SALES_ACCESS_LEVELS_UK" ON "EBA_SALES_ACCESS_LEVELS" ("ACCESS_LEVEL") 
  ;

CREATE INDEX "EBA_SALES_ACT_COMPETITION_1" ON "EBA_SALES_ACT_COMPETITION" ("COMPETITOR_ID") 
  ;

CREATE INDEX "EBA_SALES_ACT_COMPETITION_2" ON "EBA_SALES_ACT_COMPETITION" ("CUSTOMER_ID") 
  ;

CREATE INDEX "EBA_SALES_ACT_COMPETITION_3" ON "EBA_SALES_ACT_COMPETITION" ("COMPETITOR_THREAT_ID") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_AGREEMENTS_UK" ON "EBA_SALES_AGREEMENTS" ("NAME") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_AGREEMENT_TYPES_UK" ON "EBA_SALES_AGREEMENT_TYPES" ("NAME") 
  ;

CREATE INDEX "EBA_SALES_CLICKS_IDX1" ON "EBA_SALES_CLICKS" ("LEAD_ID") 
  ;

CREATE INDEX "EBA_SALES_CLICKS_IDX2" ON "EBA_SALES_CLICKS" ("CUST_ID") 
  ;

CREATE INDEX "EBA_SALES_CLICKS_IDX3" ON "EBA_SALES_CLICKS" ("OPP_ID") 
  ;

CREATE INDEX "EBA_SALES_CLICKS_IDX4" ON "EBA_SALES_CLICKS" (SYS_EXTRACT_UTC("VIEW_TIMESTAMP")) 
  ;

CREATE INDEX "EBA_SALES_CLICKS_IDX5" ON "EBA_SALES_CLICKS" ("TERRITORY_ID") 
  ;

CREATE INDEX "EBA_SALES_CLICKS_IDX6" ON "EBA_SALES_CLICKS" ("CONTACT_ID") 
  ;

CREATE INDEX "EBA_SALES_CLICKS_IDX7" ON "EBA_SALES_CLICKS" ("PRODUCT_ID") 
  ;

CREATE INDEX "EBA_SALES_COMMENTS_IDX1" ON "EBA_SALES_COMMENTS" ("DEAL_ID") 
  ;

CREATE INDEX "EBA_SALES_COMMENTS_IDX2" ON "EBA_SALES_COMMENTS" ("LEAD_ID") 
  ;

CREATE INDEX "EBA_SALES_COMMENTS_IDX3" ON "EBA_SALES_COMMENTS" ("TERRITORY_ID") 
  ;

CREATE INDEX "EBA_SALES_COMMENTS_IDX4" ON "EBA_SALES_COMMENTS" ("ACCOUNT_ID") 
  ;

CREATE INDEX "EBA_SALES_COMMENTS_IDX5" ON "EBA_SALES_COMMENTS" ("CONTACT_ID") 
  ;

CREATE INDEX "EBA_SALES_COMMENTS_IDX6" ON "EBA_SALES_COMMENTS" ("PRODUCT_ID") 
  ;

CREATE INDEX "EBA_SALES_CUSTOMERS_I1" ON "EBA_SALES_CUSTOMERS" ("ROW_KEY") 
  ;

CREATE INDEX "EBA_SALES_CUSTOMERS_I2" ON "EBA_SALES_CUSTOMERS" ("CUSTOMER_INDUSTRY_ID") 
  ;

CREATE INDEX "EBA_SALES_CUSTOMERS_I3" ON "EBA_SALES_CUSTOMERS" ("CUSTOMER_TERRITORY_ID") 
  ;

CREATE INDEX "EBA_SALES_CUSTOMERS_I4" ON "EBA_SALES_CUSTOMERS" ("CUSTOMER_NAME") 
  ;

CREATE INDEX "EBA_SALES_CUSTOMERS_I5" ON "EBA_SALES_CUSTOMERS" ("DEFAULT_REP_ID") 
  ;

CREATE INDEX "EBA_SALES_CUSTOMER_LOC_I1" ON "EBA_SALES_CUSTOMER_LOCATIONS" ("CUSTOMER_ID") 
  ;

CREATE INDEX "EBA_SALES_DEALS_CFK" ON "EBA_SALES_DEALS" ("CUSTOMER_ID") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I1" ON "EBA_SALES_DEALS" ("SALESREP_ID_01") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I10" ON "EBA_SALES_DEALS" ("SVP_ID") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I11" ON "EBA_SALES_DEALS" ("TERRITORY_ID_OLD") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I12" ON "EBA_SALES_DEALS" ("EXTERNAL_OPPORTUNITY_ID") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I2" ON "EBA_SALES_DEALS" ("SALESREP_ID_02") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I3" ON "EBA_SALES_DEALS" ("SALESREP_ID_03") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I4" ON "EBA_SALES_DEALS" ("SALESREP_ID_04") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I5" ON "EBA_SALES_DEALS" ("FINANCIAL_ASSESSMENT_ID") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I6" ON "EBA_SALES_DEALS" ("STATUS_ASSESSMENT_ID") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I7" ON "EBA_SALES_DEALS" ("RISK_ASSESSMENT_ID") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I8" ON "EBA_SALES_DEALS" ("ACCOUNT_STANDING_ID") 
  ;

CREATE INDEX "EBA_SALES_DEALS_I9" ON "EBA_SALES_DEALS" ("VP_ID") 
  ;

CREATE INDEX "EBA_SALES_DEAL_COMPETITION_I1" ON "EBA_SALES_DEAL_COMPETITION" ("COMPETITOR_ID") 
  ;

CREATE INDEX "EBA_SALES_DEAL_COMPETITION_I2" ON "EBA_SALES_DEAL_COMPETITION" ("DEAL_ID") 
  ;

CREATE INDEX "EBA_SALES_DEAL_COMPETITION_I3" ON "EBA_SALES_DEAL_COMPETITION" ("COMPETITOR_THREAT_ID") 
  ;

CREATE INDEX "EBA_SALES_DEAL_PROD_I1" ON "EBA_SALES_DEAL_PRODUCTS" ("DEAL_ID") 
  ;

CREATE INDEX "EBA_SALES_DEAL_PROD_I2" ON "EBA_SALES_DEAL_PRODUCTS" ("PRODUCT_ID") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_DEAL_STATCOD_I1" ON "EBA_SALES_DEAL_STATUS_CODES" ("STATUS_CODE") 
  ;

CREATE INDEX "EBA_SALES_DEAL_TEAM_I1" ON "EBA_SALES_DEAL_TEAM" ("DEAL_ID") 
  ;

CREATE INDEX "EBA_SALES_DEAL_TEAM_I2" ON "EBA_SALES_DEAL_TEAM" ("REP_ID") 
  ;

CREATE INDEX "EBA_SALES_ERRORS_I1" ON "EBA_SALES_ERRORS" (SYS_EXTRACT_UTC("ERR_TIME")) 
  ;

CREATE UNIQUE INDEX "EBA_SALES_ERROR_LOOKUP_UK" ON "EBA_SALES_ERROR_LOOKUP" ("CONSTRAINT_NAME", "LANGUAGE_CODE") 
  ;

CREATE INDEX "EBA_SALES_FILES_IDX1" ON "EBA_SALES_FILES" ("DEAL_ID") 
  ;

CREATE INDEX "EBA_SALES_FILES_IDX2" ON "EBA_SALES_FILES" ("LEAD_ID") 
  ;

CREATE INDEX "EBA_SALES_FILES_IDX3" ON "EBA_SALES_FILES" ("TERRITORY_ID") 
  ;

CREATE INDEX "EBA_SALES_FILES_IDX4" ON "EBA_SALES_FILES" ("ACCOUNT_ID") 
  ;

CREATE INDEX "EBA_SALES_FILES_IDX5" ON "EBA_SALES_FILES" ("CONTACT_ID") 
  ;

CREATE INDEX "EBA_SALES_FILES_IDX6" ON "EBA_SALES_FILES" ("PRODUCT_ID") 
  ;

CREATE INDEX "EBA_SALES_HISTORY_I1" ON "EBA_SALES_HISTORY" ("DEAL_ID") 
  ;

CREATE INDEX "EBA_SALES_LEADS_I1" ON "EBA_SALES_LEADS" ("ACCOUNT_ID") 
  ;

CREATE INDEX "EBA_SALES_LEADS_I2" ON "EBA_SALES_LEADS" ("LEAD_SOURCE_ID") 
  ;

CREATE INDEX "EBA_SALES_LEADS_I3" ON "EBA_SALES_LEADS" ("LEAD_STATUS_ID") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_LEAD_STAT_CDI1" ON "EBA_SALES_LEAD_STATUS_CODES" ("STATUS_CODE") 
  ;

CREATE INDEX "EBA_SALES_LINKS_IDX1" ON "EBA_SALES_LINKS" ("DEAL_ID") 
  ;

CREATE INDEX "EBA_SALES_LINKS_IDX2" ON "EBA_SALES_LINKS" ("LEAD_ID") 
  ;

CREATE INDEX "EBA_SALES_LINKS_IDX3" ON "EBA_SALES_LINKS" ("TERRITORY_ID") 
  ;

CREATE INDEX "EBA_SALES_LINKS_IDX4" ON "EBA_SALES_LINKS" ("ACCOUNT_ID") 
  ;

CREATE INDEX "EBA_SALES_LINKS_IDX5" ON "EBA_SALES_LINKS" ("CONTACT_ID") 
  ;

CREATE INDEX "EBA_SALES_LINKS_IDX6" ON "EBA_SALES_LINKS" ("PRODUCT_ID") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_PREFERENCES_UK" ON "EBA_SALES_PREFERENCES" ("PREFERENCE_NAME") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_PRODUCTS_I1" ON "EBA_SALES_PRODUCTS" ("PRODUCT_NAME") 
  ;

CREATE INDEX "EBA_SALES_PRODUCTS_I2" ON "EBA_SALES_PRODUCTS" ("PRODUCT_SKU") 
  ;

CREATE INDEX "EBA_SALES_PRODUCTS_I3" ON "EBA_SALES_PRODUCTS" ("ROW_KEY") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_PRODUCT_LOBS_UK" ON "EBA_SALES_PRODUCT_LOBS" ("NAME") 
  ;

CREATE INDEX "EBA_SALES_SALESREPS_I1" ON "EBA_SALES_SALESREPS" ("REP_EMAIL") 
  ;

CREATE INDEX "EBA_SALES_SALESREPS_I2" ON "EBA_SALES_SALESREPS" ("REP_MANAGER_ID") 
  ;

CREATE INDEX "EBA_SALES_SALESREPS_I3" ON "EBA_SALES_SALESREPS" ("REP_EBA_SALES_USERNAME") 
  ;

CREATE INDEX "EBA_SALES_SALESREPS_I4" ON "EBA_SALES_SALESREPS" ("SVP_ID") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_SALESREP_ROLENAME" ON "EBA_SALES_SALESREP_ROLES" ("ROLE_NAME") 
  ;

CREATE INDEX "EBA_SALES_SALES_PER_I1" ON "EBA_SALES_SALES_PERIODS" ("PERIOD_NAME") 
  ;

CREATE INDEX "EBA_SALES_STATES_I1" ON "EBA_SALES_STATES" ("STATE") 
  ;

CREATE INDEX "EBA_SALES_STATES_I2" ON "EBA_SALES_STATES" ("CODE") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_SUPPORT_AMTS_UK" ON "EBA_SALES_SUPPORT_AMTS" ("NAME") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_SUPRT_AMT_TYPES_UK" ON "EBA_SALES_SUPRT_AMT_TYPES" ("NAME") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_SVPS_I1" ON "EBA_SALES_SVPS" ("SVP_NAME") 
  ;

CREATE INDEX "EBA_SALES_TERRITORY_ACL_N1" ON "EBA_SALES_TERRITORY_ACL" ("TERRITORY_ID") 
  ;

CREATE INDEX "EBA_SALES_TERR_MAP_I1" ON "EBA_SALES_TERR_MAP" ("TERRITORY_ID") 
  ;

CREATE INDEX "EBA_SALES_TERR_MAP_I3" ON "EBA_SALES_TERR_MAP" ("STATE_ID") 
  ;

CREATE INDEX "EBA_SALES_TERR_MAP_I4" ON "EBA_SALES_TERR_MAP" ("COUNTRY_ID") 
  ;

CREATE INDEX "EBA_SALES_USERS_ACC_LVL_IDX" ON "EBA_SALES_USERS" ("ACCESS_LEVEL_ID") 
  ;

CREATE UNIQUE INDEX "EBA_SALES_USERS_UK" ON "EBA_SALES_USERS" ("USERNAME") 
  ;

CREATE INDEX "EBA_SALES_VERIFY_IDX1" ON "EBA_SALES_VERIFICATIONS" ("CUST_ID") 
  ;

CREATE INDEX "EBA_SALES_VERIFY_IDX2" ON "EBA_SALES_VERIFICATIONS" ("LEAD_ID") 
  ;

CREATE INDEX "EBA_SALES_VERIFY_IDX3" ON "EBA_SALES_VERIFICATIONS" ("OPP_ID") 
  ;

CREATE INDEX "EBA_SALES_VERIFY_IDX4" ON "EBA_SALES_VERIFICATIONS" ("TERRITORY_ID") 
  ;

CREATE INDEX "EBA_SALES_VERIFY_IDX5" ON "EBA_SALES_VERIFICATIONS" ("CONTACT_ID") 
  ;

CREATE INDEX "EBA_SALES_VERIFY_IDX6" ON "EBA_SALES_VERIFICATIONS" ("PRODUCT_ID") 
  ;

CREATE OR REPLACE EDITIONABLE PACKAGE "EBA_SALES_ACL_API" is
    -------------------------------------------------------------------------
    -- Generates a unique Identifier
    -------------------------------------------------------------------------
    function gen_id return number;
    -------------------------------------------------------------------------
    -- Error handling function
    -------------------------------------------------------------------------
    function apex_error_handling (
        p_error in apex_error.t_error )
        return apex_error.t_error_result;
    -------------------------------------------------------------------------
    -- Get's a preference value, given the name
    -------------------------------------------------------------------------
    function get_preference_value (
        p_preference_name   varchar2)
        return varchar2;
    -------------------------------------------------------------------------
    -- Set's a preference value, given the name
    -------------------------------------------------------------------------
    procedure set_preference_value (
        p_preference_name   varchar2,
        p_preference_value  varchar2);
    -------------------------------------------------------------------------
    -- Gets the current user's authorization level. Can depend on the following:
    --  * If access control is currently disabled, returns highest level of 3.
    --  * If access control is enabled, but user is not in list, returns 0
    --  * If access control is enabled and user is in list, returns their
    --    access level.
    -------------------------------------------------------------------------
    function get_authorization_level (
        p_username             varchar2)
        return number;
end eba_sales_acl_api;
/


CREATE OR REPLACE EDITIONABLE PACKAGE BODY "EBA_SALES_ACL_API" as 
    -------------------------------------------------------------------------
    -- Generates a unique Identifier
    -------------------------------------------------------------------------
    function gen_id
        return number
    is
        l_id  number;
    begin
        select to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
          into l_id
          from dual;
    
        return l_id;
    end gen_id;
    procedure add_error_log ( 
        p_error in apex_error.t_error )
    is
    pragma autonomous_transaction;
    begin
        -- Remove old errors
        delete from eba_sales_errors where err_time <= current_timestamp - 21;
        -- Log the error.
        insert into eba_sales_errors (
            app_id,
            app_page_id,
            app_user,
            user_agent,
            ip_address,
            ip_address2,
            message,
            page_item_name,
            region_id,
            column_alias,
            row_num,
            apex_error_code,
            ora_sqlcode,
            ora_sqlerrm,
            error_backtrace )
        select v('APP_ID'),
            v('APP_PAGE_ID'),
            v('APP_USER'),
            owa_util.get_cgi_env('HTTP_USER_AGENT'),
            owa_util.get_cgi_env('REMOTE_ADDR'),
            sys_context('USERENV', 'IP_ADDRESS'),
            substr(p_error.message,0,4000),
            p_error.page_item_name,
            p_error.region_id,
            p_error.column_alias,
            p_error.row_num,
            p_error.apex_error_code,
            p_error.ora_sqlcode,
            substr(p_error.ora_sqlerrm,0,4000),
            substr(p_error.error_backtrace,0,4000)
        from dual;
        commit;
    end add_error_log;
    -------------------------------------------------------------------------
    -- Error handling function
    -------------------------------------------------------------------------
    function apex_error_handling (
        p_error in apex_error.t_error )
        return apex_error.t_error_result
    is
        l_result          apex_error.t_error_result;
        l_constraint_name varchar2(255);
    begin
        l_result := apex_error.init_error_result (
                        p_error => p_error );
        -- If it's an internal error raised by APEX, like an invalid statement or
        -- code which can't be executed, the error text might contain security sensitive
        -- information. To avoid this security problem we can rewrite the error to
        -- a generic error message and log the original error message for further
        -- investigation by the help desk.
        if p_error.is_internal_error then
            -- mask all errors that are not common runtime errors (Access Denied
            -- errors raised by application / page authorization and all errors
            -- regarding session and session state)
            if not p_error.is_common_runtime_error then        
                -- Change the message to the generic error message which doesn't expose
                -- any sensitive information.
                add_error_log( p_error );
                l_result.message         := 'An unexpected internal application error has occurred. ';
                l_result.additional_info := null;                      
            end if;
        else
            -- Always show the error as inline error
            -- Note: If you have created manual tabular forms (using the package
            --       apex_item/htmldb_item in the SQL statement) you should still
            --       use "On error page" on that pages to avoid loosing entered data
            l_result.display_location := case
                                           when l_result.display_location = apex_error.c_on_error_page then apex_error.c_inline_in_notification
                                           else l_result.display_location
                                         end;
            -- If it's a constraint violation like
            --
            --   -) ORA-00001: unique constraint violated
            --   -) ORA-02091: transaction rolled back (-> can hide a deferred constraint)
            --   -) ORA-02290: check constraint violated
            --   -) ORA-02291: integrity constraint violated - parent key not found
            --   -) ORA-02292: integrity constraint violated - child record found
            --
            -- we try to get a friendly error message from our constraint lookup configuration.
            -- If we don't find the constraint in our lookup table we fallback to
            -- the original ORA error message.
            if p_error.ora_sqlcode in (-1, -2091, -2290, -2291, -2292) then
                l_constraint_name := apex_error.extract_constraint_name (
                                         p_error => p_error );
                begin
                    select message
                      into l_result.message
                      from eba_sales_error_lookup
                     where constraint_name = l_constraint_name;
                exception when no_data_found then null; -- not every constraint has to be in our lookup table
                end;
            end if;
            -- If an ORA error has been raised, for example a raise_application_error(-20xxx, '...')
            -- in a table trigger or in a PL/SQL package called by a process and we
            -- haven't found the error in our lookup table, then we just want to see
            -- the actual error text and not the full error stack with all the ORA error numbers.
            if p_error.ora_sqlcode is not null and l_result.message = p_error.message then
                l_result.message := apex_error.get_first_ora_error_text (
                                        p_error => p_error );
            end if;
            -- If no associated page item/tabular form column has been set, we can use
            -- apex_error.auto_set_associated_item to automatically guess the affected
            -- error field by examine the ORA error for constraint names or column names.
            if l_result.page_item_name is null and l_result.column_alias is null then
                apex_error.auto_set_associated_item (
                    p_error        => p_error,
                    p_error_result => l_result );
            end if;
        end if;
        return l_result;
    end apex_error_handling;
    -------------------------------------------------------------------------
    -- Get's a preference value, given the name
    -------------------------------------------------------------------------
    function get_preference_value (
        p_preference_name   varchar2)
        return varchar2
    is
        l_preference_value varchar2(255);
    begin
        select preference_value
          into l_preference_value
          from eba_sales_preferences
         where preference_name = p_preference_name;
        return l_preference_value;
    exception
        when no_data_found then
            return 'Preference does not exist';
    end get_preference_value;
    -------------------------------------------------------------------------
    -- Set's a preference value, given the name
    -------------------------------------------------------------------------
    procedure set_preference_value (
        p_preference_name   varchar2,
        p_preference_value  varchar2)
    is
    begin
        update eba_sales_preferences
           set preference_value = p_preference_value
         where preference_name  = p_preference_name;
    end set_preference_value;
    -------------------------------------------------------------------------
    -- Gets the current user's authorization level. Depends on the following:
    --  * If access control is currently disabled, returns highest level of 3.
    --  * If access control is enabled, but user is not in list, returns 0
    --  * If access control is enabled and user is in list, returns their
    --    access level.
    -------------------------------------------------------------------------
    function get_authorization_level (
        p_username             varchar2)
        return number
    is
        l_access_level_id       eba_sales_users.access_level_id%type := 0;  -- default to lowest privilege.
        l_account_locked        eba_sales_users.account_locked%type;
    begin
        -- If access control is disabled, default to highest privilege
        if get_preference_value('ACCESS_CONTROL_ENABLED') = 'N' then
            return 3;
        else
            -- Query for user's access level, throws no_data_found if no user
            select access_level_id,
                   account_locked
              into l_access_level_id,
                   l_account_locked
              from eba_sales_users
             where username = p_username;
            -- Check if user's account is locked, return 0 (no privilege), otherwise stick
            -- with their level.
            if l_account_locked = 'Y' then
                return 0;
            end if;
            -- Overwrite user access level 1 with access level 2 if access control scope is PUBLIC_CONTRIBUTE
            if l_access_level_id = 1 and get_preference_value('ACCESS_CONTROL_SCOPE') = 'PUBLIC_CONTRIBUTE' then
                return 2;
            end if;            
        end if;
        return l_access_level_id;
    exception
        when no_data_found then
            -- If no user exists with passed username, do a final check if reader access is set to any authenticated user
            if get_preference_value('ACCESS_CONTROL_SCOPE') = 'PUBLIC_CONTRIBUTE' then
                return 2;
            elsif get_preference_value('ACCESS_CONTROL_SCOPE') = 'PUBLIC_READONLY' then
                return 1;
            else
                return 0;
            end if;           
    end get_authorization_level;
    
end eba_sales_acl_api;
/

CREATE OR REPLACE EDITIONABLE PACKAGE "EBA_SALES_DATA" as 
    procedure load_codes; 
    procedure load_sample; 
    procedure remove_sample; 
end;
/


CREATE OR REPLACE EDITIONABLE PACKAGE BODY "EBA_SALES_DATA" as 
    procedure load_sales_periods is 
        y   pls_integer; 
        q   pls_integer; 
        yy  pls_integer; 
        d   date; 
    begin 
        yy := to_char(sysdate-365,'RR');
        d := to_date(to_char(sysdate-365,'YYYY')||'.01.01','YYYY.MM.DD');
 
        for y in 1..20 loop 
            for q in 1..4 loop 
                insert into eba_sales_sales_periods( period_name, first_day, last_day, fiscal_year )
                values ( 
                    'Q'||q||'FY'||lpad(to_char(yy-1+y),2,'0'), 
                    add_months(d,(12*(y-1))+ ((q-1)*3)), 
                    add_months(d,(12*(y-1))+ ((q)*3))-1, 
                    yy+y-1
                ); 
            end loop; 
        end loop;  
    end load_sales_periods; 
 
    procedure load_codes is
    begin
 
        /* sales periods */
        load_sales_periods;
 
        /* currencies */
        insert into eba_sales_currencies (id, currency_code, usd_ex_rate, currency_symbol, currency_description) values (1,'USD',1,'$','US Dollar');
 
        /* countries */
        insert into eba_sales_countries (id,country_code,country_name) values (1,'US','United States'); 
        insert into eba_sales_countries (id,country_code,country_name) values (2,'MEX','Mexico'); 
        insert into eba_sales_countries (id,country_code,country_name) values (3,'CAN','Canada'); 
        insert into eba_sales_countries (id,country_code,country_name) values (4,'UK','United Kingdom'); 
        insert into eba_sales_countries (id,country_code,country_name) values (5,'IN','India'); 
        insert into eba_sales_countries (id,country_code,country_name) values (6,'IE','Ireland'); 
        insert into eba_sales_countries (id,country_code,country_name) values (7,'DE','Germany'); 
        insert into eba_sales_countries (id,country_code,country_name) values (8,'ES','Spain'); 
        insert into eba_sales_countries (id,country_code,country_name) values (9,'AQ','Antarctica'); 
        insert into eba_sales_countries (id,country_code,country_name) values (10,'BE','Beljium'); 
        insert into eba_sales_countries (id,country_code,country_name) values (11,'BM','Bermuda'); 
        insert into eba_sales_countries (id,country_code,country_name) values (12,'BR','Brazil'); 
        insert into eba_sales_countries (id,country_code,country_name) values (13,'BI','Brundi'); 
        insert into eba_sales_countries (id,country_code,country_name) values (14,'JP','Japan'); 
        insert into eba_sales_countries (id,country_code,country_name) values (15,'KO','Korea'); 
 
        /* states */
        insert into eba_sales_states (state, code, country) values ('Alabama', 'AL', 'United States');
        insert into eba_sales_states (state, code, country) values ('Alaska', 'AK', 'United States');
        insert into eba_sales_states (state, code, country) values ('American Samoa', 'AS', 'United States');
        insert into eba_sales_states (state, code, country) values ('Arizona', 'AZ', 'United States');
        insert into eba_sales_states (state, code, country) values ('Arkansas', 'AR', 'United States');
        insert into eba_sales_states (state, code, country) values ('California', 'CA', 'United States');
        insert into eba_sales_states (state, code, country) values ('Colorado', 'CO', 'United States');
        insert into eba_sales_states (state, code, country) values ('Connecticut', 'CT', 'United States');
        insert into eba_sales_states (state, code, country) values ('Delaware', 'DE', 'United States');
        insert into eba_sales_states (state, code, country) values ('Dist. of Columbia', 'DC', 'United States');
        insert into eba_sales_states (state, code, country) values ('Florida', 'FL', 'United States');
        insert into eba_sales_states (state, code, country) values ('Georgia', 'GA', 'United States');
        insert into eba_sales_states (state, code, country) values ('Guam', 'GU', 'United States');
        insert into eba_sales_states (state, code, country) values ('Hawaii', 'HI', 'United States');
        insert into eba_sales_states (state, code, country) values ('Idaho', 'ID', 'United States');
        insert into eba_sales_states (state, code, country) values ('Illinois', 'IL', 'United States');
        insert into eba_sales_states (state, code, country) values ('Indiana', 'IN', 'United States');
        insert into eba_sales_states (state, code, country) values ('Iowa', 'IA', 'United States');
        insert into eba_sales_states (state, code, country) values ('Kansas', 'KS', 'United States');
        insert into eba_sales_states (state, code, country) values ('Kentucky', 'KY', 'United States');
        insert into eba_sales_states (state, code, country) values ('Louisiana', 'LA', 'United States');
        insert into eba_sales_states (state, code, country) values ('Maine', 'ME', 'United States');
        insert into eba_sales_states (state, code, country) values ('Maryland', 'MD', 'United States');
        insert into eba_sales_states (state, code, country) values ('Marshall Islands', 'MH', 'United States');
        insert into eba_sales_states (state, code, country) values ('Massachusetts', 'MA', 'United States');
        insert into eba_sales_states (state, code, country) values ('Michigan', 'MI', 'United States');
        insert into eba_sales_states (state, code, country) values ('Micronesia', 'FM', 'United States');
        insert into eba_sales_states (state, code, country) values ('Minnesota', 'MN', 'United States');
        insert into eba_sales_states (state, code, country) values ('Mississippi', 'MS', 'United States');
        insert into eba_sales_states (state, code, country) values ('Missouri', 'MO', 'United States');
        insert into eba_sales_states (state, code, country) values ('Montana', 'MT', 'United States');
        insert into eba_sales_states (state, code, country) values ('Nebraska', 'NE', 'United States');
        insert into eba_sales_states (state, code, country) values ('Nevada', 'NV', 'United States');
        insert into eba_sales_states (state, code, country) values ('New Hampshire', 'NH', 'United States');
        insert into eba_sales_states (state, code, country) values ('New Jersey', 'NJ', 'United States');
        insert into eba_sales_states (state, code, country) values ('New Mexico', 'NM', 'United States');
        insert into eba_sales_states (state, code, country) values ('New York', 'NY', 'United States');
        insert into eba_sales_states (state, code, country) values ('North Carolina', 'NC', 'United States');
        insert into eba_sales_states (state, code, country) values ('North Dakota', 'ND', 'United States');
        insert into eba_sales_states (state, code, country) values ('Northern Marianas', 'MP', 'United States');
        insert into eba_sales_states (state, code, country) values ('Ohio', 'OH', 'United States');
        insert into eba_sales_states (state, code, country) values ('Oklahoma', 'OK', 'United States');
        insert into eba_sales_states (state, code, country) values ('Oregon', 'OR', 'United States');
        insert into eba_sales_states (state, code, country) values ('Palau', 'PW', 'United States');
        insert into eba_sales_states (state, code, country) values ('Pennsylvania', 'PA', 'United States');
        insert into eba_sales_states (state, code, country) values ('Puerto Rico', 'PR', 'United States');
        insert into eba_sales_states (state, code, country) values ('Rhode Island', 'RI', 'United States');
        insert into eba_sales_states (state, code, country) values ('South Carolina', 'SC', 'United States');
        insert into eba_sales_states (state, code, country) values ('South Dakota', 'SD', 'United States');
        insert into eba_sales_states (state, code, country) values ('Tennessee', 'TN', 'United States');
        insert into eba_sales_states (state, code, country) values ('Texas', 'TX', 'United States');
        insert into eba_sales_states (state, code, country) values ('Utah', 'UT', 'United States');
        insert into eba_sales_states (state, code, country) values ('Vermont', 'VT', 'United States');
        insert into eba_sales_states (state, code, country) values ('Virginia', 'VA', 'United States');
        insert into eba_sales_states (state, code, country) values ('Virgin Islands', 'VI', 'United States');
        insert into eba_sales_states (state, code, country) values ('Washington', 'WA', 'United States');
        insert into eba_sales_states (state, code, country) values ('West Virginia', 'WV', 'United States');
        insert into eba_sales_states (state, code, country) values ('Wisconsin', 'WI', 'United States');
        insert into eba_sales_states (state, code, country) values ('Wyoming', 'WY', 'United States');
 
        update eba_sales_states set state_region = 'North East' where code in ('CT','NH','VT','MA','NY','NJ','PN','ME','RI','MD','DC');
        update eba_sales_states set state_region = 'South East' where code in ('FL','GA','SC','NC','VA','TN','MI','AL');
        update eba_sales_states set state_region = 'Western' where code in ('CA','WA','OR','NM','UT','AZ');
 
        insert into eba_sales_states (state, code, country) values ('Alberta','AB', 'Canada');
        insert into eba_sales_states (state, code, country) values ('British Columbia','BC', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Manitoba','MB', 'Canada');
        insert into eba_sales_states (state, code, country) values ('New Brunswick','NB', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Newfoundland and Labrador','NL', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Northwest Territories','NT', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Nova Scotia','NS', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Nunavut','NU', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Ontario','ON', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Prince Edward Island','PE', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Quebec','QC', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Saskatchewan','SK', 'Canada');
        insert into eba_sales_states (state, code, country) values ('Yukon','YT', 'Canada');
 
        insert into eba_sales_states (state, code, country) values ('Aguascalientes','AG', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Baja California','BJ', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Baja California Sur','BS', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Campeche','CP', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Chiapas','CH', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Chihuahua','CI', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Coahuila','CU', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Colima','CL', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Distrito Federal','DF', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('MS Durango','DG', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Guanajuato','GJ', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Guerrero','GR', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Hidalgo','HG', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Jalisco','JA', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Mexico','EM', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Michoacan','MH', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Morelos','MR', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Nayarit','NA', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Nuevo Leon','NL', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Oaxaca','OA', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Puebla','PU', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Queretaro','QA', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Quintana Roo','QR', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Potosi','SL', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Sinaloa','SI', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Sonora','SO', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Tabasco','TA', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Tamaulipas','TM', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Tlaxcala','TL', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('V eracruz','VZ', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Yucatan','YC', 'Mexico');
        insert into eba_sales_states (state, code, country) values ('Zacatecas','ZT', 'Mexico');
 
        /* deal status codes */
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (1,1,'Product Presentation Performed',20,'At least one product presentation was performed'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (2,2,'Customer Identified',10,'A legitimate prospect has been identified, you have a contact'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (3,3,'Products Identified',30,'Customer has selected the products they are intersted in'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (4,4,'Opportunity Closed / Lost',0,'No customer interest at this point in time'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (5,5,'Payment Method Identified',40,'A contracting vehicle or some payment method has been idenfieid'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (6,6,'Price Proposal Made',50,'Customer has been given a price'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (7,7,'Customer Informally Agrees to Buy',60,'Customer has informally agreed to the price'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (8,8,'Customer Presented Terms',70,'Customer has been presented Terms and Conditions'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (9,9,'Legal Approval of Contract',80,'Legal Departments Approve Contract'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (10,10,'Customer Signs Contract',90,'Customer Signs Contract'); 
        insert into eba_sales_deal_status_codes (id,display_order,status_code,corresponding_prob_pct,code_description) values (11,11,'Payment Received',100,'Payment Received'); 
 
        /* salesrep roles */
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (1,'Sales Representative','Y'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (2,'Sales Consultant','N'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (3,'Legal','N'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (4,'Business Development','N'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (5,'Consulting Services Sales','N'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (6,'Education Services Sales','N'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (7,'Tele-Sales','Y'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (8,'Support','N'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (9,'Evangelist','N'); 
        insert into eba_sales_salesrep_roles (id,role_name,is_sales_rep) values (10,'Sales Manager','Y'); 
 
        /* lead status codes */
        insert into eba_sales_lead_status_codes (id,display_order,status_code) values (1,4,'Dead'); 
        insert into eba_sales_lead_status_codes (id,display_order,status_code) values (2,3,'Hot'); 
        insert into eba_sales_lead_status_codes (id,display_order,status_code) values (3,2,'Qualified'); 
        insert into eba_sales_lead_status_codes (id,display_order,status_code) values (4,1,'Unqualified'); 
        insert into eba_sales_lead_status_codes (id,display_order,status_code) values (5,5,'Converted to Opportunity'); 
 
        /* lead sources */
        insert into eba_sales_lead_sources (id,lead_source) values (1,'Internet'); 
        insert into eba_sales_lead_sources (id,lead_source) values (2,'Direct Mail'); 
        insert into eba_sales_lead_sources (id,lead_source) values (3,'Email'); 
        insert into eba_sales_lead_sources (id,lead_source) values (4,'Unknown'); 
 
        /* competitor threats */
        insert into eba_sales_competitor_threats (id,display_order, competitor_threat) values (1,1, 'Perceived Front Runner');
        insert into eba_sales_competitor_threats (id,display_order, competitor_threat) values (2,2, 'Strong and worthy advisory');
        insert into eba_sales_competitor_threats (id,display_order, competitor_threat) values (3,3, 'Moderate threat');
        insert into eba_sales_competitor_threats (id,display_order, competitor_threat) values (4,4, 'Low threat level');
        insert into eba_sales_competitor_threats (id,display_order, competitor_threat) values (5,5, 'Not a threat at this time');
 
        /* competitors */
        insert into eba_sales_competitors (id,competitor_name) values (1,'Competitor A');
        insert into eba_sales_competitors (id,competitor_name) values (2,'Competitor B');
        insert into eba_sales_competitors (id,competitor_name) values (3,'Competitor C');
        insert into eba_sales_competitors (id,competitor_name) values (4,'Competitor D');
        insert into eba_sales_competitors (id,competitor_name) values (5,'Competitor E');
        insert into eba_sales_competitors (id,competitor_name) values (6,'Competitor F');
        insert into eba_sales_competitors (id,competitor_name) values (7,'Competitor G');
 
        /* financial assessments */
        insert into eba_sales_fin_assessments (display_order, assessment_text) values (1, 'No Dollars at Stake, Customer Education');
        insert into eba_sales_fin_assessments (display_order, assessment_text) values (2, 'No Dollars at Stake, Defending Existing Products');
        insert into eba_sales_fin_assessments (display_order, assessment_text) values (3, 'New Dollars, Green Field Opportunity');
        insert into eba_sales_fin_assessments (display_order, assessment_text) values (4, 'New Dollars, Replacement Opportunity');
 
        /* status assessments */
        insert into eba_sales_status_assessments (id,display_order, assessment_text) values (1,1, 'In Process - Looking Bad');
        insert into eba_sales_status_assessments (id,display_order, assessment_text) values (2,2, 'In Process - Looking Good');
        insert into eba_sales_status_assessments (id,display_order, assessment_text) values (3,3, 'In Process - Looking Neutral');
        insert into eba_sales_status_assessments (id,display_order, assessment_text) values (4,4, 'Lost - Declared moving to competitor');
        insert into eba_sales_status_assessments (id,display_order, assessment_text) values (5,5, 'Lost - Staying with current vendor');
        insert into eba_sales_status_assessments (id,display_order, assessment_text) values (6,6, 'Staying with our product - Never a Threat');
        insert into eba_sales_status_assessments (id,display_order, assessment_text) values (7,7, 'Successful Defend Ongoing');
 
        /* risk assessments */
        insert into eba_sales_risk_assessments (display_order, assessment_text) values (1, 'High');
        insert into eba_sales_risk_assessments (display_order, assessment_text) values (2, 'Moderate');
        insert into eba_sales_risk_assessments (display_order, assessment_text) values (3, 'Low');
        insert into eba_sales_risk_assessments (display_order, assessment_text) values (4, 'Undetermined');
        insert into eba_sales_risk_assessments (display_order, assessment_text) values (5, 'No known risk');
 
        /* standings */
        insert into eba_sales_account_standing (display_order, standing_text) values (1, 'Exclusive to us');
        insert into eba_sales_account_standing (display_order, standing_text) values (2, 'Mostly Us');
        insert into eba_sales_account_standing (display_order, standing_text) values (3, 'Mixed');
        insert into eba_sales_account_standing (display_order, standing_text) values (4, 'Primarily competitors');
        insert into eba_sales_account_standing (display_order, standing_text) values (5, 'No account presence');
 
        /* industries */
        insert into eba_sales_industries (id, industry_name) values (1, 'Financial Services');
        insert into eba_sales_industries (id, industry_name) values (2, 'Aerospace');
        insert into eba_sales_industries (id, industry_name) values (3, 'Military');
        insert into eba_sales_industries (id, industry_name) values (4, 'Telco');
        insert into eba_sales_industries (id, industry_name) values (5, 'Power');
        insert into eba_sales_industries (id, industry_name) values (6, 'Retail');
        commit;
 
        /* app access levels */
        insert into eba_sales_access_levels (id, access_level) values (-99, 'No Access');
        insert into eba_sales_access_levels (id, access_level) values (0, 'Approval Pending');
        insert into eba_sales_access_levels (id, access_level) values (1, 'Reader');
        insert into eba_sales_access_levels (id, access_level) values (2, 'Contributor');
        insert into eba_sales_access_levels (id, access_level) values (3, 'Administrator');
 
        /* app preferences */
        insert into eba_sales_preferences (id, preference_name, preference_value) values (1, 'ACCESS_CONTROL_ENABLED', 'N');
        insert into eba_sales_preferences (id, preference_name, preference_value) values (2, 'ACCESS_CONTROL_SCOPE', 'ACL_ONLY');
        insert into eba_sales_preferences (id, preference_name, preference_value) values (3, 'USERNAME_FORMAT', 'EMAIL');
 
        /* Constraint error lookups */
        insert into eba_sales_error_lookup (constraint_name, message, language_code) values ('EBA_SALES_USERS_UK', 'Username must be unique.', 'en');
        insert into eba_sales_error_lookup (constraint_name, message, language_code) values ('EBA_SALES_CUST_TERR_FK','There are Accounts associated with this territory','en');
 
       /* product family lookups */
       insert into eba_sales_product_families (id, product_family, description) values (1, 'NAA','North America Applications (App Sales)');
       insert into eba_sales_product_families (id, product_family, description) values (2, 'NAS','North America Sales (Tech & Hardware Sales)');
       insert into eba_sales_product_families (id, product_family, description) values (3, 'GBU','Global Business Unit');
       /* product LOBs lookups */
       insert into eba_sales_product_lobs (id, name, description) values (1, 'NAA','North America Applications (App Sales)');
       insert into eba_sales_product_lobs (id, name, description) values (2, 'NAS','North America Sales (Tech & Hardware Sales)');
       insert into eba_sales_product_lobs (id, name, description) values (3, 'GBU','Global Business Unit');
       insert into eba_sales_product_lobs (id, name, description) values (4, 'OTHER','Other Business Units');
       /* Agreement Types */
       insert into EBA_SALES_AGREEMENT_TYPES (name, description) values ('ELA','End-User License Agreement');
       insert into EBA_SALES_AGREEMENT_TYPES (name, description) values ('ULA','Universal License Agreement');
 
    end load_codes; 
 
    procedure load_sample is 
    begin
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (1,'US Commercial East', 'United States Commercial'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (2,'US Fed', 'United States Federal Government'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (3,'US Commercial West','United States Commercial West'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (4,'US VAR','United States Value Added Resellers'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (5,'EMEA Commercial','Europe Middle East and Africa Commercial'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (6,'EMEA Govt','Europe Middle East and Africa Government'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (7,'LA Commercial','Latin America Commercial'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (8,'LA Government','Latin America Government'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (9,'APAC Commercial','Asia Pacific Commerical'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (10,'APAC Govt','Asia Pacific Government'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (11,'Mexico','Mexico Sales'); 
        Insert into EBA_SALES_TERRITORIES (ID,TERRITORY_NAME, TERRITORY_DESCRIPTION) values (12,'Canada','Candada Sales'); 
         
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (1,'Lexington Exports',3,'Y'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (2,'Madison Materials',1,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (3,'Connecticut Composites',1,'Y'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (4,'Department of Labor',2,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (5,'Asymmetrical Antibiotics Inc',3,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (6,'Seminal Semiconductor',3,'Y'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (7,'Aeronautical and Space Agency',2,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (8,'Army',12,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (9,'Department of Energy',10,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (10,'Department of the Interior',2,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (11,'Integration Magic',4,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (12,'Acme Department of State',1,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (13,'Department of State',2,'Y'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (14,'Acme Department of Corrections',1,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (15,'Department of Natural Resources',8,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (16,'State Department of Education',3,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (17,'Acme Department of Transportation',1,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (18,'State Department of Revenue',1,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (19,'Acme Department of Taxation',6,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (20,'Turbo Charged Migration Systems',3,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (21,'Malta Bold Design Studios Inc',3,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (22,'Understated Web Design of Boston',3,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (23,'Research and Development Council',6,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (24,'Employment and Social Affairs',6,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (25,'South East Asian Economic and Development Labs',10,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (26,'Mt Fuji Research Systems',9,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (27,'National Department of Beach Preservation',8,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (28,'Swiss Mountain Java Solutions',5,'Y'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (29,'Resource Planning and Conservation Inc',5,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (30,'Deep Cut Tier and Rim Services',9,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (31,'Grand Canyon Adventure Travel Services',3,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (32,'ACME Guardians',11,'N'); 
        insert into eba_sales_customers (id, customer_name, customer_territory_id, customer_is_key_account_yn) values (33,'J4HT Inc',12,'Y'); 
         
         
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (1,'Davidson','David','david.davidson@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (2,'Robertson','Robert','robert.robertson@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (3,'Albertson','Amy','amy.albertson@fastmail.com',2); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (4,'Summerson','Sam','sam.sommerson@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (5,'Dewy','Dunbarton','dewy.dunbarton@fastmail.com',3); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (6,'Samantha','Dundealski','dewy.dunbarton@fastmail.com',3); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (7,'Martha','May','martha.may@fastmail.com',3); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (8,'Marvin','Nimitz','marvin.nimitz@fastmail.com',3); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (9,'Raj','Gupta','raj.gupta@fastmail.com',3); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (10,'Sanjay','Sim','sanjay.sim@fastmail.com',3); 
         
         
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (11,'Sally','Simm','sally.simm@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (12,'Jing','Lu','jing.lu@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (13,'Cynthia','Cheng','cynthia.cheng@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (14,'Hasan','Patel','hasan.patel@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (15,'Roger','Nelson','roger.nelson@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (16,'Sam','Smith','sam.smith@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (17,'Peter','Gorski','peter.gorski@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (18,'Larry','Heart','larry.heart@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (19,'Chip','Chadworth','chip.chadworth@fastmail.com',1); 
        insert into eba_sales_SALESREPS (id,REP_LAST_NAME, REP_FIRST_NAME, REP_EMAIL, REP_ROLE) 
        values (20,'Sharon','Sweed','sharon.sweed@fastmail.com',1); 
         
        -- Products 
         
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (1,'Peregrine Enterprise Edition','software'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (2,'Peregrine Standard Edition','software'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (3,'Osprey Enterprise Edition','software'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (4,'System Sanity Check','consulting service'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (5,'Symmetric 1000','hardware'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (6,'Symmetric 2000','hardware'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (7,'Symmetric 2100','hardware'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (8,'Liquid Designer','software'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (9,'CRUD Code Generator','software'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (10,'SQL Statement Synthesizer','software'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (11,'HDRS Enterprise Edition','software'); 
        insert into eba_sales_PRODUCTS (id,product_name,product_description) values (12,'JGFW Standard Edition','software'); 
         
        -- Opportunities 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (1,1,1,'Enterprise Lic Deal',sysdate+60,12345,10,1); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (1,1,1, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (2,1,2, 5000); 
        insert into EBA_SALES_DEAL_COMPETITION (id, deal_id, COMPETITOR_THREAT_ID, competitor_id) values (1,1,2,1); 
              
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (2,2,1,'Marketing Dept Site Lic',sysdate+85,100542,10,1); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id,QUOTE_PRICE) values (3,2,1, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id,QUOTE_PRICE) values (4,2,2, 5000); 
        insert into EBA_SALES_DEAL_COMPETITION (id, deal_id, COMPETITOR_THREAT_ID, competitor_id) values (2,2,1,1); 
         
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (3,2,1,'Upgrade',sysdate+90,65432,10,1); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (5,3,5, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (6,3,6, 5000); 
        insert into EBA_SALES_DEAL_COMPETITION (id, deal_id, COMPETITOR_THREAT_ID, competitor_id) values (3,3,3,2); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (4,5,3,'Modernization Program',sysdate+90,212890,10,1); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (7,4,5, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (8,4,6, 5000); 
        insert into EBA_SALES_DEAL_COMPETITION (id, deal_id, COMPETITOR_THREAT_ID, competitor_id) values (4,4,4,4); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (5,5,3,'Refactoring of Application',sysdate-5,6145,100,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (9,5,5, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (10,5,6,5000); 
        insert into EBA_SALES_DEAL_COMPETITION (id, deal_id, COMPETITOR_THREAT_ID, competitor_id) values (5,5,5,5); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (6,5,1,'Special Project',sysdate-15,15250,100,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (11,6,1, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (12,6,2, 5000); 
        --insert into EBA_SALES_DEAL_COMPETITION (id, deal_id, COMPETITOR_THREAT_ID, competitor_id) values (6,6,1,1); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (7,2,2,'Network Installation 2',sysdate-90,7500,100,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (13,7,1, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (14,7,2, 5000); 
        --insert into EBA_SALES_DEAL_COMPETITION (id, deal_id, COMPETITOR_THREAT_ID, competitor_id) values (7,7,2,2); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (8,2,2,'Network Installation 1',sysdate-120,17500,100,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (15,8,3, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (16,8,2, 5000); 
        --insert into EBA_SALES_DEAL_COMPETITION (id, deal_id, COMPETITOR_THREAT_ID, competitor_id) values (8,8,3,3); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (9,2,2,'Network Installation 3',sysdate-10,7500,100,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (17,9,3, 5000); 
         
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (10,5,6,'Web HR Project',sysdate-30,12000,100,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (18,10,3, 50010); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (19,10,4, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (20,10,5, 50200); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (11,14,2,'Network Upgrade 1',sysdate-200,7200,100,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (21,11,6, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (22,11,7, 300); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (23,11,8, 5000); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (12,15,3,'Network Upgrade 2',sysdate-110,5500,100,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (24,12,7, 25000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (25,12,8, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (26,12,9, 5000); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (13,16,4,'Network Upgrade 3',sysdate-10,2500,50,11); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (27,13,1, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (28,13,8, 53000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (29,13,11, 4000); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (14,17,5,'Modernization Program',sysdate-10,25500,50,4); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (30,14,10, 5000); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (15,18,6,'Legacy System Migration Program',sysdate-4,13500,50,5); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (31,15,10, 5000); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (16,19,7,'Open Systems Web Design Project',sysdate-5,14580,50,5); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (32,16,8, 5000); 
         
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (17,20,8,'TPS Reporting Solution',sysdate-5,18500,50,5); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (33,17,4, 12000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (34,17,5, 12000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (35,17,6, 12000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (36,17,7, 12000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (37,17,8, 12000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (38,17,9, 12000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (39,17,10, 5000); 
             
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (18,20,9,'Bianual Upgrade',sysdate-8,10000,50,5); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (40,18,1, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (41,18,2, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (42,18,5, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (43,18,7, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (44,18,8, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (45,18,9, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (46,18,10, 5000); 
             
             
        insert into EBA_SALES_DEALS (id,customer_id,salesrep_id_01,deal_name,deal_close_date,deal_amount,DEAL_PROBABILITY,DEAL_STATUS_CODE_ID) 
        values (19,20,10,'Sales team mobile modernization program',sysdate-8,10000,50,5); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (50,19,1, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (51,19,2, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (52,19,3, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (53,19,7, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (54,19,8, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (55,19,9, 5000); 
        insert into EBA_SALES_DEAL_PRODUCTS (id,deal_id,product_id, QUOTE_PRICE) values (56,19,10, 5000); 
         
        insert into eba_sales_users (id, username, access_level_id, account_locked) values (1, 'SAMPLE_USER', -99, 'N');
         
        insert into eba_sales_comments (id, created_by, entity_type, deal_id, note) values  
          (1, 'SAMPLE_USER', 'OPPORTUNITY', 1, 'Called customer they seem very interested, got lead from a buddy whos knows someone who plays tennis with the customer.'); 
        insert into eba_sales_comments (id, created_by, entity_type, deal_id, note) values  
          (2, 'SAMPLE_USER', 'OPPORTUNITY', 2, 'Met someone on a flight who said they had an interest in our products.'); 
        insert into eba_sales_comments (id, created_by, entity_type, deal_id, note) values  
          (3, 'SAMPLE_USER', 'OPPORTUNITY', 3, 'Call to main switchboard indicates that Adrian of New Haven Ct wants to buy something'); 
         
        -- Leads 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (1,'Server',5,1,'someone at dept of obfuscation wants some servers, call Jenny at 867-5309',2,null); 
 
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (2,'Printer',5,1,'This account needs color printers, we should pay a sales call',3,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (3,'Software',5,1,'Expressed interest in a sales tracking application, Call Bill',4,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (4,'Software',15,1,'Likes easy of install and cloud design, could be ready to buy',4,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (5,'Software',18,2,'Very much into extensibility, and our open architecture may be exactly what they are looking for',2,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (6,'Software',16,2,'White board session at conference was very interesting, may be ready to take the leap',3,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (7,'Software',17,1,'Cold called, and appeared to be a great opportunity, are are exactly the type of customer that likes our products',4,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (8,'Software',17,1,'Not sure if they have any money in their budget but would very much like to see a demo',4,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (9,'Software',19,2,'Running 20 year old COBOL system and want to modernize, need to talk to sales rep and technical contact.  Highligh Java and open source.',2,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (10,'Software',20,1,'Want to extend their ERP system, need interactive reporting solution for adhoc report requests.',2,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (11,'Software',20,3,'Plan to extend their existing CRM system using custom software, very interested in web services both REST and SOAP.',3,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (12,'Software',21,2,'Attended our demo, didn''t say a word but looked real interested, and took huge amount of notes.  I think this person is a competitor or very interested',4,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (13,'Software',null,null,'Jim Southworth signed up for online web demo for our new web tool',4,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (14,'Software',null,null,'Frank Detrick signed up for online web demo for our new web tool',4,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (15,'Software',null,null,'Jill Turner signed up for online web demo for our new web tool',4,null); 
         
        insert into eba_sales_leads (id,lead_name_01,account_id,lead_source_id,lead_details,lead_status_id,opportunity_id) values  
        (16,'Software',null,null,'Naresh Nara signed up for online web demo for our new web tool', 4,null); 
         
    end load_sample; 
     
    procedure remove_sample is 
    begin 
        delete from eba_sales_comments where id <= 20; 
        delete from eba_sales_deal_products where id <= 100; 
        delete from eba_sales_deal_competition where id < 100; 
        delete from eba_sales_deals where id < 100; 
        delete from eba_sales_products where id < 100; 
        delete from eba_sales_salesreps where id < 100; 
        delete from eba_sales_customers where id < 100; 
        delete from eba_sales_leads where id < 100; 
        delete from eba_sales_users where id = 1;
        delete from eba_sales_territories where id < 20;
    end remove_sample; 
 
end eba_sales_data;
/

CREATE OR REPLACE EDITIONABLE PACKAGE "EBA_SALES_FW" as
    function conv_txt_html (
        p_txt_message in varchar2 )
        return varchar2;
    function conv_urls_links (
        p_string in varchar2 )
        return varchar2;
    function tags_cleaner (
        p_tags  in varchar2,
        p_case  in varchar2 default 'U' )
        return varchar2;
    procedure tag_sync (
        p_new_tags          in varchar2,
        p_old_tags          in varchar2,
        p_content_type      in varchar2,
        p_content_id        in number );
    function selective_escape (
        p_text  in varchar2,
        p_tags  in varchar2 default '<h2>,</h2>,<p>,</p>,<b>,</b>,<li>,</li>,<ul>,</ul>,<br />,<i>,</i>,<h3>,</h3>' )
        return varchar2;
    function get_preference_value (
        p_preference_name in varchar2 )
        return varchar2;
    procedure set_preference_value (
        p_preference_name  in varchar2, 
        p_preference_value in varchar2 );
    function compress_int (
        n in integer )
        return varchar2;
end eba_sales_fw;
/


CREATE OR REPLACE EDITIONABLE PACKAGE BODY "EBA_SALES_FW" as
    function conv_txt_html (
        p_txt_message in varchar2 )
        return varchar2
    is
        l_html_message   varchar2(32767) default p_txt_message;
        l_temp_url varchar2(32767) := null;
        l_length number;
    begin
        l_html_message := replace(l_html_message, chr(10), '<br />');
        l_html_message := replace(l_html_message, chr(13), null);
        return l_html_message;
    end conv_txt_html;
    function conv_urls_links (
        p_string in varchar2 )
        return varchar2
    is
        l_string   varchar2(32767) default p_string;
        l_endofUrl varchar2(4000) default chr(10) || chr(13) || chr(9) || ' )<>';
        l_url         varchar2(4000);
        l_current_pos number := 1;
        n             number := 1;
        m             number := 1;
        p             number := 1;
    begin
        l_string := p_string || ' ';
        for i in 1 .. 1000 loop
            n := instr( lower(l_string), 'http://', l_current_pos );
            m := instr( lower(l_string), 'https://', l_current_pos );
            p := instr( lower(l_string), 'ftp://', l_current_pos   );
            -- set n to position of first link
            if m > 0 and (n = 0 or m < n) and (p = 0 or m < p) then
               n := m;
            elsif p > 0 and (n = 0 or p < n) then
               n := p;
            end if;
            exit when n = 0 or length(l_string) > 32000;
            for j in 0 .. length( l_string ) - n loop
                if ( instr( l_endofUrl, substr( l_string, n+j, 1 ) ) > 0 ) then
                   l_url := rtrim( substr( l_string, n, j ), '.'||chr(32)||chr(10) );
                   l_url := '<a href="' || l_url || '">' || l_url || '</a>';
                   l_string := substr( l_string, 1, n-1 ) || l_url || substr( l_string, n+j );
                   l_current_pos := n + length(l_url);
                   exit;
                end if;
            end loop;
        end loop;
        return l_string;
    end conv_urls_links;
    function tags_cleaner (
        p_tags  in varchar2,
        p_case  in varchar2 default 'U' )
        return varchar2
    is
        type tags is table of varchar2(255) index by varchar2(255);
        l_tags_a        tags;
        l_tag           varchar2(255);
        l_tags          apex_application_global.vc_arr2;
        l_tags_string   varchar2(32767);
        i               integer;
    begin
        l_tags := apex_util.string_to_table(p_tags,',');
        for i in 1..l_tags.count loop
            --remove all whitespace, including tabs, spaces, line feeds and carraige returns with a single space
            l_tag := substr(trim(regexp_replace(l_tags(i),'[[:space:]]{1,}',' ')),1,255);
            if l_tag is not null and l_tag != ' ' then
                if p_case = 'U' then
                    l_tag := upper(l_tag);
                elsif p_case = 'L' then
                    l_tag := lower(l_tag);
                end if;
                --add it to the associative array, if it is a duplicate, it will just be replaced
                l_tags_a(l_tag) := l_tag;
            end if;
        end loop;
        l_tag := null;
        l_tag := l_tags_a.first;
        while l_tag is not null loop
            l_tags_string := l_tags_string||l_tag;
            if l_tag != l_tags_a.last then
                l_tags_string := l_tags_string || ', ';
            end if;
            l_tag := l_tags_a.next(l_tag);
        end loop;
        return substr(l_tags_string, 1, 4000);
    end tags_cleaner;
    procedure tag_sync (
        p_new_tags          in varchar2,
        p_old_tags          in varchar2,
        p_content_type      in varchar2,
        p_content_id        in number )
    as
        type tags is table of varchar2(255) index by varchar2(255);
        l_new_tags_a    tags;
        l_old_tags_a    tags;
        l_new_tags      apex_application_global.vc_arr2;
        l_old_tags      apex_application_global.vc_arr2;
        l_merge_tags    apex_application_global.vc_arr2;
        l_dummy_tag     varchar2(255);
        i               integer;
    begin
        l_old_tags := apex_util.string_to_table(p_old_tags,', ');
        l_new_tags := apex_util.string_to_table(p_new_tags,', ');
        if l_old_tags.count > 0 then --do inserts and deletes
            --build the associative arrays
            for i in 1..l_old_tags.count loop
                l_old_tags_a(l_old_tags(i)) := l_old_tags(i);
            end loop;
            for i in 1..l_new_tags.count loop
                l_new_tags_a(l_new_tags(i)) := l_new_tags(i);
            end loop;
            --do the inserts
            for i in 1..l_new_tags.count loop
                begin
                    l_dummy_tag := l_old_tags_a(l_new_tags(i));
                exception when no_data_found then
                    insert into eba_sales_tags (tag, content_id, content_type )
                    values (l_new_tags(i), p_content_id, p_content_type );
                    l_merge_tags(l_merge_tags.count + 1) := l_new_tags(i);
                end;
            end loop;
            --do the deletes
            for i in 1..l_old_tags.count loop
                begin
                    l_dummy_tag := l_new_tags_a(l_old_tags(i));
                exception when no_data_found then
                    delete from eba_sales_tags where content_id = p_content_id and tag = l_old_tags(i);
                    l_merge_tags(l_merge_tags.count + 1) := l_old_tags(i);
                end;
            end loop;
        else --just do inserts
            for i in 1..l_new_tags.count loop
                insert into eba_sales_tags (tag, content_id, content_type )
                values (l_new_tags(i), p_content_id, p_content_type );
                l_merge_tags(l_merge_tags.count + 1) := l_new_tags(i);
            end loop;
        end if;
        for i in 1..l_merge_tags.count loop
            merge into eba_sales_tags_type_sum s
            using (select count(*) tag_count
                     from eba_sales_tags
                    where tag = l_merge_tags(i) and content_type = p_content_type ) t
            on (s.tag = l_merge_tags(i) and s.content_type = p_content_type )
            when not matched then insert (tag, content_type, tag_count)
                                  values (l_merge_tags(i), p_content_type, t.tag_count)
            when matched then update set s.tag_count = t.tag_count;
            merge into eba_sales_tags_sum s
            using (select sum(tag_count) tag_count
                     from eba_sales_tags_type_sum
                    where tag = l_merge_tags(i) ) t
            on (s.tag = l_merge_tags(i) )
            when not matched then insert (tag, tag_count)
                                  values (l_merge_tags(i), t.tag_count)
            when matched then update set s.tag_count = t.tag_count;
        end loop;
    end tag_sync;
    function selective_escape (
        p_text  in varchar2,
        p_tags  in varchar2 default '<h2>,</h2>,<p>,</p>,<b>,</b>,<li>,</li>,<ul>,</ul>,<br />,<i>,</i>,<h3>,</h3>'
        ) return varchar2
    is
        t apex_application_global.vc_arr2;
        x varchar2(32767) := p_text;
    begin
        t := apex_util.string_to_table(p_tags, ',');
        for i in 1..t.count loop
            x := replace(x,t(i),'Aa'||i||'aA');
        end loop;
        x := apex_escape.html(x);
        for i in 1..t.count loop
            x := replace(x,'Aa'||i||'aA',t(i));
        end loop;
        return x;
    end selective_escape;
    function get_preference_value (
        p_preference_name varchar2 )
        return varchar2
    is
        l_preference_value varchar2(255);
    begin
        select preference_value
            into l_preference_value
        from eba_sales_preferences
        where preference_name = p_preference_name;
        return l_preference_value;
    exception
        when no_data_found then
            return 'Preference does not exist';
    end get_preference_value;
    procedure set_preference_value (
        p_preference_name  varchar2, 
        p_preference_value varchar2 )
    is
    begin
        merge into eba_sales_preferences dest
        using ( select upper(p_preference_name) preference_name,
                    p_preference_value preference_value
                from dual ) src
        on ( upper(dest.preference_name) = src.preference_name )
        when matched then
            update set dest.preference_value = src.preference_value
        when not matched then
            insert (dest.preference_name, dest.preference_value)
            values (src.preference_name, src.preference_value);
    end set_preference_value;
    function compress_int (
        n in integer )
        return varchar2
    as
        ret varchar2(30);
        quotient integer;
        remainder integer;
        digit char(1);
    begin
        ret := '';
        quotient := n;
        while quotient > 0
        loop
            remainder := mod(quotient, 10 + 26);
            quotient := floor(quotient  / (10 + 26));
            if remainder < 26 then
                digit := chr(ascii('A') + remainder);
            else
                digit := chr(ascii('0') + remainder - 26);
            end if;
            ret := digit || ret;
        end loop ;
        if length(ret) < 5 then
            ret := lpad(ret, 4, 'A');
        end if ;
        return ret;
    end compress_int;
end eba_sales_fw;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE "EBA_SALES_TZ_INIT" 
as
  c integer := 0;
  l_app_user varchar2(255);
begin
l_app_user := nvl(v('APP_USER'),user);
for c1 in (
   select TIMEZONE_PREFERENCE
   from   eba_sales_tz_pref
   where  USERID = l_app_user) loop
   --
   if c1.TIMEZONE_PREFERENCE is not null then
       c := c + 1;
       APEX_UTIL.SET_SESSION_TIME_ZONE (P_TIME_ZONE => c1.TIMEZONE_PREFERENCE ); 
   end if;
   exit;
end loop;
if c = 0 then
    if apex_util.get_session_time_zone is null then
        APEX_UTIL.SET_SESSION_TIME_ZONE (P_TIME_ZONE => 'US/Pacific'); 
    end if;
end if;
end;
/

 CREATE SEQUENCE  "EBA_SALES_ROWKEY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2641 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3641 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_SEQUENCE2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_ACCOUNT_TYPE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_PROFILE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_USER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_LEADS_EVENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_UNIT_MEASURE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_ESTIMATE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

 CREATE SEQUENCE  "EBA_SALES_ESTIMATE_PRODUCTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  GLOBAL ;

CREATE OR REPLACE EDITIONABLE TRIGGER "BD_EBA_SALES_COMPETITORS" 
    before delete on eba_sales_competitors
    for each row
begin
    eba_sales_fw.tag_sync(
        p_new_tags      => null,
        p_old_tags      => :old.tags,
        p_content_type  => 'COMPETITOR',
        p_content_id    => :old.id );
end;

/


ALTER TRIGGER "BD_EBA_SALES_COMPETITORS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BD_EBA_SALES_CUST" 
  before delete on eba_sales_customers
  for each row
begin
  eba_sales_fw.tag_sync(
    p_new_tags     => null,
    p_old_tags     => :old.tags,
    p_content_type => 'ACCOUNT',
    p_content_id   => :old.id
  );
end;

/


ALTER TRIGGER "BD_EBA_SALES_CUST" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BD_EBA_SALES_CUST_CONTACTS" 
  before delete on eba_sales_customer_contacts
  for each row
begin
  eba_sales_fw.tag_sync(
    p_new_tags     => null,
    p_old_tags     => :old.tags,
    p_content_type => 'CONTACT',
    p_content_id   => :old.id
  );
end;

/


ALTER TRIGGER "BD_EBA_SALES_CUST_CONTACTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BD_EBA_SALES_DEALS" 
    before delete on eba_sales_deals
    for each row
begin
    delete from EBA_SALES_DEAL_products where deal_id = :new.id;
    eba_sales_fw.tag_sync(
        p_new_tags      => null,
        p_old_tags      => :old.tags,
        p_content_type  => 'DEAL',
        p_content_id    => :old.id );
end;

/


ALTER TRIGGER "BD_EBA_SALES_DEALS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BD_EBA_SALES_LEADS" 
  before delete on eba_sales_leads
  for each row
begin
  eba_sales_fw.tag_sync(
    p_new_tags     => null,
    p_old_tags     => :old.tags,
    p_content_type => 'LEAD',
    p_content_id   => :old.id
  );
end;

/


ALTER TRIGGER "BD_EBA_SALES_LEADS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BD_EBA_SALES_PRODUCTS" 
  before delete on eba_sales_products
  for each row
begin
  eba_sales_fw.tag_sync(
    p_new_tags     => null,
    p_old_tags     => :old.tags,
    p_content_type => 'PRODUCT',
    p_content_id   => :old.id
  );
end;

/


ALTER TRIGGER "BD_EBA_SALES_PRODUCTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BD_EBA_SALES_TERR" 
  before delete on eba_sales_territories
  for each row
begin
  eba_sales_fw.tag_sync(
    p_new_tags     => null,
    p_old_tags     => :old.tags,
    p_content_type => 'TERRITORY',
    p_content_id   => :old.id
  );
end;

/


ALTER TRIGGER "BD_EBA_SALES_TERR" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BD_EBA_SALES_UNIT_MEASURE" 
  before delete on EBA_SALES_UNIT_MEASURE
  for each row
begin
  eba_sales_fw.tag_sync(
    p_new_tags     => null,
    p_old_tags     => :old.tags,
    p_content_type => 'MEASURE',
    p_content_id   => :old.id
  );
end;

/


ALTER TRIGGER "BD_EBA_SALES_UNIT_MEASURE" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_EBA_SALES_ACT_COMPET" 
   before insert or update on eba_sales_act_competition
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_EBA_SALES_ACT_COMPET" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_EBA_SALES_DEAL_COMPET" 
   before insert or update on eba_sales_deal_competition
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_EBA_SALES_DEAL_COMPET" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_ACCOUNT_STANDING" 
   before insert or update on eba_sales_account_standing
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_ACCOUNT_STANDING" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_COMMENTS" before insert or update on "EBA_SALES_COMMENTS"
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_COMMENTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_COMPETITORS" 
   before insert or update on eba_sales_competitors
   for each row
   begin
    if :new.tags is not null then
        :new.tags := eba_sales_fw.tags_cleaner(:new.tags);
    end if;
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
    eba_sales_fw.tag_sync(
        p_new_tags      => :new.tags,
        p_old_tags      => :old.tags,
        p_content_type  => 'COMPETITOR',
        p_content_id    => :new.id );
end;

/


ALTER TRIGGER "BIU_EBA_SALES_COMPETITORS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_COMP_THREATS" 
   before insert or update on eba_sales_competitor_threats
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_COMP_THREATS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_COUNTRIES" 
before insert or update on eba_sales_countries
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_COUNTRIES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_CURRENCIES" 
before insert or update on EBA_SALES_CURRENCIES 
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
    :new.CURRENCY_CODE := upper(:new.CURRENCY_CODE);
end;

/


ALTER TRIGGER "BIU_EBA_SALES_CURRENCIES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_CUST_CONTACTS" 
  before insert or update on eba_sales_customer_contacts
  for each row
begin
  if inserting 
  then
    if :new.id is null 
    then
      :new.id := to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
    end if;
    :new.row_version_number := 1;
    :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
    :new.created_by := nvl(apex_application.g_user, user);
    :new.created := current_timestamp;
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
  elsif updating 
  then
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
    :new.row_version_number := nvl(:old.row_version_number, 1) + 1;
  end if;
  if :new.tags is not null 
  then
    :new.tags := eba_sales_fw.tags_cleaner(:new.tags);
  end if;
  eba_sales_fw.tag_sync(
    p_new_tags     => :new.tags,
    p_old_tags     => :old.tags,
    p_content_type => 'CONTACT',
    p_content_id   => :new.id
  );
end;

/


ALTER TRIGGER "BIU_EBA_SALES_CUST_CONTACTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_AGREEMENTS" 
   before insert or update on EBA_SALES_AGREEMENTS
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_AGREEMENTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_AGREEMENT_TYPES" 
   before insert or update on EBA_SALES_AGREEMENT_TYPES
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_AGREEMENT_TYPES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_CUST_AGRMNT_MAP" 
   before insert or update on EBA_SALES_CUST_AGRMNT_MAP
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_CUST_AGRMNT_MAP" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_CUST" 
  before insert or update on eba_sales_customers
  for each row
begin
  if inserting 
  then
    if :new.id is null 
    then
      :new.id := to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
    end if;
    :new.row_version_number := 1;
    :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
    :new.created_by := nvl(apex_application.g_user, user);
    :new.created := current_timestamp;
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
  elsif updating 
  then
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
    :new.row_version_number := nvl(:old.row_version_number, 1) + 1;
  end if;
  if :new.tags is not null 
  then
    :new.tags := eba_sales_fw.tags_cleaner(:new.tags);
  end if;
  eba_sales_fw.tag_sync(
    p_new_tags     => :new.tags,
    p_old_tags     => :old.tags,
    p_content_type => 'ACCOUNT',
    p_content_id   => :new.id
  );
end;

/


ALTER TRIGGER "BIU_EBA_SALES_CUST" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_CUSTOMERS_LOCS" 
before insert or update on eba_sales_customer_locations
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_CUSTOMERS_LOCS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_FIN_ASSESSMENTS" 
   before insert or update on eba_sales_fin_assessments
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_FIN_ASSESSMENTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_CUST_SPT_AMT_MAP" 
   before insert or update on EBA_SALES_CUST_SPT_AMT_MAP
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_CUST_SPT_AMT_MAP" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_DEALS" 
before insert or update on EBA_SALES_DEALS
    for each row
declare
    ov varchar2(4000);
    nv varchar2(4000);
begin
    if :new.tags is not null then
        :new.tags := eba_sales_fw.tags_cleaner(:new.tags);
    end if;
    if :new.deal_close_date is null then
       :new.deal_close_date := add_months(sysdate,2);
    end if;
    for c1 in (select period_name from eba_sales_sales_periods where :new.DEAL_CLOSE_DATE between first_day and last_day) loop
        :new.qtr := c1.period_name;
    end loop;
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
    if inserting and :new.DEAL_STATUS_CODE_ID is not null then
       if :new.deal_probability is null then
          for c1 in (select corresponding_prob_pct from EBA_SALES_DEAL_STATUS_CODES where id=:new.DEAL_STATUS_CODE_ID) loop
              :new.deal_probability := c1.corresponding_prob_pct;
          end loop;
       end if;
    elsif updating and (nvl(:new.DEAL_STATUS_CODE_ID,3.1) != nvl(:old.DEAL_STATUS_CODE_ID,3.1) or :new.deal_probability is null ) then
        if :new.deal_probability is null then
           for c1 in (select corresponding_prob_pct from EBA_SALES_DEAL_STATUS_CODES where id=:new.DEAL_STATUS_CODE_ID) loop
               :new.deal_probability := c1.corresponding_prob_pct;
           end loop;
        end if;
    end if;
    --
    -- history
    --
    if updating and nvl(:old.TAGS,'x0') !=  nvl(:new.TAGS,'x0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('tags'),:old.TAGS,:new.TAGS);
    end if;
    --
    if updating and nvl(:old.DEAL_CURRENCY,'x0') !=  nvl(:new.DEAL_CURRENCY,'x0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('CURRENCY'),:old.DEAL_CURRENCY,:new.DEAL_CURRENCY);
    end if;
    --
    if updating and nvl(:old.DEAL_NAME,'x0') !=  nvl(:new.DEAL_NAME,'x0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('opportunity_name'),:old.DEAL_NAME,:new.DEAL_NAME);
    end if;
    --
    if updating and nvl(:old.STRATEGY,'x0') !=  nvl(:new.STRATEGY,'x0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('STRATEGY'),:old.STRATEGY,:new.STRATEGY);
    end if;
    --
    if updating and nvl(:old.DEAL_SUMMARY,'x0') !=  nvl(:new.DEAL_SUMMARY,'x0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('summary'),:old.DEAL_SUMMARY,:new.DEAL_SUMMARY);
    end if;
    --
    if updating and nvl(:old.NATIONAL_TOP_25_YN,'x0') !=  nvl(:new.NATIONAL_TOP_25_YN,'x0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('NATIONAL_TOP_25'),:old.NATIONAL_TOP_25_YN,:new.NATIONAL_TOP_25_YN);
    end if;
    --
    if updating and nvl(:old.PARTNER,'x0') !=  nvl(:new.PARTNER,'x0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('PARTNER'),:old.PARTNER,:new.PARTNER);
    end if;
    --
    if updating and nvl(:old.QTR,'0') !=  nvl(:new.QTR,'0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('QTR'),:old.QTR,:new.QTR);
    end if;
    --
    if updating and nvl(:old.PRO_RE_ACTIVE,'0') !=  nvl(:new.PRO_RE_ACTIVE,'0') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('PRO_RE_ACTIVE'),:old.PRO_RE_ACTIVE,:new.PRO_RE_ACTIVE);
    end if;
    --
    -- date history
    --
    if updating and to_char(:old.DEAL_CLOSE_DATE,'DD-MM-YYYY') !=  to_char(:new.DEAL_CLOSE_DATE,'DD-MM-YYYY') then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('close_date'),to_char(:old.DEAL_CLOSE_DATE,'DD-MM-YYYY'),to_char(:new.DEAL_CLOSE_DATE,'DD-MM-YYYY'));
    end if;
    --
    -- numeric history
    --
    if updating and nvl(:old.DEAL_PROBABILITY,0) !=  nvl(:new.DEAL_PROBABILITY,0) then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('probability'),:old.DEAL_PROBABILITY,:new.DEAL_PROBABILITY);
    end if;
    --
    if updating and nvl(:old.DEAL_AMOUNT,0) !=  nvl(:new.DEAL_AMOUNT,0) then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('amount'),:old.DEAL_AMOUNT,:new.DEAL_AMOUNT);
    end if;
    --
    if updating and nvl(:old.DEAL_LICENSE,0) !=  nvl(:new.DEAL_LICENSE,0) then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('license'),:old.DEAL_LICENSE,:new.DEAL_LICENSE);
    end if;
    --
    if updating and nvl(:old.DEAL_SUPPORT,0) !=  nvl(:new.DEAL_SUPPORT,0) then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('support'),:old.DEAL_SUPPORT,:new.DEAL_SUPPORT);
    end if;
    --
    if updating and nvl(:old.DEAL_EDUCATION,0) !=  nvl(:new.DEAL_EDUCATION,0) then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('education'),:old.DEAL_EDUCATION,:new.DEAL_EDUCATION);
    end if;
    --
    if updating and nvl(:old.DEAL_CONSULTING,0) !=  nvl(:new.DEAL_CONSULTING,0) then
          insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('consulting'),:old.DEAL_CONSULTING,:new.DEAL_CONSULTING);
    end if;
    --
    if updating and nvl(:old.DEAL_STATUS_CODE_ID,0) != nvl(:new.DEAL_STATUS_CODE_ID,0) then
      ov := null; nv := null;
      for c1 in (select STATUS_CODE from EBA_SALES_LEAD_STATUS_CODES c where c.id = :old.DEAL_STATUS_CODE_ID) loop
          ov := c1.STATUS_CODE;
      end loop;
      for c1 in (select STATUS_CODE from EBA_SALES_LEAD_STATUS_CODES c where c.id = :new.DEAL_STATUS_CODE_ID) loop
          nv := c1.STATUS_CODE;
      end loop;   
      insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('status code'),ov,nv);
    end if;
    --
    if updating and nvl(:old.CUSTOMER_ID,0) != nvl(:new.CUSTOMER_ID,0) then
      ov := null; nv := null;
      for c1 in (select CUSTOMER_NAME from EBA_SALES_CUSTOMERS c where c.id = :old.CUSTOMER_ID) loop
          ov := c1.CUSTOMER_NAME;
      end loop;
      for c1 in (select CUSTOMER_NAME from EBA_SALES_CUSTOMERS c where c.id = :new.CUSTOMER_ID) loop
          nv := c1.CUSTOMER_NAME;
      end loop;   
      insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('account'),ov,nv);
    end if;
    --
    if updating and nvl(:old.SALESREP_ID_01,0) != nvl(:new.SALESREP_ID_01,0) then
      ov := null; nv := null;
      for c1 in (select REP_EBA_SALES_USERNAME,REP_EMAIL,REP_LAST_NAME,REP_FIRST_NAME from EBA_SALES_SALESREPS c where c.id = :old.SALESREP_ID_01) loop
          ov := nvl(nvl(c1.REP_EMAIL,c1.REP_FIRST_NAME||' '||c1.REP_LAST_NAME),c1.REP_EBA_SALES_USERNAME);
      end loop;
      for c1 in (select REP_EBA_SALES_USERNAME,REP_EMAIL,REP_LAST_NAME,REP_FIRST_NAME from EBA_SALES_SALESREPS c where c.id = :new.SALESREP_ID_01) loop
          nv := nvl(nvl(c1.REP_EMAIL,c1.REP_FIRST_NAME||' '||c1.REP_LAST_NAME),c1.REP_EBA_SALES_USERNAME);
      end loop;   
      insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('SALESREP_01'),ov,nv);
    end if;
    --
    if updating and nvl(:old.FINANCIAL_ASSESSMENT_ID,0) != nvl(:new.FINANCIAL_ASSESSMENT_ID,0) then
      ov := null; nv := null;
      for c1 in (select ASSESSMENT_TEXT from EBA_SALES_FIN_ASSESSMENTS c where c.id = :old.FINANCIAL_ASSESSMENT_ID) loop
          ov := c1.ASSESSMENT_TEXT;
      end loop;
      for c1 in (select ASSESSMENT_TEXT from EBA_SALES_FIN_ASSESSMENTS c where c.id = :new.FINANCIAL_ASSESSMENT_ID) loop
          nv := c1.ASSESSMENT_TEXT;
      end loop;   
      insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('financial_assessment'),ov,nv);
    end if;
    --
    if updating and nvl(:old.STATUS_ASSESSMENT_ID,0) != nvl(:new.STATUS_ASSESSMENT_ID,0) then
      ov := null; nv := null;
      for c1 in (select ASSESSMENT_TEXT from EBA_SALES_STATUS_ASSESSMENTS c where c.id = :old.STATUS_ASSESSMENT_ID) loop
          ov := c1.ASSESSMENT_TEXT;
      end loop;
      for c1 in (select ASSESSMENT_TEXT from EBA_SALES_STATUS_ASSESSMENTS c where c.id = :new.STATUS_ASSESSMENT_ID) loop
          nv := c1.ASSESSMENT_TEXT;
      end loop;   
      insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('status_assessment'),ov,nv);
    end if;
    --
    if updating and nvl(:old.RISK_ASSESSMENT_ID,0) != nvl(:new.RISK_ASSESSMENT_ID,0) then
      ov := null; nv := null;
      for c1 in (select ASSESSMENT_TEXT from EBA_SALES_RISK_ASSESSMENTS c where c.id = :old.RISK_ASSESSMENT_ID) loop
          ov := c1.ASSESSMENT_TEXT;
      end loop;
      for c1 in (select ASSESSMENT_TEXT from EBA_SALES_RISK_ASSESSMENTS c where c.id = :new.RISK_ASSESSMENT_ID) loop
          nv := c1.ASSESSMENT_TEXT;
      end loop;   
      insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('risk_assessment'),ov,nv);
    end if;
    --
    if updating and nvl(:old.ACCOUNT_STANDING_ID,0) != nvl(:new.ACCOUNT_STANDING_ID,0) then
      ov := null; nv := null;
      for c1 in (select STANDING_TEXT from EBA_SALES_ACCOUNT_STANDING c where c.id = :old.ACCOUNT_STANDING_ID) loop
          ov := c1.STANDING_TEXT;
      end loop;
      for c1 in (select STANDING_TEXT from EBA_SALES_ACCOUNT_STANDING c where c.id = :new.ACCOUNT_STANDING_ID) loop
          nv := c1.STANDING_TEXT;
      end loop;   
      insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('account_standing'),ov,nv);
    end if;
    --
    if updating and nvl(:old.SVP_ID,0) != nvl(:new.SVP_ID,0) then
      ov := null; nv := null;
      for c1 in (select SVP_NAME from EBA_SALES_SVPS c where c.id = :old.SVP_ID) loop
          ov := c1.SVP_NAME;
      end loop;
      for c1 in (select SVP_NAME from EBA_SALES_SVPS c where c.id = :new.SVP_ID) loop
          nv := c1.SVP_NAME;
      end loop;   
      insert into EBA_SALES_HISTORY (deal_rowkey, deal_id, column_name, old_value, new_value) values
          (:new.row_key, :new.id, upper('SVP'),ov,nv);
    end if;
    --
    -- tags
    --
    eba_sales_fw.tag_sync(
        p_new_tags      => :new.tags,
        p_old_tags      => :old.tags,
        p_content_type  => 'DEAL',
        p_content_id    => :new.id );
end;

/


ALTER TRIGGER "BIU_EBA_SALES_DEALS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_DEAL_PRODUCTS" 
before insert or update on EBA_SALES_DEAL_products
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    for c1 in (select period_name from eba_sales_sales_periods where :new.close_date between first_day and last_day)
    loop 
        :new.qtr := c1.period_name; 
    end loop;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_DEAL_PRODUCTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_DEAL_STAGES" 
   before insert or update on EBA_SALES_deal_stages
   for each row
begin
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.created := current_timestamp;
       :new.created_by := nvl(wwv_flow.g_user,user);
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := nvl(:old.row_version_number,1) + 1;
   end if;
   if inserting or updating then
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
   end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_DEAL_STAGES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_DEAL_STAT_CODES" 
before insert or update on EBA_SALES_DEAL_status_codes
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_DEAL_STAT_CODES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_DEAL_TEAM" 
   before insert or update on eba_sales_deal_team
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_DEAL_TEAM" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_FILES" 
   before insert or update on EBA_SALES_files
   for each row
begin
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.created := current_timestamp;
       :new.created_by := nvl(wwv_flow.g_user,user);
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := nvl(:old.row_version_number,1) + 1;
   end if;
   if inserting or updating then
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
   end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_FILES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_HISTORY" 
   before insert or update on EBA_SALES_history
   for each row
begin
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.change_date := current_timestamp;
       :new.changed_by := nvl(wwv_flow.g_user,user);
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := :new.row_version_number + 1;
   end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_HISTORY" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_INDUSTRIES" 
before insert or update on eba_sales_industries
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_INDUSTRIES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_LEADS" 
  before insert or update on eba_sales_leads
  for each row
begin
  if inserting 
  then
    if :new.id is null 
    then
      :new.id := to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
    end if;
    :new.row_version_number := 1;
    :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
    :new.created_by := nvl(apex_application.g_user, user);
    :new.created := current_timestamp;
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
  elsif updating 
  then
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
    :new.row_version_number := nvl(:old.row_version_number, 1) + 1;
  end if;
  if :new.tags is not null 
  then
    :new.tags := eba_sales_fw.tags_cleaner(:new.tags);
  end if;
  eba_sales_fw.tag_sync(
    p_new_tags     => :new.tags,
    p_old_tags     => :old.tags,
    p_content_type => 'LEAD',
    p_content_id   => :new.id
  );
end;

/


ALTER TRIGGER "BIU_EBA_SALES_LEADS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_LEAD_SOURCES" 
   before insert or update on eba_sales_lead_sources
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_LEAD_SOURCES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_LEAD_ST_CDS" 
before insert or update on eba_sales_lead_status_codes
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_LEAD_ST_CDS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_LINKS" 
   before insert or update on EBA_SALES_links
   for each row
begin
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.created := current_timestamp;
       :new.created_by := nvl(wwv_flow.g_user,user);
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := nvl(:old.row_version_number,1) + 1;
   end if;
   if inserting or updating then
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
   end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_LINKS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_PRODUCTS" 
  before insert or update on eba_sales_products
  for each row
begin
  if inserting 
  then
    if :new.id is null 
    then
      :new.id := to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
    end if;
    :new.row_version_number := 1;
    :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
    :new.created_by := nvl(apex_application.g_user, user);
    :new.created := current_timestamp;
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
  elsif updating 
  then
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
    :new.row_version_number := nvl(:old.row_version_number, 1) + 1;
  end if;
  if :new.tags is not null 
  then
    :new.tags := eba_sales_fw.tags_cleaner(:new.tags);
  end if;
  eba_sales_fw.tag_sync(
    p_new_tags     => :new.tags,
    p_old_tags     => :old.tags,
    p_content_type => 'PRODUCT',
    p_content_id   => :new.id
  );
end;

/


ALTER TRIGGER "BIU_EBA_SALES_PRODUCTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_PRODUCT_LOBS" 
   before insert or update on EBA_SALES_PRODUCT_LOBS
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_PRODUCT_LOBS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_RISK_ASSESSMENTS" 
   before insert or update on eba_sales_risk_assessments
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_RISK_ASSESSMENTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_SALESREPS" 
before insert or update on eba_sales_salesreps
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_SALESREPS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_SALESREP_ROLES" 
before insert or update on eba_sales_salesrep_roles
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
    if :new.is_sales_rep is null then
        :new.is_sales_rep := 'Y';
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_SALESREP_ROLES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_SALES_PERIODS" 
before insert or update on eba_sales_sales_periods
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_SALES_PERIODS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_STATES" 
   before insert or update on EBA_SALES_STATES
   for each row
begin
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.created := current_timestamp;
       :new.created_by := nvl(wwv_flow.g_user,user);
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := nvl(:old.row_version_number,1) + 1;
   end if;
   if inserting or updating then
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
   end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_STATES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_STATUS_ASSESS" 
   before insert or update on eba_sales_status_assessments
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_STATUS_ASSESS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_SUPPORT_AMTS" 
   before insert or update on EBA_SALES_SUPPORT_AMTS
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_SUPPORT_AMTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_SUPRT_AMT_TYPES" 
   before insert or update on EBA_SALES_SUPRT_AMT_TYPES
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :new.updated_by := nvl(v('APP_USER'),USER);
         :new.updated := current_timestamp;
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_SUPRT_AMT_TYPES" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_SVPS" 
   before insert or update on eba_sales_svps
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_SVPS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_TERMS" 
before insert or update on eba_sales_terms
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
    end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_TERMS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_TERR_MAP" 
   before insert or update on EBA_SALES_TERR_MAP
   for each row
begin
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.created := current_timestamp;
       :new.created_by := nvl(wwv_flow.g_user,user);
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := nvl(:old.row_version_number,1) + 1;
   end if;
   if inserting or updating then
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
   end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_TERR_MAP" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_TAGS" 
   before insert or update on eba_sales_tags
   for each row
   begin
        :new.tag := upper(:new.tag);
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_TAGS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_TERR" 
  before insert or update on eba_sales_territories
  for each row
begin
  if inserting 
  then
    if :new.id is null 
    then
      :new.id := to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
    end if;
    :new.row_version_number := 1;
    :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
    :new.created_by := nvl(apex_application.g_user, user);
    :new.created := current_timestamp;
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
  elsif updating 
  then
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
    :new.row_version_number := nvl(:old.row_version_number, 1) + 1;
  end if;
  if :new.tags is not null 
  then
    :new.tags := eba_sales_fw.tags_cleaner(:new.tags);
  end if;
  eba_sales_fw.tag_sync(
    p_new_tags     => :new.tags,
    p_old_tags     => :old.tags,
    p_content_type => 'TERRITORY',
    p_content_id   => :new.id
  );
end;

/


ALTER TRIGGER "BIU_EBA_SALES_TERR" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_TERRITORY_ACL" 
   before insert or update on eba_sales_territory_acl
   for each row
   begin
      if inserting then
         if :NEW.ID is null then
           select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
           into :new.id
           from dual;
         end if;
         :NEW.CREATED := current_timestamp;
         :NEW.CREATED_BY := nvl(v('APP_USER'),USER);
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := 1;
      end if;
      if updating then
         :NEW.UPDATED := current_timestamp;
         :NEW.UPDATED_BY := nvl(v('APP_USER'),USER);
         :new.row_version_number := nvl(:old.row_version_number,1) + 1;
      end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_TERRITORY_ACL" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_TZ_PREF" 
   before insert or update on eba_sales_tz_pref
   for each row
begin
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.created := current_timestamp;
       :new.created_by := nvl(wwv_flow.g_user,user);
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := nvl(:old.row_version_number,1) + 1;
   end if;
   if inserting or updating then
       :new.updated := current_timestamp;
       :new.updated_by := nvl(wwv_flow.g_user,user);
   end if;
   if :new.TIMEZONE_PREFERENCE is null then
       :new.timezone_preference := 'UTC';
   end if;
end;

/


ALTER TRIGGER "BIU_EBA_SALES_TZ_PREF" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_SALES_UNIT_MEASURE" 
  before insert or update on EBA_SALES_UNIT_MEASURE
  for each row
begin
  if inserting 
  then
    if :new.id is null
    then
      :new.id := to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
    end if;
    :new.row_version_number := 1;
    :new.row_key := eba_sales_fw.compress_int(eba_sales_rowkey_seq.nextval);
    :new.created_by := nvl(apex_application.g_user, user);
    :new.created := current_timestamp;
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
  elsif updating 
  then
    :new.updated_by := nvl(apex_application.g_user, user);
    :new.updated := current_timestamp;
    :new.row_version_number := nvl(:old.row_version_number, 1) + 1;
  end if;
  if :new.tags is not null 
  then
    :new.tags := eba_sales_fw.tags_cleaner(:new.tags);
  end if;
  eba_sales_fw.tag_sync(
    p_new_tags     => :new.tags,
    p_old_tags     => :old.tags,
    p_content_type => 'MEASURE',
    p_content_id   => :new.id
  );
end;
/


ALTER TRIGGER "BIU_EBA_SALES_UNIT_MEASURE" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BI_EBA_SALES_ACCOUNT_TYPE" 
  before insert on "EBA_SALES_ACCOUNT_TYPE"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "EBA_SALES_ACCOUNT_TYPE_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/


ALTER TRIGGER "BI_EBA_SALES_ACCOUNT_TYPE" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BI_EBA_SALES_ESTIMATE" 
  before insert on "EBA_SALES_ESTIMATE"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "EBA_SALES_ESTIMATE_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/


ALTER TRIGGER "BI_EBA_SALES_ESTIMATE" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BI_EBA_SALES_ESTIMATE_PRODUCTS" 
  before insert on "EBA_SALES_ESTIMATE_PRODUCTS"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "EBA_SALES_ESTIMATE_PRODUCTS_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/


ALTER TRIGGER "BI_EBA_SALES_ESTIMATE_PRODUCTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BI_EBA_SALES_LEADS_EVENTS" 
  before insert on "EBA_SALES_EVENTS"               
  for each row  
begin   
  if :NEW."ID_EVENT" is null then 
    select "EBA_SALES_LEADS_EVENTS_SEQ".nextval into :NEW."ID_EVENT" from sys.dual; 
  end if; 
end; 

/


ALTER TRIGGER "BI_EBA_SALES_LEADS_EVENTS" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BI_EBA_SALES_PROFILE" 
  before insert on "EBA_SALES_PROFILE"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "EBA_SALES_PROFILE_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/


ALTER TRIGGER "BI_EBA_SALES_PROFILE" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BI_EBA_SALES_UNIT_MEASURE" 
  before insert on "EBA_SALES_UNIT_MEASURE"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "EBA_SALES_UNIT_MEASURE_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/


ALTER TRIGGER "BI_EBA_SALES_UNIT_MEASURE" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "BI_EBA_SALES_USER" 
  before insert on "EBA_SALES_USER"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "EBA_SALES_USER_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/


ALTER TRIGGER "BI_EBA_SALES_USER" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_SALES_CLICKS_BIU" 
    before insert on eba_sales_clicks
    for each row
begin
    if :new.id is null then
        :new.id := eba_sales_acl_api.gen_id();
    end if;
    :new.view_timestamp := current_timestamp;
    :new.app_session := v('APP_SESSION');
    :new.app_username := lower(:new.app_username);
end;

/


ALTER TRIGGER "EBA_SALES_CLICKS_BIU" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_SALES_ERRORS_BI" 
    before insert or update on eba_sales_errors
    for each row
begin
    if :new.id is null then
       :new.id := eba_sales_acl_api.gen_id();
    end if;
end;

/


ALTER TRIGGER "EBA_SALES_ERRORS_BI" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_SALES_NOTE_BIU" 
before insert or update on eba_sales_notifications
    for each row
begin
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
        into :new.id
        from dual;
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created := current_timestamp;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated := current_timestamp;
        :new.row_version_number := 1;
    end if;
    if updating then
        :new.row_version_number := nvl(:old.row_version_number,1) + 1;
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated    := current_timestamp;
    end if;
    if :new.notification_type is null then
       :new.notification_type := 'MANUAL';
    end if;
end;

/


ALTER TRIGGER "EBA_SALES_NOTE_BIU" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_SALES_PREFERENCES_BIU" 
before insert or update on eba_sales_preferences
    for each row
begin
    if inserting and :new.id is null then
        :new.id := eba_sales_acl_api.gen_id();
    end if;
    if inserting then
        :new.created_by := nvl(v('APP_USER'),USER);
        :new.created_on := current_timestamp;
    end if;
    if updating then
        :new.updated_by := nvl(v('APP_USER'),USER);
        :new.updated_on := current_timestamp;
    end if;
    :new.preference_name := upper(:new.preference_name);
end;

/


ALTER TRIGGER "EBA_SALES_PREFERENCES_BIU" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_SALES_USERS_BD" 
    before delete on eba_sales_users
    for each row
declare
    pragma autonomous_transaction;
begin
    -- Disallow deletes to a user's own record unless last one.
    if v('APP_USER') = upper(:old.username) then
       for c1 in (
          select count(*) cnt
            from eba_sales_users
           where id != :old.id )
       loop
          if c1.cnt > 0 then
             raise_application_error(-20002, 'Delete disallowed, you cannot delete your own access control details.');
          end if;
       end loop;
    end if;    
end;

/


ALTER TRIGGER "EBA_SALES_USERS_BD" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_SALES_USERS_BIU" 
    before insert or update on eba_sales_users
    for each row
begin
    if inserting then
        if :new.id is null then
            :new.id := eba_sales_acl_api.gen_id();
        end if;
        :new.created_by         := nvl(v('APP_USER'), USER);
        :new.created            := current_timestamp;
        :new.row_version        := 1;
        if :new.account_locked is null then
            :new.account_locked := 'N';    
        end if;
    end if;
    if updating then
        :new.updated_by         := nvl(v('APP_USER'), USER);
        :new.updated            := current_timestamp;
        :new.row_version        := nvl(:old.row_version,1) + 1;
    end if;
    -- Always store username as upper case
    :new.username := upper(:new.username);
end;

/


ALTER TRIGGER "EBA_SALES_USERS_BIU" ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_SALES_VERIFY_BIU_FER" 
   before insert or update on eba_sales_verifications
   for each row
begin
   if :new.id is null then
     :new.id := eba_sales_acl_api.gen_id();
   end if;
   if inserting then
       :new.created := current_timestamp;
       :new.created_by := nvl(apex_application.g_user,user);
   end if;
   :new.verified_by := lower(:new.verified_by);
   :new.updated := current_timestamp;
   :new.updated_by := nvl(apex_application.g_user,user);
end;

/


ALTER TRIGGER "EBA_SALES_VERIFY_BIU_FER" ENABLE;

CREATE OR REPLACE FORCE EDITIONABLE VIEW "EBA_SALES_OPPORTUNITIES_V" ("ID", "ROW_KEY", "CUSTOMER_ID", "CUSTOMER_NAME", "REP_NAME", "DEAL_NAME", "DEAL_CLOSE_DATE", "DEAL_CLOSE_DATE_ALT", "DEAL_AMOUNT", "DEAL_PROBABILITY", "STATUS_CODE", "IS_OPEN", "IS_OVERDUE", "WEIGHTED_FORECAST", "NOTES", "PRODUCTS", "LAST_CHANGED", "SVP", "TERRITORY_NAME", "QTR", "TAGS", "CUSTOMER_TAGS") AS 
  select d.id, 
    d.row_key,
    c.id customer_id,
    c.customer_name,
    s.rep_last_name || ', ' || s.rep_first_name as rep_name,
    d.deal_name,
    d.deal_close_date,
    d.deal_close_date_alt,
    d.deal_amount,
    d.deal_probability,
    sc.status_code,
    case
      when d.deal_probability is null 
        or d.deal_probability in (0, 100)
      then 'No'
      else 'Yes'
    end is_open,
    case 
      when d.deal_probability in (0, 100)
      then 'No'
      when greatest(sysdate, d.deal_close_date) = sysdate
      then 'Yes'
      else 'No'
    end is_overdue,
    d.deal_amount * d.deal_probability / 100 weighted_forecast,
    (
      select count(*) 
      from eba_sales_comments 
      where deal_id = d.id
    ) notes,
    (
      select count(*) 
      from eba_sales_deal_products 
      where deal_id = d.id
    ) products,
    nvl(d.updated, d.created) last_changed,
    (
      select svp_name 
      from eba_sales_svps svp 
      where svp.id = d.svp_id
    ) svp,
    t.territory_name,
    d.qtr,
    d.tags,
    c.tags customer_tags
  from eba_sales_deals d
  join eba_sales_customers c
    on c.id = d.customer_id 
  left join eba_sales_salesreps s
    on s.id = d.salesrep_id_01
  left join eba_sales_deal_status_codes sc
    on sc.id = d.deal_status_code_id
  left join eba_sales_territories t
    on t.id = c.customer_territory_id
;

CREATE OR REPLACE FORCE EDITIONABLE VIEW "EBA_SALES_OPP_V" ("CUSTOMER_ID", "DEAL_ID", "CUSTOMER_NAME", "CUSTOMER_STOCK_SYMB", "REP_FIRST_NAME", "REP_LAST_NAME", "REP_EMAIL", "DEAL_NAME", "DEAL_CLOSE_DATE", "DEAL_AMOUNT", "DEAL_PROBABILITY", "STATUS_CODE") AS 
  select c.id customer_id,
    d.id deal_id,
    c.customer_name,
    c.customer_stock_symb,
    sr.rep_first_name,
    sr.rep_last_name,
    sr.rep_email,
    d.deal_name,
    d.deal_close_date,
    case when exists (select null
                        from APEX_APPLICATION_BUILD_OPTIONS
                       where application_id = v('APP_ID')
                         and BUILD_OPTION_NAME = 'Opportunity Amount Set at Product Level'
                         and BUILD_OPTION_STATUS = 'Exclude') then
        d.deal_amount
    else
        (select sum(nvl(quote_price, 0.00)) from EBA_SALES_DEAL_PRODUCTS dp where dp.deal_id = d.id)
    end as deal_amount,
    d.deal_probability,
    dsc.status_code 
  from  eba_sales_deals d
  join eba_sales_deal_status_codes dsc
    on dsc.id = d.deal_status_code_id
  join eba_sales_salesreps sr
    on sr.id = d.salesrep_id_01
  join eba_sales_customers c
    on c.id = d.customer_id
;


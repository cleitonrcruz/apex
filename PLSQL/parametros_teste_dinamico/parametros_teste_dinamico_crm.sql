-- Create tabela de parâmetros
CREATE TABLE PARAMETROS_TESTE (
    ID_COLUMN NUMBER GENERATED BY DEFAULT AS IDENTITY,
    MODULO VARCHAR2(50),
    NOME_PARAM VARCHAR2(100),
    VALOR_PARAM VARCHAR2(4000),
    DATA_PARAM DATE,
    DESCRICAO VARCHAR2(500),
    ATIVO CHAR(1) DEFAULT 'S',
    DATA_ATUALIZACAO TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT PK_PARAMETROS_TESTE PRIMARY KEY (ID_COLUMN, MODULO)
);
-----------------------------------------------------------------------------
-- Módulo: VENDAS
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('VENDAS', 'MARGEM_LUCRO_PADRAO', '35.7', NULL, 'Margem de lucro padrão (%) aplicada em propostas', 'S');

INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('VENDAS', 'DESCONTO_MAXIMO', '10', NULL, 'Percentual máximo de desconto permitido', 'S');

INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('VENDAS', 'TIPO_TABELA_PRECO', 'PADRAO', NULL, 'Tipo de tabela de preço aplicada por padrão', 'S');

-- Módulo: SUPORTE
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('SUPORTE', 'TEMPO_MAXIMO_ESPERA', '30', NULL, 'Tempo máximo de espera (min) antes de escalonar atendimento', 'S');
--
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('SUPORTE', 'HORARIO_FUNCIONAMENTO', '08:00-18:00', NULL, 'Horário de atendimento padrão do suporte', 'S');
--
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('SUPORTE', 'NIVEL_PRIORIDADE_PADRAO', 'MÉDIO', NULL, 'Nível de prioridade atribuído automaticamente', 'S');

-- Módulo: MARKETING
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('MARKETING', 'CAMPANHA_ATUAL', 'INAUGURACAO', TO_DATE('2025-10-01', 'YYYY-MM-DD'), 'Código da campanha de marketing vigente', 'S');
--
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('MARKETING', 'LIMITE_ENVIO_EMAIL', '500', NULL, 'Número máximo de envios de e-mails por campanha', 'S');
--
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('MARKETING', 'DATA_LIMITE_CAMPANHA', NULL, TO_DATE('2025-12-31', 'YYYY-MM-DD'), 'Data final permitida para campanhas ativas', 'S');

-- Módulo: FINANCEIRO
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('FINANCEIRO', 'DIAS_PARA_FATURAMENTO', '1', NULL, 'Número de dias para gerar fatura após entrega', 'S');
--
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('FINANCEIRO', 'MOEDA_PADRAO', 'BRL', NULL, 'Moeda utilizada nas transações financeiras', 'S');
--
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('FINANCEIRO', 'JUROS_MORA_DIA', '0.03', NULL, 'Percentual de juros por dia de atraso', 'S');

-- Módulo: RELACIONAMENTO
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('RELACIONAMENTO', 'MENSAGEM_BOAS_VINDAS', 'Bem-vindo ao nosso CRM!', NULL, 'Mensagem enviada automaticamente para novos contatos', 'S');
--
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('RELACIONAMENTO', 'TIPO_COMUNICACAO_PADRAO', 'EMAIL', NULL, 'Canal padrão de comunicação com o cliente', 'S');
--
INSERT INTO PARAMETROS_TESTE (MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO)
VALUES ('RELACIONAMENTO', 'FREQUENCIA_FOLLOWUP', '7', NULL, 'Dias entre interações de follow-up com cliente', 'S');
-----------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE PKG_PARAMETROS_TESTE AS
    FUNCTION INSERIR_PARAMETRO_DINAMICO (
        p_modulo        IN VARCHAR2,
        p_nome_param    IN VARCHAR2,
        p_valor_param   IN VARCHAR2,
        p_data_param    IN DATE,
        p_descricao     IN VARCHAR2,
        p_ativo         IN CHAR
    ) RETURN VARCHAR2;

    FUNCTION CONSULTAR_PARAMETRO (
        p_modulo     IN VARCHAR2,
        p_nome_param IN VARCHAR2
    ) RETURN VARCHAR2;
END PKG_PARAMETROS_TESTE;
--
create or replace PACKAGE BODY PKG_PARAMETROS_TESTE AS

    FUNCTION INSERIR_PARAMETRO_DINAMICO (
        p_modulo        IN VARCHAR2,
        p_nome_param    IN VARCHAR2,
        p_valor_param   IN VARCHAR2,
        p_data_param    IN DATE,
        p_descricao     IN VARCHAR2,
        p_ativo         IN CHAR
    ) RETURN VARCHAR2 IS
        v_cursor INTEGER;
        v_sql    VARCHAR2(1000);
        v_result INTEGER;
    BEGIN
        v_cursor := DBMS_SQL.OPEN_CURSOR;

        v_sql := 'INSERT INTO PARAMETROS_TESTE (
                      MODULO, NOME_PARAM, VALOR_PARAM, DATA_PARAM, DESCRICAO, ATIVO
                  ) VALUES (
                      :modulo, :nome_param, :valor_param, :data_param, :descricao, :ativo
                  )';

        DBMS_SQL.PARSE(v_cursor, v_sql, DBMS_SQL.NATIVE);

        DBMS_SQL.BIND_VARIABLE(v_cursor, ':modulo',      p_modulo);
        DBMS_SQL.BIND_VARIABLE(v_cursor, ':nome_param',  p_nome_param);
        DBMS_SQL.BIND_VARIABLE(v_cursor, ':valor_param', p_valor_param);
        DBMS_SQL.BIND_VARIABLE(v_cursor, ':data_param',  p_data_param);
        DBMS_SQL.BIND_VARIABLE(v_cursor, ':descricao',   p_descricao);
        DBMS_SQL.BIND_VARIABLE(v_cursor, ':ativo',       p_ativo);

        v_result := DBMS_SQL.EXECUTE(v_cursor);

        DBMS_SQL.CLOSE_CURSOR(v_cursor);

        RETURN 'SUCESSO: ' || v_result || ' linha(s) inserida(s).';

    EXCEPTION
        WHEN OTHERS THEN
            IF DBMS_SQL.IS_OPEN(v_cursor) THEN
                DBMS_SQL.CLOSE_CURSOR(v_cursor);
            END IF;
            RETURN 'ERRO: ' || SQLERRM;
    END INSERIR_PARAMETRO_DINAMICO;

    FUNCTION CONSULTAR_PARAMETRO (
        p_modulo     IN VARCHAR2,
        p_nome_param IN VARCHAR2
    ) RETURN VARCHAR2 IS
        v_cursor INTEGER;
        v_sql    VARCHAR2(1000);
        v_valor  VARCHAR2(4000);
        v_encontrou BOOLEAN := FALSE;
    BEGIN
        v_cursor := DBMS_SQL.OPEN_CURSOR;

        v_sql := 'SELECT VALOR_PARAM FROM PARAMETROS_TESTE 
                  WHERE MODULO = :modulo AND NOME_PARAM = :nome_param AND ATIVO = ''S''';

        DBMS_SQL.PARSE(v_cursor, v_sql, DBMS_SQL.NATIVE);
        DBMS_SQL.BIND_VARIABLE(v_cursor, ':modulo',     p_modulo);
        DBMS_SQL.BIND_VARIABLE(v_cursor, ':nome_param', p_nome_param);
        DBMS_SQL.DEFINE_COLUMN(v_cursor, 1, v_valor, 4000);

        IF DBMS_SQL.EXECUTE_AND_FETCH(v_cursor) > 0 THEN
            DBMS_SQL.COLUMN_VALUE(v_cursor, 1, v_valor);
            v_encontrou := TRUE;
        END IF;

        DBMS_SQL.CLOSE_CURSOR(v_cursor);

        IF v_encontrou THEN
            RETURN v_valor;
        ELSE
            RETURN 'Parâmetro "' || p_nome_param || '" não encontrado para o módulo "' || p_modulo || '".';
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            IF DBMS_SQL.IS_OPEN(v_cursor) THEN
                DBMS_SQL.CLOSE_CURSOR(v_cursor);
            END IF;
            RETURN 'ERRO: ' || SQLERRM;
    END CONSULTAR_PARAMETRO;

END PKG_PARAMETROS_TESTE;
-----------------------------------------------------------------------------
-- Chamada função CONSULTAR_PARAMETRO
DECLARE
    v_valor VARCHAR2(4000);
BEGIN
    v_valor := PKG_PARAMETROS_TESTE.CONSULTAR_PARAMETRO(
        p_modulo     => 'RELACIONAMENTO',
        p_nome_param => 'TIPO_COMUNICACAO_PADRAO'
    );

    DBMS_OUTPUT.PUT_LINE('Valor do parâmetro: ' || v_valor);
END;
-- Chamada função INSERIR_PARAMETRO_DINAMICO
DECLARE
    v_result VARCHAR2(200);
BEGIN
    v_result := PKG_PARAMETROS_TESTE.INSERIR_PARAMETRO_DINAMICO(
        p_modulo      => 'INTEGRACOES',
        p_nome_param  => 'ENDPOINT_EXTERNO',
        p_valor_param => 'https://api.exemplo.com/v1',
        p_data_param  => NULL,
        p_descricao   => 'Endpoint para integração com parceiro externo',
        p_ativo       => 'S'
    );

    DBMS_OUTPUT.PUT_LINE(v_result);
END;
-----------------------------------------------------------------------------
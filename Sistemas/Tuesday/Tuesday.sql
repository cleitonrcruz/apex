CREATE TABLE  "EPD_KANBAN" 
   (	"ID_KANBAN" NUMBER, 
	"DESCRIPTION" VARCHAR2(45), 
	 CONSTRAINT "EPD_KANBAN_PK" PRIMARY KEY ("ID_KANBAN")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_CLASSIFICACAO" 
   (	"ID_CLASSIFICACAO" NUMBER, 
	"DESCRIPTION" VARCHAR2(255), 
	"ICON" VARCHAR2(45), 
	"ID_KANBAN" NUMBER, 
	 CONSTRAINT "EPD_CLASSIFICACAO_PK" PRIMARY KEY ("ID_CLASSIFICACAO")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_KANBAN_COLUMN" 
   (	"ID_COLUMN" NUMBER, 
	"COLUMN_TITLE" VARCHAR2(45), 
	"SEQ" NUMBER, 
	"COLOR" VARCHAR2(45), 
	"ID_KANBAN" NUMBER, 
	 CONSTRAINT "EPD_KANBAN_COLUMN_PK" PRIMARY KEY ("ID_COLUMN")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_PRIORITY" 
   (	"ID_PRIORITY" NUMBER, 
	"DESCRIPTION" VARCHAR2(45), 
	"ID_KANBAN" NUMBER, 
	 CONSTRAINT "EPD_PRIORITY_PK" PRIMARY KEY ("ID_PRIORITY")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_PROJECT" 
   (	"ID_PROJECT" NUMBER, 
	"DESCRIPTION" VARCHAR2(45), 
	 CONSTRAINT "EPD_PROJECT_PK" PRIMARY KEY ("ID_PROJECT")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_VERSION" 
   (	"ID_VERSION" NUMBER, 
	"DESCRIPTIION" VARCHAR2(45), 
	"VERSION_DATE" DATE, 
	"ID_PROJECT" NUMBER, 
	"RELEASE_NOTE" VARCHAR2(4000), 
	 CONSTRAINT "EDP_VERSION_PK" PRIMARY KEY ("ID_VERSION")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_MODULE" 
   (	"ID_MODULE" NUMBER NOT NULL ENABLE, 
	"MODULE" VARCHAR2(100), 
	"ID_PROJECT" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "EPD_MODULE_PK" PRIMARY KEY ("ID_MODULE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_TASK" 
   (	"ID_TASK" NUMBER, 
	"TITLE" VARCHAR2(200), 
	"DUE_DATE" DATE, 
	"ICON" VARCHAR2(45), 
	"HAS_SCRIPT" VARCHAR2(1), 
	"HAS_JASPER" VARCHAR2(1), 
	"ID_COLUMN" NUMBER, 
	"ID_PRIORITY" NUMBER, 
	"ID_VERSION" NUMBER, 
	"ICON_COLOR" VARCHAR2(45), 
	"ID_PROJECT" NUMBER, 
	"ID_MODULE" NUMBER, 
	"ARCHIVE" VARCHAR2(1), 
	"ID_CLASSIFICACAO" NUMBER, 
	"DESCRIPTION" CLOB, 
	"ESTIMATED_TIME" NUMBER, 
	"COLUMN_ORDER" NUMBER, 
	 CONSTRAINT "EPD_TASK_PK" PRIMARY KEY ("ID_TASK")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_DEVELOPER" 
   (	"ID_DEVELOPER" NUMBER, 
	"NAME" VARCHAR2(200), 
	"COUNTRY" VARCHAR2(200), 
	"CONTACT" VARCHAR2(200), 
	"ACTIVE" VARCHAR2(1), 
	 CONSTRAINT "EPD_DEVELOPER_PK" PRIMARY KEY ("ID_DEVELOPER")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_DEVELOPER_TASK" 
   (	"ID_TASK" NUMBER, 
	"ID_DEVELOPER" NUMBER, 
	 CONSTRAINT "EPD_DEVELOPER_TASK_PK" PRIMARY KEY ("ID_TASK", "ID_DEVELOPER")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_PROFILE" 
   (	"ID_PROFILE" NUMBER, 
	"DESCRIPTION" VARCHAR2(45), 
	 CONSTRAINT "EPD_PROFILE_PK" PRIMARY KEY ("ID_PROFILE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_USER" 
   (	"ID_USER" NUMBER, 
	"LOGIN" VARCHAR2(45), 
	"PASSWORD" VARCHAR2(255), 
	"ID_PROFILE" NUMBER, 
	"ACTIVE" VARCHAR2(1), 
	"ID_DEVELOPER" NUMBER, 
	"CHANGE_PASSWORD" VARCHAR2(1), 
	 CONSTRAINT "EPD_USER_PK" PRIMARY KEY ("ID_USER")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EPD_USER_UK_LOGIN" UNIQUE ("LOGIN")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_TASK_TIME" 
   (	"ID_TASK_TIME" NUMBER, 
	"ID_TASK" NUMBER, 
	"ID_DEVELOPER" NUMBER, 
	"START_TIME" TIMESTAMP (6), 
	"END_TIME" TIMESTAMP (6), 
	"DESCRIPTION" VARCHAR2(4000), 
	 CONSTRAINT "EPD_TASK_TIME_PK" PRIMARY KEY ("ID_TASK_TIME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_COMMENT" 
   (	"ID_COMMENT" NUMBER, 
	"COMMENT_DATE" TIMESTAMP (6), 
	"ID_USER" NUMBER NOT NULL ENABLE, 
	"ID_TASK" NUMBER NOT NULL ENABLE, 
	"COMMENT_DESC" CLOB, 
	 CONSTRAINT "EPD_COMMENT_PK" PRIMARY KEY ("ID_COMMENT")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_CHECKLIST" 
   (	"ID_CHECKLIST" NUMBER NOT NULL ENABLE, 
	"CHECKLIST_CHECK" VARCHAR2(1) NOT NULL ENABLE, 
	"CHECKLIST_DESCRIPTION" VARCHAR2(200) NOT NULL ENABLE, 
	"ID_TASK" NUMBER, 
	 CONSTRAINT "EPD_CHECKLIST_PK" PRIMARY KEY ("ID_CHECKLIST")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_TABLES" 
   (	"ID_TABLE" NUMBER, 
	"DESCRIPTION" VARCHAR2(45), 
	 CONSTRAINT "EPD_TABLES_PK" PRIMARY KEY ("ID_TABLE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EDP_ATTACHMENT" 
   (	"ID_ATTACHMENT" NUMBER, 
	"ATTACHMENT" BLOB, 
	"FILE_NAME" VARCHAR2(255), 
	"MIME_TYPE" VARCHAR2(255), 
	"LAST_DATE_UPDATE" DATE, 
	"ID_TABLE" NUMBER, 
	"COLUMN_PK_VALUE" NUMBER, 
	"ID_USER" NUMBER, 
	 CONSTRAINT "EDP_ATTACHMENT_PK" PRIMARY KEY ("ID_ATTACHMENT")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_ACTION_LOG" 
   (	"ID_ACTION_LOG" NUMBER, 
	"ACTION" VARCHAR2(255), 
	 CONSTRAINT "EPD_ACTION_LOG_PK" PRIMARY KEY ("ID_ACTION_LOG")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPD_TASK_LOG" 
   (	"ID_TASK_LOG" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000), 
	"DATE_LOG" TIMESTAMP (6), 
	"USER_LOG" VARCHAR2(45), 
	"ID_TASK" NUMBER NOT NULL ENABLE, 
	"ID_ACTION" NUMBER, 
	"OLD_VALUE" VARCHAR2(4000), 
	"NEW_VALUE" VARCHAR2(4000), 
	 CONSTRAINT "EPD_TASK_LOG_PK" PRIMARY KEY ("ID_TASK_LOG")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EDP_CLIENT" 
   (	"ID_CLIENT" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(200) NOT NULL ENABLE, 
	"LAST_NAME" VARCHAR2(200), 
	"LANGUAGE" VARCHAR2(200), 
	"CONTACT" VARCHAR2(200), 
	"COUNTRY" VARCHAR2(200), 
	"ADDRESS" VARCHAR2(400), 
	"DOCUMENT" VARCHAR2(200), 
	 CONSTRAINT "EDP_CLIENT_PK" PRIMARY KEY ("ID_CLIENT")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "EPD_CLASSIFICACAO" ADD CONSTRAINT "EPD_CLASSIFICACAO_FK_KANBAN" FOREIGN KEY ("ID_KANBAN")
	  REFERENCES  "EPD_KANBAN" ("ID_KANBAN") ENABLE
/
ALTER TABLE  "EPD_MODULE" ADD CONSTRAINT "EPD_MODULE_FK_PROJECT" FOREIGN KEY ("ID_PROJECT")
	  REFERENCES  "EPD_PROJECT" ("ID_PROJECT") ENABLE
/
ALTER TABLE  "EPD_CHECKLIST" ADD CONSTRAINT "EPD_CHECKLIST_FK_TASK" FOREIGN KEY ("ID_TASK")
	  REFERENCES  "EPD_TASK" ("ID_TASK") ENABLE
/
ALTER TABLE  "EDP_ATTACHMENT" ADD CONSTRAINT "EDP_ATTACHMENT_FK_TABLE" FOREIGN KEY ("ID_TABLE")
	  REFERENCES  "EPD_TABLES" ("ID_TABLE") ENABLE
/
ALTER TABLE  "EDP_ATTACHMENT" ADD CONSTRAINT "EDP_ATTACHMENT_FK_USER" FOREIGN KEY ("ID_USER")
	  REFERENCES  "EPD_USER" ("ID_USER") ENABLE
/
ALTER TABLE  "EPD_TASK_TIME" ADD CONSTRAINT "EPD_TASK_TIME_FK_TASK" FOREIGN KEY ("ID_TASK")
	  REFERENCES  "EPD_TASK" ("ID_TASK") ENABLE
/
ALTER TABLE  "EPD_TASK_TIME" ADD CONSTRAINT "EPD_TASK_TIME_FK_DEV" FOREIGN KEY ("ID_DEVELOPER")
	  REFERENCES  "EPD_DEVELOPER" ("ID_DEVELOPER") ENABLE
/
ALTER TABLE  "EPD_KANBAN_COLUMN" ADD CONSTRAINT "EPD_COLUMN_FK_KANBAN" FOREIGN KEY ("ID_KANBAN")
	  REFERENCES  "EPD_KANBAN" ("ID_KANBAN") ENABLE
/
ALTER TABLE  "EPD_TASK" ADD CONSTRAINT "EPD_TASK_FK_COLUMN" FOREIGN KEY ("ID_COLUMN")
	  REFERENCES  "EPD_KANBAN_COLUMN" ("ID_COLUMN") ENABLE
/
ALTER TABLE  "EPD_TASK" ADD CONSTRAINT "EPD_TASK_FK_PRIORITY" FOREIGN KEY ("ID_PRIORITY")
	  REFERENCES  "EPD_PRIORITY" ("ID_PRIORITY") ENABLE
/
ALTER TABLE  "EPD_TASK" ADD CONSTRAINT "EPD_TASK_FK_VERSION" FOREIGN KEY ("ID_VERSION")
	  REFERENCES  "EPD_VERSION" ("ID_VERSION") ENABLE
/
ALTER TABLE  "EPD_DEVELOPER_TASK" ADD CONSTRAINT "EPD_DEVELOPER_TASK_FK_TASK" FOREIGN KEY ("ID_TASK")
	  REFERENCES  "EPD_TASK" ("ID_TASK") ENABLE
/
ALTER TABLE  "EPD_DEVELOPER_TASK" ADD CONSTRAINT "EPD_DEVELOPER_TASK_FK_DEV" FOREIGN KEY ("ID_DEVELOPER")
	  REFERENCES  "EPD_DEVELOPER" ("ID_DEVELOPER") ENABLE
/
ALTER TABLE  "EPD_COMMENT" ADD CONSTRAINT "EPD_COMMENT_FK_TASK" FOREIGN KEY ("ID_TASK")
	  REFERENCES  "EPD_TASK" ("ID_TASK") ENABLE
/
ALTER TABLE  "EPD_USER" ADD CONSTRAINT "EPD_USER_FK_PROFILE" FOREIGN KEY ("ID_PROFILE")
	  REFERENCES  "EPD_PROFILE" ("ID_PROFILE") ENABLE
/
ALTER TABLE  "EPD_COMMENT" ADD CONSTRAINT "EPD_COMMENT_FK_USER" FOREIGN KEY ("ID_USER")
	  REFERENCES  "EPD_USER" ("ID_USER") ENABLE
/
ALTER TABLE  "EPD_PRIORITY" ADD CONSTRAINT "EPD_PRIORITY_FK_KANBAN" FOREIGN KEY ("ID_KANBAN")
	  REFERENCES  "EPD_KANBAN" ("ID_KANBAN") ENABLE
/
ALTER TABLE  "EPD_USER" ADD CONSTRAINT "EPD_USER_FK_DEVELOPER" FOREIGN KEY ("ID_DEVELOPER")
	  REFERENCES  "EPD_DEVELOPER" ("ID_DEVELOPER") ENABLE
/
ALTER TABLE  "EPD_TASK_LOG" ADD CONSTRAINT "EPD_TASK_LOG_FK_ACTION" FOREIGN KEY ("ID_ACTION")
	  REFERENCES  "EPD_ACTION_LOG" ("ID_ACTION_LOG") ENABLE
/
ALTER TABLE  "EPD_TASK" ADD CONSTRAINT "EPD_TASK_FK_PROJECT" FOREIGN KEY ("ID_PROJECT")
	  REFERENCES  "EPD_PROJECT" ("ID_PROJECT") ENABLE
/
ALTER TABLE  "EPD_VERSION" ADD CONSTRAINT "EPD_VERSION_FK_PROJECT" FOREIGN KEY ("ID_PROJECT")
	  REFERENCES  "EPD_PROJECT" ("ID_PROJECT") ENABLE
/
ALTER TABLE  "EPD_TASK" ADD CONSTRAINT "EPD_TASK_FK_MODULE" FOREIGN KEY ("ID_MODULE")
	  REFERENCES  "EPD_MODULE" ("ID_MODULE") ENABLE
/
ALTER TABLE  "EPD_TASK" ADD CONSTRAINT "EPD_TASK_FK_CLASSIFICACAO" FOREIGN KEY ("ID_CLASSIFICACAO")
	  REFERENCES  "EPD_CLASSIFICACAO" ("ID_CLASSIFICACAO") ENABLE
/
CREATE OR REPLACE EDITIONABLE FUNCTION  "EPD_LOGIN" 
(p_username in VARCHAR2,
p_password in VARCHAR2)
return BOOLEAN
is
    hasil NUMBER := 0; 
begin
	SELECT 1 INTO hasil 
	FROM EPD_USER
	WHERE upper(LOGIN) = upper(p_username) 
	AND PASSWORD = standard_hash(p_password, 'MD5')
	AND ACTIVE = 'Y'
	;
	RETURN TRUE; 
EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
	RETURN FALSE; 
end;
/

CREATE UNIQUE INDEX  "EDP_ATTACHMENT_PK" ON  "EDP_ATTACHMENT" ("ID_ATTACHMENT")
/
CREATE UNIQUE INDEX  "EDP_CLIENT_PK" ON  "EDP_CLIENT" ("ID_CLIENT")
/
CREATE UNIQUE INDEX  "EDP_VERSION_PK" ON  "EPD_VERSION" ("ID_VERSION")
/
CREATE UNIQUE INDEX  "EPD_ACTION_LOG_PK" ON  "EPD_ACTION_LOG" ("ID_ACTION_LOG")
/
CREATE UNIQUE INDEX  "EPD_CHECKLIST_PK" ON  "EPD_CHECKLIST" ("ID_CHECKLIST")
/
CREATE UNIQUE INDEX  "EPD_CLASSIFICACAO_PK" ON  "EPD_CLASSIFICACAO" ("ID_CLASSIFICACAO")
/
CREATE UNIQUE INDEX  "EPD_COMMENT_PK" ON  "EPD_COMMENT" ("ID_COMMENT")
/
CREATE UNIQUE INDEX  "EPD_DEVELOPER_PK" ON  "EPD_DEVELOPER" ("ID_DEVELOPER")
/
CREATE UNIQUE INDEX  "EPD_DEVELOPER_TASK_PK" ON  "EPD_DEVELOPER_TASK" ("ID_TASK", "ID_DEVELOPER")
/
CREATE UNIQUE INDEX  "EPD_KANBAN_COLUMN_PK" ON  "EPD_KANBAN_COLUMN" ("ID_COLUMN")
/
CREATE UNIQUE INDEX  "EPD_KANBAN_PK" ON  "EPD_KANBAN" ("ID_KANBAN")
/
CREATE UNIQUE INDEX  "EPD_MODULE_PK" ON  "EPD_MODULE" ("ID_MODULE")
/
CREATE UNIQUE INDEX  "EPD_PRIORITY_PK" ON  "EPD_PRIORITY" ("ID_PRIORITY")
/
CREATE UNIQUE INDEX  "EPD_PROFILE_PK" ON  "EPD_PROFILE" ("ID_PROFILE")
/
CREATE UNIQUE INDEX  "EPD_PROJECT_PK" ON  "EPD_PROJECT" ("ID_PROJECT")
/
CREATE UNIQUE INDEX  "EPD_TABLES_PK" ON  "EPD_TABLES" ("ID_TABLE")
/
CREATE UNIQUE INDEX  "EPD_TASK_LOG_PK" ON  "EPD_TASK_LOG" ("ID_TASK_LOG")
/
CREATE UNIQUE INDEX  "EPD_TASK_PK" ON  "EPD_TASK" ("ID_TASK")
/
CREATE UNIQUE INDEX  "EPD_TASK_TIME_PK" ON  "EPD_TASK_TIME" ("ID_TASK_TIME")
/
CREATE UNIQUE INDEX  "EPD_USER_PK" ON  "EPD_USER" ("ID_USER")
/
CREATE UNIQUE INDEX  "EPD_USER_UK_LOGIN" ON  "EPD_USER" ("LOGIN")
/
CREATE OR REPLACE EDITIONABLE PROCEDURE  "REORDER_TASKS" (
    p_current_sequence   NUMBER,
    p_new_sequence       NUMBER,
    p_task_id            NUMBER,
    p_id_column          NUMBER
)
IS
BEGIN
    -- Verificar se a nova sequência é maior que a sequência atual
    IF p_new_sequence > p_current_sequence THEN
        -- Atualizar a ordem das tarefas entre a sequência atual e a nova sequência (para baixo)
        UPDATE EPD_TASK
        SET COLUMN_ORDER = COLUMN_ORDER - 1
        WHERE COLUMN_ORDER > p_current_sequence
          AND COLUMN_ORDER <= p_new_sequence
          AND ID_COLUMN = p_id_column;
    -- Verificar se a nova sequência é menor que a sequência atual
    ELSIF p_new_sequence < p_current_sequence THEN
        -- Atualizar a ordem das tarefas entre a nova sequência e a sequência atual (para cima)
        UPDATE EPD_TASK
        SET COLUMN_ORDER = COLUMN_ORDER + 1
        WHERE COLUMN_ORDER >= p_new_sequence
          AND COLUMN_ORDER < p_current_sequence
          AND ID_COLUMN = p_id_column;
    END IF;
    
    -- Atualizar a ordem da tarefa
    UPDATE EPD_TASK
    SET COLUMN_ORDER = p_new_sequence
    WHERE ID_TASK = p_task_id;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        -- Lidar com exceções ou erros, se necessário
        ROLLBACK;
END;
/

 CREATE SEQUENCE   "EDP_ATTACHMENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EDP_CLIENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_ACTION_LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_CHECKLIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_CLASSIFICACAO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_CLIENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_COMMENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 321 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_DEVELOPER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_KANBAN_COLUMN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_KANBAN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_MODULE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_MODULE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_PRIORITY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_PROFILE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_PROJECT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_TABLES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_TASK_LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 521 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_TASK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 361 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_TASK_TIME_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_USER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
 CREATE SEQUENCE   "EPD_VERSION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BIUD_EPD_TASK" 
BEFORE
insert or update or delete on "EPD_TASK"
for each row
begin

    if inserting  THEN 
        if :NEW."ID_TASK" is null then 
            select "EPD_TASK_SEQ".nextval into :NEW."ID_TASK" from sys.dual; 
        end if; 

        insert into EPD_TASK_LOG (
            DATE_LOG    , USER_LOG
            , ID_TASK   , ID_ACTION
        ) values (
            current_date    , nvl(sys_context('APEX$SESSION','APP_USER'),user)
            , :new.ID_TASK  , 1 --Task criada
        );
    elsif updating then
        if :old.TITLE <> :new.TITLE then
            insert into EPD_TASK_LOG (
                DATE_LOG    , USER_LOG
                , ID_TASK   , ID_ACTION
                , OLD_VALUE , NEW_VALUE

            ) values (
                current_date    , nvl(sys_context('APEX$SESSION','APP_USER'),user)
                , :OLD.ID_TASK  , 2 --Título alterado
                , :old.TITLE    , :new.TITLE
            );
        end if;

        if :old.DESCRIPTION <> :new.DESCRIPTION then
            insert into EPD_TASK_LOG (
                DATE_LOG    , USER_LOG
                , ID_TASK   , ID_ACTION
                , OLD_VALUE , NEW_VALUE

            ) values (
                current_date    , nvl(sys_context('APEX$SESSION','APP_USER'),user)
                , :OLD.ID_TASK  , 3 --Descrição alterada
                , null    , null
            );
        end if;

        if :old.DUE_DATE <> :new.DUE_DATE then
            insert into EPD_TASK_LOG (
                DATE_LOG    , USER_LOG
                , ID_TASK   , ID_ACTION
                , OLD_VALUE , NEW_VALUE

            ) values (
                current_date    , nvl(sys_context('APEX$SESSION','APP_USER'),user)
                , :OLD.ID_TASK  , 4 --Data de vencimento alterada
                , :old.DUE_DATE    , :new.DUE_DATE
            );
        end if;

        if :old.ID_COLUMN <> :new.ID_COLUMN then
            insert into EPD_TASK_LOG (
                DATE_LOG    , USER_LOG
                , ID_TASK   , ID_ACTION
                , OLD_VALUE 
                , NEW_VALUE

            ) values (
                current_date    , nvl(sys_context('APEX$SESSION','APP_USER'),user)
                , :OLD.ID_TASK  , 5 --Coluna alterada
                , ( select COLUMN_TITLE
                    from EPD_KANBAN_COLUMN
                    where ID_COLUMN = :old.ID_COLUMN)
                , ( select COLUMN_TITLE
                    from EPD_KANBAN_COLUMN
                    where ID_COLUMN = :new.ID_COLUMN)
            );
        end if;
    end if;
end;

/
ALTER TRIGGER  "BIUD_EPD_TASK" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BIUD_EPD_TASK_TIME" 
BEFORE
insert or update or delete on "EPD_TASK_TIME"
for each row
begin
    if inserting  THEN 
        if :NEW."ID_TASK_TIME" is null then 
            select "EPD_TASK_TIME_SEQ".nextval into :NEW."ID_TASK_TIME" from sys.dual; 
        end if; 
        insert into EPD_TASK_LOG (
            DATE_LOG    , USER_LOG
            , ID_TASK   , ID_ACTION
        ) values (
            current_date    , nvl(sys_context('APEX$SESSION','APP_USER'),user)
            , :new.ID_TASK  , 10 --Apontamento criado
        );
    elsif updating then
        insert into EPD_TASK_LOG (
            DATE_LOG    , USER_LOG
            , ID_TASK   , ID_ACTION
            , OLD_VALUE , NEW_VALUE
        ) values (
            current_date    , nvl(sys_context('APEX$SESSION','APP_USER'),user)
            , :OLD.ID_TASK  , 11 --Apontamento alterado
            , :old.START_TIME||' a '||:old.END_TIME||' - '||:old.DESCRIPTION    , :new.START_TIME||' a '||:new.END_TIME||' - '||:new.DESCRIPTION
        );
    elsif deleting then
        insert into EPD_TASK_LOG (
            DATE_LOG    , USER_LOG
            , ID_TASK   , ID_ACTION
            , OLD_VALUE 
        ) values (
            current_date    , nvl(sys_context('APEX$SESSION','APP_USER'),user)
            , :OLD.ID_TASK  , 12 --Apontamento removido
            , :old.START_TIME||' a '||:old.END_TIME||' - '||:old.DESCRIPTION
        );
    end if;
end;

/
ALTER TRIGGER  "BIUD_EPD_TASK_TIME" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EDP_ATTACHMENT" 
  before insert on "EDP_ATTACHMENT"               
  for each row  
begin   
  if :NEW."ID_ATTACHMENT" is null then 
    select "EDP_ATTACHMENT_SEQ".nextval into :NEW."ID_ATTACHMENT" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EDP_ATTACHMENT" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EDP_CLIENT" 
  before insert on "EDP_CLIENT"               
  for each row  
begin   
  if :NEW."ID_CLIENT" is null then 
    select "EDP_CLIENT_SEQ".nextval into :NEW."ID_CLIENT" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EDP_CLIENT" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_ACTION_LOG" 
  before insert on "EPD_ACTION_LOG"               
  for each row  
begin   
  if :NEW."ID_ACTION_LOG" is null then 
    select "EPD_ACTION_LOG_SEQ".nextval into :NEW."ID_ACTION_LOG" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_ACTION_LOG" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_CHECKLIST" 
  before insert on "EPD_CHECKLIST"               
  for each row  
begin   
  if :NEW."ID_CHECKLIST" is null then 
    select "EPD_CHECKLIST_SEQ".nextval into :NEW."ID_CHECKLIST" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_CHECKLIST" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_CLASSIFICACAO" 
  before insert on "EPD_CLASSIFICACAO"               
  for each row  
begin   
  if :NEW."ID_CLASSIFICACAO" is null then 
    select "EPD_CLASSIFICACAO_SEQ".nextval into :NEW."ID_CLASSIFICACAO" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_CLASSIFICACAO" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_COMMENT" 
  before insert on "EPD_COMMENT"               
  for each row  
begin   
  if :NEW."ID_COMMENT" is null then 
    select "EPD_COMMENT_SEQ".nextval into :NEW."ID_COMMENT" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_COMMENT" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_DEVELOPER" 
  before insert on "EPD_DEVELOPER"               
  for each row  
begin   
  if :NEW."ID_DEVELOPER" is null then 
    select "EPD_DEVELOPER_SEQ".nextval into :NEW."ID_DEVELOPER" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_DEVELOPER" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_KANBAN" 
  before insert on "EPD_KANBAN"               
  for each row  
begin   
  if :NEW."ID_KANBAN" is null then 
    select "EPD_KANBAN_SEQ".nextval into :NEW."ID_KANBAN" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_KANBAN" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_KANBAN_COLUMN" 
  before insert on "EPD_KANBAN_COLUMN"               
  for each row  
begin   
  if :NEW."ID_COLUMN" is null then 
    select "EPD_KANBAN_COLUMN_SEQ".nextval into :NEW."ID_COLUMN" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_KANBAN_COLUMN" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_MODULE" 
  before insert on "EPD_MODULE"               
  for each row  
begin   
  if :NEW."ID_MODULE" is null then 
    select "EPD_MODULE_SEQ1".nextval into :NEW."ID_MODULE" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_MODULE" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_PRIORITY" 
  before insert on "EPD_PRIORITY"               
  for each row  
begin   
  if :NEW."ID_PRIORITY" is null then 
    select "EPD_PRIORITY_SEQ".nextval into :NEW."ID_PRIORITY" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_PRIORITY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_PROFILE" 
  before insert on "EPD_PROFILE"               
  for each row  
begin   
  if :NEW."ID_PROFILE" is null then 
    select "EPD_PROFILE_SEQ".nextval into :NEW."ID_PROFILE" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_PROFILE" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_PROJECT" 
  before insert on "EPD_PROJECT"               
  for each row  
begin   
  if :NEW."ID_PROJECT" is null then 
    select "EPD_PROJECT_SEQ".nextval into :NEW."ID_PROJECT" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_PROJECT" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_TABLES" 
  before insert on "EPD_TABLES"               
  for each row  
begin   
  if :NEW."ID_TABLE" is null then 
    select "EPD_TABLES_SEQ".nextval into :NEW."ID_TABLE" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_TABLES" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_TASK_LOG" 
  before insert on "EPD_TASK_LOG"               
  for each row  
begin   
  if :NEW."ID_TASK_LOG" is null then 
    select "EPD_TASK_LOG_SEQ".nextval into :NEW."ID_TASK_LOG" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_TASK_LOG" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_USER" 
  before insert on "EPD_USER"               
  for each row  
begin   
  if :NEW."ID_USER" is null then 
    select "EPD_USER_SEQ".nextval into :NEW."ID_USER" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EPD_USER" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPD_VERSION" 
  before insert on "EPD_VERSION"               
  for each row  
begin   
  if :NEW."ID_VERSION" is null then 
    select "EPD_VERSION_SEQ".nextval into :NEW."ID_VERSION" from sys.dual; 
  end if; 
end; 
/
ALTER TRIGGER  "BI_EPD_VERSION" ENABLE
/

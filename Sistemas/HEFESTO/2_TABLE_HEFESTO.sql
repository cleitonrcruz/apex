  CREATE TABLE "CADEIA_VALOR" 
   (	"COD_CADEIA_VALOR" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"MACROPROCESSO" VARCHAR2(2000 CHAR), 
	"DESCR_CADEIA_VALOR" VARCHAR2(4000 CHAR), 
	"IND_ATIVO" VARCHAR2(1 CHAR) DEFAULT 'A' NOT NULL ENABLE, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	 CONSTRAINT "CADEIA_VALOR_PK" PRIMARY KEY ("COD_CADEIA_VALOR")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CADEIA_VALOR_NIVEL2" 
   (	"COD_CADEIA_VALOR_NIVEL2" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME" VARCHAR2(2000 CHAR), 
	"VALOR" VARCHAR2(2000 CHAR), 
	"DESCR" VARCHAR2(4000 CHAR), 
	"IND_ATIVO" VARCHAR2(1 CHAR) DEFAULT 'A' NOT NULL ENABLE, 
	"COD_CADEIA_VALOR_FK" NUMBER NOT NULL ENABLE, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	 CONSTRAINT "CADEIA_VALOR_NIVEL2_PK" PRIMARY KEY ("COD_CADEIA_VALOR_NIVEL2")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CADEIA_VALOR_NIVEL3" 
   (	"COD_CADEIA_VALOR_NIVEL3" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME" VARCHAR2(2000 CHAR), 
	"DESCR" VARCHAR2(4000 CHAR), 
	"IND_ATIVO" VARCHAR2(1 CHAR) DEFAULT 'A' NOT NULL ENABLE, 
	"COD_CADEIA_VALOR_NIVEL2_FK" NUMBER NOT NULL ENABLE, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	 CONSTRAINT "CADEIA_VALOR_NIVEL3_PK" PRIMARY KEY ("COD_CADEIA_VALOR_NIVEL3")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EMAIL" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"PROCESSO" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"ASSUNTO" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"CORPO" VARCHAR2(32767 CHAR) NOT NULL ENABLE, 
	"PARAMETROS" VARCHAR2(255), 
	 CONSTRAINT "EMAIL_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "FERIADO" 
   (	"COD_FERIADO" NUMBER DEFAULT ON NULL "WKSP_HEFESTO"."FERIADO_SEQ"."NEXTVAL" NOT NULL ENABLE, 
	"TIPO_FERIADO" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"DATA_FIXA" DATE, 
	"DATA_MOVEL" DATE, 
	"DESCRICAO" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"CATEGORIA" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"MEIO_PERIODO" VARCHAR2(1 CHAR), 
	"TIPO_JURISDICAO" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"COD_UORG_FK" VARCHAR2(2000 CHAR), 
	"IND_ATIVO" VARCHAR2(1 CHAR), 
	"JUSTIFICATIVA" VARCHAR2(255 CHAR), 
	 CONSTRAINT "FERIADO_PK" PRIMARY KEY ("COD_FERIADO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "INDICADOR_ANEXO" 
   (	"COD_INDICADOR_ANEXO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME_INDICADOR_ANEXO" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"MIME_TYPE" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"DOC_INDICADOR_ANEXO" BLOB NOT NULL ENABLE, 
	"COD_INDICADOR_FK" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "INDICADOR_ANEXO_PK" PRIMARY KEY ("COD_INDICADOR_ANEXO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "LOG_API" 
   (	"COD" NUMBER DEFAULT "WKSP_HEFESTO"."LOG_API_SEQ"."NEXTVAL" NOT NULL ENABLE, 
	"DATA_EVENTO" DATE DEFAULT LOCALTIMESTAMP NOT NULL ENABLE, 
	"PROCESSO" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"URL" VARCHAR2(500 CHAR) NOT NULL ENABLE, 
	"METODO" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
	"STATUS_CODE" NUMBER NOT NULL ENABLE, 
	"REQUEST" CLOB, 
	"RESPONSE" CLOB, 
	"CHAVE_REGISTRO" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "LOG_API_PK" PRIMARY KEY ("COD")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "LOG_DDL" 
   (	"COD" NUMBER DEFAULT "WKSP_HEFESTO"."LOG_DDL_SEQ"."NEXTVAL" NOT NULL ENABLE, 
	"USUARIO" VARCHAR2(100), 
	"MAQUINA" VARCHAR2(255), 
	"IP" VARCHAR2(50), 
	"DATA" DATE, 
	"OPERACAO" VARCHAR2(25), 
	"OWNER" VARCHAR2(255), 
	"OBJETO" VARCHAR2(255), 
	"USUARIO_APLICACAO" VARCHAR2(100), 
	"COMANDO" CLOB, 
	"TIPO" VARCHAR2(50), 
	"VERSAO" VARCHAR2(10), 
	"DATA_VERSAO" DATE
   ) ;

  CREATE TABLE "PLANO_TRABALHO_ATIVIDADE_EXECUCAO" 
   (	"COD_PLANO_TRABALHO_ATIVIDADE_EXECUCAO" NUMBER NOT NULL ENABLE, 
	"COD_PLANO_TRABALHO_ATIVIDADE" NUMBER NOT NULL ENABLE, 
	"DESCRICAO_RESULTADO" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"DESCRICAO_ARTEFATO" VARCHAR2(2000 CHAR), 
	"COD_USUARIO" NUMBER NOT NULL ENABLE, 
	"DATA_CRIACAO" DATE NOT NULL ENABLE, 
	"IND_ESFORCO" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_EXECUCAO_FK" PRIMARY KEY ("COD_PLANO_TRABALHO_ATIVIDADE_EXECUCAO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_TRABALHO_COMENTARIO" 
   (	"COD_PLANO_TRABALHO_COMENTARIO" NUMBER NOT NULL ENABLE, 
	"COD_PLANO_TRABALHO" NUMBER NOT NULL ENABLE, 
	"IND_TIPO_COMENTARIO" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"DATA_CRIACAO" DATE NOT NULL ENABLE, 
	"COD_USUARIO" NUMBER NOT NULL ENABLE, 
	"COMENTARIO" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"IND_SITUACAO_COMENTARIO" VARCHAR2(1) DEFAULT 'P' NOT NULL ENABLE, 
	"DATA_CONFIRMACAO" DATE, 
	 CONSTRAINT "PLANO_TRABALHO_COMENTARIO_PK" PRIMARY KEY ("COD_PLANO_TRABALHO_COMENTARIO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "SOLUCAO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"DESCR" VARCHAR2(255) NOT NULL ENABLE, 
	"SIGLA" VARCHAR2(10), 
	"DESCR_COMPLETA" VARCHAR2(32767), 
	"VERSAO" VARCHAR2(10), 
	"ID_SGBD" VARCHAR2(25), 
	"ID_LINGUAGEM" VARCHAR2(25), 
	"IMAGEM" BLOB, 
	"IMAGEM_MIME_TYPE" VARCHAR2(255), 
	"FRAMEWORK" VARCHAR2(25), 
	"ID_USUARIO" NUMBER, 
	"DATA_CRIACAO" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	 CONSTRAINT "SOLUCAO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "SOLUCAO_UK" UNIQUE ("SIGLA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "ACAO" 
   (	"COD_ACAO" NUMBER NOT NULL ENABLE, 
	"DESCR_ACAO" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "ACAO_PK" PRIMARY KEY ("COD_ACAO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CONFIGURACAO" 
   (	"PARAMETRO" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	"VALOR" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "CONFIGURACAO_PK" PRIMARY KEY ("PARAMETRO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DIA_SEMANA" 
   (	"COD_DIA_SEMANA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "DIA_SEMANA_PK" PRIMARY KEY ("COD_DIA_SEMANA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "INDICADOR" 
   (	"COD_INDICADOR" NUMBER NOT NULL ENABLE, 
	"SIGLA_INDICADOR" VARCHAR2(50), 
	"NOME_INDICADOR" VARCHAR2(2000), 
	"FINALIDADE" VARCHAR2(2000), 
	"OBJETIVO" NUMBER, 
	"TIPO_PLANO" NUMBER, 
	"PESO" NUMBER, 
	"DATA_INICIO_CICLO" DATE, 
	"DATA_FIM_CICLO" DATE, 
	"CICLO" NUMBER, 
	"META_ESTRATEGICA" NUMBER, 
	"ACOMPANHAMENTO_EXECUCAO" NUMBER, 
	"PERCENTUAL_EXECUCAO" NUMBER, 
	"PRIMEIRO_ANO" NUMBER(4,0), 
	"SEGUNDO_ANO" NUMBER(4,0), 
	"TERCEIRO_ANO" NUMBER(4,0), 
	"QUARTO_ANO" NUMBER(4,0), 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A', 
	"COD_UORG" NUMBER, 
	"COD_OBJETIVO" NUMBER, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	 CONSTRAINT "INDICADOR_PK" PRIMARY KEY ("COD_INDICADOR")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "INTEGRACAO_API" 
   (	"COD" NUMBER DEFAULT "WKSP_HEFESTO"."INTEGRACAO_API_SEQ"."NEXTVAL" NOT NULL ENABLE, 
	"API" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"PROCESSO" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CHAVE" NUMBER NOT NULL ENABLE, 
	"DATA_CRIACAO" DATE DEFAULT LOCALTIMESTAMP NOT NULL ENABLE, 
	"DATA_ENVIO" DATE, 
	"STATUS_CODE" NUMBER, 
	 CONSTRAINT "INTEGRACAO_API_PK" PRIMARY KEY ("COD")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "LOG_REGISTRO" 
   (	"LOG_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"TABLE_NAME" VARCHAR2(1000), 
	"COD_TABLE" NUMBER, 
	"USER_NAME" VARCHAR2(100), 
	"USER_APP" VARCHAR2(100), 
	"IP" VARCHAR2(100), 
	"ACTION" VARCHAR2(20), 
	"COLUMM" VARCHAR2(100), 
	"OLD_VALUES" VARCHAR2(100), 
	"NEW_VALUES" VARCHAR2(100), 
	"LOG_MESSAGE" VARCHAR2(1000), 
	"HOST" VARCHAR2(100), 
	"OS_USER" VARCHAR2(100), 
	"MODULE" VARCHAR2(100), 
	"COD_LOG_REGISTRO" NUMBER
   ) ;

  CREATE TABLE "OBJETIVO" 
   (	"COD_OBJETIVO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME_OBJETIVO" VARCHAR2(200) NOT NULL ENABLE, 
	"COD_DISPLAY" NUMBER, 
	"ORDEM_OBJETIVO" NUMBER NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) NOT NULL ENABLE, 
	"COD_PLANO_ESTRATEGICO_FK" NUMBER, 
	"COD_PERSPECTIVA_FK" NUMBER, 
	"JUSTIFICATIVA" VARCHAR2(255), 
	 CONSTRAINT "OBJETIVO_PK" PRIMARY KEY ("COD_OBJETIVO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "OCORRENCIA" 
   (	"COD" NUMBER DEFAULT "WKSP_HEFESTO"."OCORRENCIA_SEQ"."NEXTVAL" NOT NULL ENABLE, 
	"COD_SERVIDOR_FK" NUMBER NOT NULL ENABLE, 
	"COD_TIPO_OCORRENCIA_FK" NUMBER NOT NULL ENABLE, 
	"DATA_INICIO" DATE NOT NULL ENABLE, 
	"DATA_FIM" DATE NOT NULL ENABLE, 
	"IND_DURACAO_HORAS" NUMBER, 
	"TIPO_DEBITO" NUMBER, 
	"DESCRICAO" VARCHAR2(255), 
	"COD_USUARIO_FK" NUMBER NOT NULL ENABLE, 
	"DATA_CRIACAO" DATE DEFAULT localtimestamp NOT NULL ENABLE, 
	"MES_LIMITE_COMPENSACAO" NUMBER, 
	 CONSTRAINT "OCORRENCIA_PK" PRIMARY KEY ("COD")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PAIS" 
   (	"COD_PAIS" NUMBER NOT NULL ENABLE, 
	"SIGLA_PAIS" VARCHAR2(2 CHAR) NOT NULL ENABLE, 
	"NOME_PAIS" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "PAIS_PK" PRIMARY KEY ("COD_PAIS")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PAIS_UNIQ" UNIQUE ("SIGLA_PAIS")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PERFIL" 
   (	"COD_PERFIL" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME_PERFIL" VARCHAR2(2000 CHAR) NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A', 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	"COD_UORG_FK" VARCHAR2(2000), 
	 CONSTRAINT "PERFIL_PK" PRIMARY KEY ("COD_PERFIL")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PERFIL_CON" UNIQUE ("NOME_PERFIL")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PERFIL_ACAO" 
   (	"NOME_ACAO" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"COD_PERFIL_ACAO" VARCHAR2(3), 
	 CONSTRAINT "PERIFL_ACAO_PK" PRIMARY KEY ("COD_PERFIL_ACAO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PERFIL_CONTROLE_ACESSO" 
   (	"COD_PERFIL_CONTROLE_ACESSO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"COD_PERFIL_FK" NUMBER NOT NULL ENABLE, 
	"COD_PAGE" NUMBER, 
	"ACAO" VARCHAR2(100), 
	 CONSTRAINT "PERFIL_CONTROLE_ACESSO_PK" PRIMARY KEY ("COD_PERFIL_CONTROLE_ACESSO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PERFIL_GERENCIA_ACESSO" 
   (	"COD_PERFIL_GERENCIA_ACESSO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"COD_USUARIO_FK" NUMBER NOT NULL ENABLE, 
	"COD_PERFIL_FK" NUMBER NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A' NOT NULL ENABLE, 
	"COD_UORG_FK" NUMBER NOT NULL ENABLE, 
	"JUSTIFICATIVA" VARCHAR2(255), 
	 CONSTRAINT "PERFIL_GERENCIA_ACESSO_PK" PRIMARY KEY ("COD_PERFIL_GERENCIA_ACESSO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PERFIL_PAGINA" 
   (	"COD_PERFIL_PAGINA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME_PAGINA" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"COD_PERFIL_ACAO_FK" VARCHAR2(1000), 
	 CONSTRAINT "PERFIL_PAGINA_PK" PRIMARY KEY ("COD_PERFIL_PAGINA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PERSPECTIVA" 
   (	"COD_PERSPECTIVA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME_PERSPECTIVA" VARCHAR2(100) NOT NULL ENABLE, 
	"ORDEM_PERSPECTIVA" NUMBER NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) NOT NULL ENABLE, 
	"COD_PLANO_ESTRATEGICO_FK" NUMBER, 
	"JUSTIFICATIVA" VARCHAR2(255), 
	 CONSTRAINT "PERSPECTIVA_CON" PRIMARY KEY ("COD_PERSPECTIVA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PESSOA_FISICA" 
   (	"COD_PESSOA_FISICA" NUMBER NOT NULL ENABLE, 
	"NUM_CPF" CHAR(11), 
	"NOME_PESSOA_FISICA" VARCHAR2(100), 
	"NOME_MAE" VARCHAR2(100), 
	"NOME_SOCIAL" VARCHAR2(100), 
	"NUM_TELEFONE" NUMBER, 
	"EMAIL_PESSOA_FISICA" VARCHAR2(50), 
	"DATA_NASCIMENTO" DATE, 
	"COD_MUNICIPIO_NATURALIDADE" NUMBER, 
	"UF_MUNICIPIO_NATURALIDADE" CHAR(2), 
	"COD_PAIS_NATURALIDADE" NUMBER, 
	"IND_SEXO" CHAR(1), 
	"TIPO_LOGRADOURO_RESIDENCIA" VARCHAR2(15), 
	"NOME_LOGRADOURO_RESIDENCIA" VARCHAR2(100), 
	"NUM_LOGRADOURO_RESIDENCIA" NUMBER, 
	"COMP_LOGRADOURO_RESIDENCIA" VARCHAR2(200), 
	"CEP_MUNICIPIO_NATURALIDADE" VARCHAR2(10), 
	"BAIRRO_LOGRADOURO_RESIDENCIA" VARCHAR2(200), 
	"UF_MUNICIPIO_RESIDENCIA" CHAR(2), 
	"SITUACAO_CADASTRAL" CHAR(2)
   ) ;
  CREATE UNIQUE INDEX "XPKPESSOA_FISICA" ON "PESSOA_FISICA" ("COD_PESSOA_FISICA") 
  ;
ALTER TABLE "PESSOA_FISICA" ADD CONSTRAINT "XPKPESSOA_FISICA" PRIMARY KEY ("COD_PESSOA_FISICA")
  USING INDEX "XPKPESSOA_FISICA"  ENABLE;

  CREATE TABLE "PLANO" 
   (	"COD_PLANO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCRICAO_PLANO" VARCHAR2(2000 CHAR) NOT NULL ENABLE, 
	"COD_UORG" NUMBER NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A', 
	"SITUACAO" NUMBER, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	"JUSTIFICATIVA_RETIFICACAO" VARCHAR2(4000), 
	"ANO" DATE, 
	"COD_SEMESTRE_FK" NUMBER, 
	 CONSTRAINT "PLANO_PK" PRIMARY KEY ("COD_PLANO")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PLANO_DESCRICAO_PLANO_UNIQ" UNIQUE ("DESCRICAO_PLANO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_ENTREGA" 
   (	"MODELO" VARCHAR2(100 CHAR), 
	"COD_PLANO_ENTREGA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCRICAO_ENTREGA" VARCHAR2(2000 CHAR) NOT NULL DISABLE, 
	"DATA_INICIO" DATE NOT NULL ENABLE, 
	"DATA_FIM" DATE NOT NULL ENABLE, 
	"CATEGORIA" NUMBER, 
	"COD_UORG" NUMBER, 
	"COD_PROJETO" NUMBER, 
	"PRIMEIRO_NIVEL_MACROPROCESSO" NUMBER, 
	"SEGUNDO_NIVEL" NUMBER, 
	"TERCEIRO_NIVEL" NUMBER, 
	"RESULTADO_SOCIEDADE" VARCHAR2(100 CHAR), 
	"QUARTO_NIVEL" VARCHAR2(100 CHAR), 
	"DEMANDANTE" NUMBER NOT NULL ENABLE, 
	"DESTINATARIO" NUMBER NOT NULL ENABLE, 
	"TIPO_META" NUMBER NOT NULL ENABLE, 
	"META" NUMBER NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A' NOT NULL ENABLE, 
	"COD_PLANO" NUMBER, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	"SELECIONE_ENTREGA" NUMBER, 
	 CONSTRAINT "PLANO_ENTREGA_PK" PRIMARY KEY ("COD_PLANO_ENTREGA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_ENTREGA_SEMESTRE" 
   (	"COD_SEMESTRE" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME_SEMESTRE" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"INICIO_SEMESTRE" VARCHAR2(10), 
	"FIM_SEMESTRE" VARCHAR2(10), 
	 CONSTRAINT "SEMESTRE_PK" PRIMARY KEY ("COD_SEMESTRE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_ESTRATEGICO" 
   (	"COD_PLANO_ESTRATEGICO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DATA_INICIO_VIGENCIA" DATE NOT NULL ENABLE, 
	"DATA_FIM_VIGENCIA" DATE NOT NULL ENABLE, 
	"MISSAO" VARCHAR2(2000) NOT NULL ENABLE, 
	"VISAO" VARCHAR2(2000), 
	"VALORES" VARCHAR2(150), 
	"NOME_PLANO_ESTRATEGICO" VARCHAR2(100), 
	"ORDEM_PLANO_ESTRATEGICO" VARCHAR2(3), 
	"NOME_OBJ" VARCHAR2(100), 
	"PERSPECTIVA" VARCHAR2(100), 
	"ORDEM_OBJ" VARCHAR2(3), 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A', 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	 CONSTRAINT "PLANO_ESTRATEGICO_PK" PRIMARY KEY ("COD_PLANO_ESTRATEGICO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_ESTRATEGICO_OBJETIVOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ID_PLANO_ESTRATEGICO" NUMBER NOT NULL ENABLE, 
	"ID_PLANO_ESTRATEGICO_PERSPECTIVAS" NUMBER NOT NULL ENABLE, 
	"NOME" VARCHAR2(2000) NOT NULL ENABLE, 
	"ID_DISPLAY" VARCHAR2(100) NOT NULL ENABLE, 
	"ORDEM" NUMBER NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) NOT NULL ENABLE, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	 CONSTRAINT "PLANO_ESTRATEGICO_OBJETIVOS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PLANO_ESTRATEGICO_OBJETIVOS_ORDEM_CON" UNIQUE ("ID_PLANO_ESTRATEGICO", "ORDEM")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_ESTRATEGICO_PERSPECTIVAS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ID_PLANO_ESTRATEGICO" NUMBER NOT NULL ENABLE, 
	"NOME" VARCHAR2(2000) NOT NULL ENABLE, 
	"ORDEM" NUMBER NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) NOT NULL ENABLE, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	 CONSTRAINT "PLANO_ESTRATEGICO_PERSPECTIVAS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PLANO_ESTRATEGICO_PERSPECTIVAS_OREDEM_CON" UNIQUE ("ID_PLANO_ESTRATEGICO", "ORDEM")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_TRABALHO" 
   (	"COD_PLANO_TRABALHO" NUMBER NOT NULL ENABLE, 
	"NOME_PLANO_TRABALHO" VARCHAR2(2000 CHAR) NOT NULL ENABLE, 
	"COD_SERVIDOR" NUMBER NOT NULL ENABLE, 
	"COD_UORG" NUMBER NOT NULL ENABLE, 
	"DATA_INICIO" DATE NOT NULL ENABLE, 
	"DATA_FIM" DATE NOT NULL ENABLE, 
	"IND_CARGA_HORARIA_MINIMA" NUMBER NOT NULL ENABLE, 
	"IND_CARGA_HORARIA_MAXIMA" NUMBER, 
	"IND_PLANO_MODELO" VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL ENABLE, 
	"IND_PLANO_SITUACAO" VARCHAR2(2 CHAR) DEFAULT 'M' NOT NULL ENABLE, 
	"DATA_CRIACAO" DATE DEFAULT SYSDATE-3/24 NOT NULL ENABLE, 
	"USUARIO_CRIACAO" VARCHAR2(2000 CHAR) NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A' NOT NULL ENABLE, 
	"APELIDO_PLANO_TRABALHO" VARCHAR2(2000), 
	"MES_PLANO_TRABALHO" NUMBER NOT NULL ENABLE, 
	"ANO_PLANO_TRABALHO" NUMBER NOT NULL ENABLE, 
	"DESCRICAO_JUSTIFICATIVA_INATIVACAO" VARCHAR2(4000), 
	"RESULTADO_AVALIACAO_PLANO" VARCHAR2(2), 
	"IND_CARGA_HORARIA_DEVIDA" NUMBER, 
	"IND_DEBITO_VENC_MES" NUMBER, 
	 CONSTRAINT "PLANO_TRABALHO_PK" PRIMARY KEY ("COD_PLANO_TRABALHO")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PLANO_TRABALHO_UNIQ" UNIQUE ("COD_SERVIDOR", "COD_UORG", "MES_PLANO_TRABALHO", "ANO_PLANO_TRABALHO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_TRABALHO_ATIVIDADE" 
   (	"COD_PLANO_TRABALHO" NUMBER NOT NULL ENABLE, 
	"COD_ATIVIDADE" NUMBER NOT NULL ENABLE, 
	"COD_PLANO_ENTREGA" NUMBER, 
	"COD_UORG" NUMBER NOT NULL ENABLE, 
	"IND_TIPO_ATIVIDADE" VARCHAR2(3 CHAR) NOT NULL ENABLE, 
	"IND_ESFORCO" NUMBER NOT NULL ENABLE, 
	"DATA_PRAZO" DATE NOT NULL ENABLE, 
	"DESCRICAO_ATIVIDADE" VARCHAR2(2000 CHAR), 
	"DATA_CRIACAO" DATE DEFAULT SYSDATE-3/24 NOT NULL ENABLE, 
	"USUARIO_CRIACAO" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"IND_SITUACAO" VARCHAR2(1) DEFAULT 'P' NOT NULL ENABLE, 
	"CATEGORIA" NUMBER, 
	"COD_MENCAO" VARCHAR2(1), 
	"AVALIACAO_JUSTIFICATIVA" VARCHAR2(2000), 
	"AVALIACAO_USUARIO" VARCHAR2(255), 
	"AVALIACAO_COMPENSACAO" NUMBER, 
	"AVALIACAO_RESULTADO" NUMBER, 
	"AVALIACAO_DATA" DATE, 
	"ESFORCO_SUGERIDO" NUMBER, 
	"COD_PLANO_TRABALHO_ATIVIDADE_TIPO_FK" NUMBER, 
	"COD_DESCREVER_SELEC_ATIVIDADE" VARCHAR2(1), 
	"PRIMEIRO_NIVEL_CADEIA" NUMBER, 
	"SEGUNDO_NIVEL_CADEIA" NUMBER, 
	"TERCEIRO_NIVEL_CADEIA" NUMBER, 
	"DATA_INICIO_EXECUCAO" DATE, 
	"DATA_FIM_EXECUCAO" DATE, 
	 CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_PK" PRIMARY KEY ("COD_ATIVIDADE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_TRABALHO_ATIVIDADE_TIPO" 
   (	"COD_PLANO_TRABALHO_ATIVIDADE_TIPO" NUMBER, 
	"NOME_ATIVIDADE" VARCHAR2(200), 
	"HORA_PACTUADA" NUMBER, 
	"SIGLA_UORG" VARCHAR2(10), 
	 CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_TIPO_FK" PRIMARY KEY ("COD_PLANO_TRABALHO_ATIVIDADE_TIPO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PLANO_TRABALHO_ATVIVIDADE_MENCAO" 
   (	"COD_MENCAO" VARCHAR2(2 CHAR) NOT NULL ENABLE, 
	"DESCRICAO_MENCAO" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"PONTUACAO" NUMBER NOT NULL ENABLE, 
	"PONTUACAO_MEDIA_INICIO" NUMBER, 
	"PONTUACAO_MEDIA_FIM" NUMBER, 
	 CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_MENSAO_PK" PRIMARY KEY ("COD_MENCAO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PROJETO" 
   (	"COD_PROJETO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DATA_INICIO_PROJETO" DATE, 
	"DATA_FIM_PROJETO" DATE, 
	"COD_UORG_FK" NUMBER NOT NULL ENABLE, 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A', 
	"TEXTO_OBSERVACAO" VARCHAR2(4000 CHAR), 
	"COD_OBJETIVO" NUMBER NOT NULL ENABLE, 
	"DESCR_PROJETO" VARCHAR2(2000 CHAR), 
	"COD_INDICADOR" NUMBER NOT NULL ENABLE, 
	"COD_PERSPECTIVA" NUMBER NOT NULL ENABLE, 
	"NUM_SEI" NUMBER, 
	"NOME_GERENTE" VARCHAR2(2000), 
	"PRIMEIRO_NIVEL_UORG" VARCHAR2(10), 
	"SEGUNDO_NIVEL_UORG" VARCHAR2(10), 
	"PRIMEIRO_NIVEL_CADEIA" NUMBER, 
	"SEGUNDO_NIVEL_CADEIA" NUMBER, 
	"TERCEIRO_NIVEL_CADEIA" NUMBER, 
	"RESULTADO_SOCIEDADE" NUMBER, 
	"COD_MACROPROCESSO" NUMBER, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	"COD_SITUACAO_REGISTRO_FK" NUMBER, 
	"JUSTIFICATIVA_RETIFICACAO" VARCHAR2(4000), 
	"COD_GERENTE" NUMBER, 
	 CONSTRAINT "PROJETO_PK" PRIMARY KEY ("COD_PROJETO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PROJETO_TAREFA" 
   (	"COD_PROJETO_TAREFA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCR_PROJETO_TAREFA" VARCHAR2(2000 CHAR), 
	"NOME_RESPONSAVEL_TECNICO" VARCHAR2(2000 CHAR), 
	"DATA_INICIO_TAREFA" DATE, 
	"DATA_FIM_TAREFA" DATE, 
	"DURACAO" VARCHAR2(3 CHAR), 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A' NOT NULL ENABLE, 
	"COD_PROJETO_FK" NUMBER NOT NULL ENABLE, 
	"COD_TAREFA_DEPENDENCIA_AR" NUMBER, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	"IND_TAREFA_CONCLUIDA" VARCHAR2(1), 
	"TAREFA_CONCLUIDA_PERCENT" NUMBER, 
	 CONSTRAINT "TAREFA_PK" PRIMARY KEY ("COD_PROJETO_TAREFA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "SITUACAO_REGISTRO" 
   (	"COD_SITUACAO_REGISTRO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SITUACAO" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"COD_PERFIL_FK" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "SITUACAO_REGISTRO_PK" PRIMARY KEY ("COD_SITUACAO_REGISTRO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "SITUACAO_TERMO_CIENCIA" 
   (	"COD_SITUACAO_TERMO_CIENCIA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME" VARCHAR2(50 CHAR), 
	 CONSTRAINT "SITUACAO_TERMO_CIENCIA_PK" PRIMARY KEY ("COD_SITUACAO_TERMO_CIENCIA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "TERMO_CIENCIA" 
   (	"COD_TERMO_CIENCIA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"COD_REGIME_EXECUCAO_FK" NUMBER, 
	"COD_SERVIDOR_FK" NUMBER, 
	"CARGA_HORARIA_DIARIA" NUMBER, 
	"TEMPO_PADRAO_PLANO_TRABALHO" VARCHAR2(100 CHAR), 
	"PRAZO_CONVOCACAO" NUMBER, 
	"DATA_INICIO" DATE, 
	"DATA_FIM" DATE, 
	"NUMERO_PROCESSO" VARCHAR2(100 CHAR), 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A', 
	"SITUACAO" NUMBER, 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	"DE_ACORDO" VARCHAR2(1), 
	"AVALIACAO" VARCHAR2(2000), 
	"DE_ACORDO_SERVIDOR" VARCHAR2(1), 
	"DATA_ASSINATURA" DATE DEFAULT sysdate, 
	 CONSTRAINT "TERMO_CIENCIA_PK" PRIMARY KEY ("COD_TERMO_CIENCIA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "TERMO_CIENCIA_REGIME" 
   (	"COD_REGIME_EXECUCAO" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME" VARCHAR2(50 CHAR), 
	"DESCR_TERMO" VARCHAR2(2500), 
	 CONSTRAINT "TERMO_CIENCIA_OPCOES_PK" PRIMARY KEY ("COD_REGIME_EXECUCAO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "TERMO_CIENCIA_TURNO" 
   (	"COD_TERMO_CIENCIA_TURNO" NUMBER NOT NULL ENABLE, 
	"COD_TERMO_CIENCIA_FK" NUMBER NOT NULL ENABLE, 
	"COD_DIA_SEMANA_FK" NUMBER NOT NULL ENABLE, 
	"HORA_INICIO" TIMESTAMP (6) NOT NULL ENABLE, 
	"HORA_FIM" TIMESTAMP (6) NOT NULL ENABLE
   ) ;

  CREATE TABLE "UORG_SYNC_EXERCICIO_HISTORICO" 
   (	"COD_SERVIDOR" NUMBER, 
	"COD_UORG_EXERCICIO" NUMBER NOT NULL ENABLE, 
	"DATA_INSERT" DATE NOT NULL ENABLE, 
	"DATA_UPDATE" DATE NOT NULL ENABLE, 
	 PRIMARY KEY ("COD_SERVIDOR")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "USUARIO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"NOME" VARCHAR2(2000) NOT NULL ENABLE, 
	"CPF" VARCHAR2(11), 
	"EMAIL" VARCHAR2(2000) NOT NULL ENABLE, 
	"TELEFONE" VARCHAR2(11), 
	"CARGO" VARCHAR2(255), 
	"ID_SECAO" NUMBER, 
	"ID_SOLUCAO" NUMBER, 
	"PERFIL" NUMBER, 
	"IND_ATIVO" VARCHAR2(1) DEFAULT 'A' NOT NULL ENABLE, 
	"SENHA" VARCHAR2(32), 
	"COD_MATRICULA" VARCHAR2(100), 
	"JUSTIFICATIVA" VARCHAR2(4000), 
	"COD_SERVIDOR" NUMBER, 
	 CONSTRAINT "USUARIO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "USUARIO_UK_EMAIL" UNIQUE ("EMAIL")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "USUARIO_SOLUCAO_PERMISSAO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ID_USUARIO" NUMBER NOT NULL ENABLE, 
	"ID_SOLUCAO" NUMBER NOT NULL ENABLE, 
	"PAPEL" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "USUARIO_SOLUCAO_PERMISSAO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "USUARIO_SOLUCAO_PERMISSAO_UK" UNIQUE ("ID_USUARIO", "ID_SOLUCAO", "PAPEL")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "VALOR" 
   (	"COD_VALOR" NUMBER NOT NULL ENABLE, 
	"NOME_VALOR" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"COD_PLANO_ESTRATEGICO_FK" NUMBER
   ) ;

   COMMENT ON TABLE "ACAO"  IS 'BIFROST';

   COMMENT ON COLUMN "CADEIA_VALOR"."COD_CADEIA_VALOR" IS 'ID - primeiro nível';
   COMMENT ON COLUMN "CADEIA_VALOR"."MACROPROCESSO" IS 'Nome do macroprocesso - primeiro nível';
   COMMENT ON COLUMN "CADEIA_VALOR"."DESCR_CADEIA_VALOR" IS 'Explicação do macroprocesso - primeiro nível';
   COMMENT ON COLUMN "CADEIA_VALOR"."IND_ATIVO" IS 'Status do registro';
   COMMENT ON COLUMN "CADEIA_VALOR"."JUSTIFICATIVA" IS 'Justificatica.';
   COMMENT ON TABLE "CADEIA_VALOR"  IS 'HEFESTO';

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_LOG_CADEIA_VALOR" 
AFTER INSERT OR UPDATE OR DELETE ON CADEIA_VALOR
FOR EACH ROW
DECLARE
    V_ACTION VARCHAR2(100);
    V_COLUMN VARCHAR2(100);
    V_TABLE_NAME VARCHAR2(100);
BEGIN

    V_TABLE_NAME := 'CADEIA_VALOR';

    IF INSERTING THEN
        V_ACTION := 'INSERT';
    ELSIF UPDATING THEN
        V_ACTION := 'UPDATE';
    ELSIF DELETING THEN
        V_ACTION := 'DELETE';
    END IF;

     -- REGISTRA 
    IF V_ACTION in ('INSERT','DELETE') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     '',
                        P_COLUMM_LABEL    =>     '',
                        P_OLD_VALUES      =>     '',
                        P_NEW_VALUES      =>     '',
                        P_ID              =>     :NEW.COD_CADEIA_VALOR);

    END IF;


    -- REGISTRA ALTERAÇÕES NO CAMPO MACROPROCESSO
    IF V_ACTION in ('UPDATE') AND NVL(:OLD.MACROPROCESSO,' ') <> NVL(:NEW.MACROPROCESSO,' ') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'MACROPROCESSO',
                        P_COLUMM_LABEL    =>     'Macroprocesso:',
                        P_OLD_VALUES      =>     :OLD.MACROPROCESSO,
                        P_NEW_VALUES      =>     :NEW.MACROPROCESSO,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR);

    END IF;


     -- REGISTRA ALTERAÇÕES NO CAMPO DESCRICAO
    IF V_ACTION in ('UPDATE') AND NVL(:OLD.DESCR_CADEIA_VALOR,' ') <> NVL(:NEW.DESCR_CADEIA_VALOR,' ') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'DESCR_CADEIA_VALOR',
                        P_COLUMM_LABEL    =>     'Descrição:',
                        P_OLD_VALUES      =>     :OLD.DESCR_CADEIA_VALOR,
                        P_NEW_VALUES      =>     :NEW.DESCR_CADEIA_VALOR,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO STATUS
    IF V_ACTION in ('UPDATE') AND :OLD.IND_ATIVO <> :NEW.IND_ATIVO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'IND_ATIVO',
                        P_COLUMM_LABEL    =>     'Status:',
                        P_OLD_VALUES      =>     (CASE WHEN :OLD.IND_ATIVO = 'A' THEN 'ATIVO' ELSE 'INATIVO' END),
                        P_NEW_VALUES      =>     (CASE WHEN :NEW.IND_ATIVO = 'A' THEN 'ATIVO' ELSE 'INATIVO' END),
                        P_ID              =>     :NEW.COD_CADEIA_VALOR);

    END IF;


    -- REGISTRA ALTERAÇÕES NO CAMPO JUSTIFICATIVA
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.JUSTIFICATIVA, ' ') <> :NEW.JUSTIFICATIVA THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'JUSTIFICATIVA',
                        P_COLUMM_LABEL    =>     'Justificativa:',
                        P_OLD_VALUES      =>     :OLD.JUSTIFICATIVA,
                        P_NEW_VALUES      =>     :NEW.JUSTIFICATIVA,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR);

    END IF;



END;
/
ALTER TRIGGER "TRG_LOG_CADEIA_VALOR" ENABLE;

  ALTER TABLE "CADEIA_VALOR_NIVEL2" ADD CONSTRAINT "CADEIA_VALOR_FK" FOREIGN KEY ("COD_CADEIA_VALOR_FK")
	  REFERENCES "CADEIA_VALOR" ("COD_CADEIA_VALOR") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_LOG_CADEIA_VALOR_NIVEL2" 
AFTER INSERT OR UPDATE OR DELETE ON CADEIA_VALOR_NIVEL2
FOR EACH ROW
DECLARE
    V_ACTION VARCHAR2(100);
    V_COLUMN VARCHAR2(100);
    V_TABLE_NAME VARCHAR2(100);
BEGIN

    V_TABLE_NAME := 'CADEIA_VALOR_NIVEL2';

    IF INSERTING THEN
        V_ACTION := 'INSERT';
    ELSIF UPDATING THEN
        V_ACTION := 'UPDATE';
    ELSIF DELETING THEN
        V_ACTION := 'DELETE';
    END IF;

     -- REGISTRA 
    IF V_ACTION in ('INSERT','DELETE') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     '',
                        P_COLUMM_LABEL    =>     '',
                        P_OLD_VALUES      =>     '',
                        P_NEW_VALUES      =>     '',
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL2);

    END IF;


    -- REGISTRA ALTERAÇÕES NO CAMPO NOME
    IF V_ACTION in ('UPDATE') AND nvl(:OLD.NOME,' ') <> nvl(:NEW.NOME,' ') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'NOME',
                        P_COLUMM_LABEL    =>     'Nome:',
                        P_OLD_VALUES      =>     :OLD.NOME,
                        P_NEW_VALUES      =>     :NEW.NOME,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL2);

    END IF;


     -- REGISTRA ALTERAÇÕES NO CAMPO VALOR
    IF V_ACTION in ('UPDATE') AND nvl(:OLD.VALOR,' ') <> nvl(:NEW.VALOR,' ') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'VALOR',
                        P_COLUMM_LABEL    =>     'Valor:',
                        P_OLD_VALUES      =>     :OLD.VALOR,
                        P_NEW_VALUES      =>     :NEW.VALOR,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL2);

    END IF;


         -- REGISTRA ALTERAÇÕES NO CAMPO DESCR
    IF V_ACTION in ('UPDATE') AND nvl(:OLD.DESCR,' ') <> nvl(:NEW.DESCR,' ') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'DESCR',
                        P_COLUMM_LABEL    =>     'Descrição:',
                        P_OLD_VALUES      =>     :OLD.DESCR,
                        P_NEW_VALUES      =>     :NEW.DESCR,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL2);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO STATUS
    IF V_ACTION in ('UPDATE') AND :OLD.IND_ATIVO <> :NEW.IND_ATIVO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'IND_ATIVO',
                        P_COLUMM_LABEL    =>     'Status:',
                        P_OLD_VALUES      =>     (CASE WHEN :OLD.IND_ATIVO = 'A' THEN 'ATIVO' ELSE 'INATIVO' END),
                        P_NEW_VALUES      =>     (CASE WHEN :NEW.IND_ATIVO = 'A' THEN 'ATIVO' ELSE 'INATIVO' END),
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL2);

    END IF;

        -- REGISTRA ALTERAÇÕES NO CAMPO JUSTIFICATIVA
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.JUSTIFICATIVA, ' ') <> :NEW.JUSTIFICATIVA THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'JUSTIFICATIVA',
                        P_COLUMM_LABEL    =>     'Justificativa: ',
                        P_OLD_VALUES      =>     :OLD.JUSTIFICATIVA,
                        P_NEW_VALUES      =>     :NEW.JUSTIFICATIVA,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL2);

    END IF;




END;
/
ALTER TRIGGER "TRG_LOG_CADEIA_VALOR_NIVEL2" ENABLE;

  ALTER TABLE "CADEIA_VALOR_NIVEL3" ADD CONSTRAINT "CADEIA_VALOR_NIVEL2_FK" FOREIGN KEY ("COD_CADEIA_VALOR_NIVEL2_FK")
	  REFERENCES "CADEIA_VALOR_NIVEL2" ("COD_CADEIA_VALOR_NIVEL2") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_LOG_CADEIA_VALOR_NIVEL3" 
AFTER INSERT OR UPDATE OR DELETE ON CADEIA_VALOR_NIVEL3
FOR EACH ROW
DECLARE
    V_ACTION VARCHAR2(100);
    V_COLUMN VARCHAR2(100);
    V_TABLE_NAME VARCHAR2(100);
BEGIN

    V_TABLE_NAME := 'CADEIA_VALOR_NIVEL3';

    IF INSERTING THEN
        V_ACTION := 'INSERT';
    ELSIF UPDATING THEN
        V_ACTION := 'UPDATE';
    ELSIF DELETING THEN
        V_ACTION := 'DELETE';
    END IF;

     -- REGISTRA 
    IF V_ACTION in ('INSERT','DELETE') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     '',
                        P_COLUMM_LABEL    =>     '',
                        P_OLD_VALUES      =>     '',
                        P_NEW_VALUES      =>     '',
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL3);

    END IF;


    -- REGISTRA ALTERAÇÕES NO CAMPO NOME
    IF V_ACTION in ('UPDATE') AND nvl(:OLD.NOME,' ') <> nvl(:NEW.NOME,' ') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'NOME',
                        P_COLUMM_LABEL    =>     'Nome:',
                        P_OLD_VALUES      =>     :OLD.NOME,
                        P_NEW_VALUES      =>     :NEW.NOME,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL3);

    END IF;


         -- REGISTRA ALTERAÇÕES NO CAMPO DESCR
    IF V_ACTION in ('UPDATE') AND nvl(:OLD.DESCR,' ') <> nvl(:NEW.DESCR,' ') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'DESCR',
                        P_COLUMM_LABEL    =>     'Descrição:',
                        P_OLD_VALUES      =>     :OLD.DESCR,
                        P_NEW_VALUES      =>     :NEW.DESCR,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL3);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO STATUS
    IF V_ACTION in ('UPDATE') AND :OLD.IND_ATIVO <> :NEW.IND_ATIVO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'IND_ATIVO',
                        P_COLUMM_LABEL    =>     'Status:',
                        P_OLD_VALUES      =>     (CASE WHEN :OLD.IND_ATIVO = 'A' THEN 'ATIVO' ELSE 'INATIVO' END),
                        P_NEW_VALUES      =>     (CASE WHEN :NEW.IND_ATIVO = 'A' THEN 'ATIVO' ELSE 'INATIVO' END),
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL3);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO JUSTIFICATIVA
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.JUSTIFICATIVA, ' ') <> :NEW.JUSTIFICATIVA THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'JUSTIFICATIVA',
                        P_COLUMM_LABEL    =>     'Justificativa:',
                        P_OLD_VALUES      =>     :OLD.JUSTIFICATIVA,
                        P_NEW_VALUES      =>     :NEW.JUSTIFICATIVA,
                        P_ID              =>     :NEW.COD_CADEIA_VALOR_NIVEL3);

    END IF;



END;
/
ALTER TRIGGER "TRG_LOG_CADEIA_VALOR_NIVEL3" ENABLE;

   COMMENT ON COLUMN "CONFIGURACAO"."PARAMETRO" IS 'Parametros para retornar os velores desejados.';
   COMMENT ON COLUMN "CONFIGURACAO"."VALOR" IS 'Valores dos parametros.';
   COMMENT ON TABLE "CONFIGURACAO"  IS 'HEFESTO';

   COMMENT ON TABLE "EMAIL"  IS 'HEFESTO';

   COMMENT ON COLUMN "FERIADO"."COD_FERIADO" IS 'ID do feriado cadastrado.';
   COMMENT ON COLUMN "FERIADO"."TIPO_FERIADO" IS 'Tipo de feriado. "F" para Fixo e "M" para Móvel.';
   COMMENT ON COLUMN "FERIADO"."DATA_FIXA" IS 'Data do feriado quando TIPO_FERIADO for Fixo.';
   COMMENT ON COLUMN "FERIADO"."DATA_MOVEL" IS 'Data do feriado quando TIPO_FERIADO for Móvel.';
   COMMENT ON COLUMN "FERIADO"."DESCRICAO" IS 'Descrição do feriado.';
   COMMENT ON COLUMN "FERIADO"."CATEGORIA" IS 'Categoria. "F" para Feriado e "P" para Ponto Facultativo.';
   COMMENT ON COLUMN "FERIADO"."MEIO_PERIODO" IS 'Meio período, caso a categoria seja Ponto Facultativo. "Y" para marcado';
   COMMENT ON COLUMN "FERIADO"."TIPO_JURISDICAO" IS 'Tipo de jurisdição do feriado. "N" para Nacional, "E" para Estadual, "M" para Municipal.';
   COMMENT ON COLUMN "FERIADO"."COD_UORG_FK" IS 'Código da UOGR que contemplará o feriado.';
   COMMENT ON COLUMN "FERIADO"."IND_ATIVO" IS 'Se o feriado cadastrado está Ativo "A" ou Inativo "I".';
   COMMENT ON COLUMN "FERIADO"."JUSTIFICATIVA" IS 'Justificativa para inativação do feriado.';
   COMMENT ON TABLE "FERIADO"  IS 'Tabela de feriados.';

  ALTER TABLE "INDICADOR" ADD CONSTRAINT "INDICADOR_FK_OBJETIVO" FOREIGN KEY ("OBJETIVO")
	  REFERENCES "OBJETIVO" ("COD_OBJETIVO") ENABLE;
  ALTER TABLE "INDICADOR" ADD CONSTRAINT "INDICADOR_FK_BAR_UORG" FOREIGN KEY ("COD_UORG")
	  REFERENCES "UORG" ("COD") ENABLE;

  ALTER TABLE "INDICADOR_ANEXO" ADD CONSTRAINT "INDICADOR_ANEXO_FK_INDICADOR" FOREIGN KEY ("COD_INDICADOR_FK")
	  REFERENCES "INDICADOR" ("COD_INDICADOR") ENABLE;

  CREATE INDEX "INTEGRACAO_API_IDX" ON "INTEGRACAO_API" ("CHAVE", "PROCESSO") 
  ;

  CREATE INDEX "LOG_API_IDX" ON "LOG_API" ("PROCESSO", "CHAVE_REGISTRO") 
  ;

  CREATE INDEX "LOG_REGISTRO_PK" ON "LOG_REGISTRO" ("COD_LOG_REGISTRO") 
  ;

  ALTER TABLE "OBJETIVO" ADD CONSTRAINT "OBJETIVO_FK_PLANO_ESTRATEGICO" FOREIGN KEY ("COD_PLANO_ESTRATEGICO_FK")
	  REFERENCES "PLANO_ESTRATEGICO" ("COD_PLANO_ESTRATEGICO") ON DELETE SET NULL ENABLE;
  ALTER TABLE "OBJETIVO" ADD CONSTRAINT "OBJETIVO_FK_PERSPECTIVA" FOREIGN KEY ("COD_PERSPECTIVA_FK")
	  REFERENCES "PERSPECTIVA" ("COD_PERSPECTIVA") ENABLE;

  ALTER TABLE "OCORRENCIA" ADD CONSTRAINT "OCORRENCIA_FK_SERVIDOR" FOREIGN KEY ("COD_SERVIDOR_FK")
	  REFERENCES "SERVIDOR" ("COD") ENABLE;
  ALTER TABLE "OCORRENCIA" ADD CONSTRAINT "OCORRENCIA_FK_USUARIO" FOREIGN KEY ("COD_USUARIO_FK")
	  REFERENCES "USUARIO" ("ID") ENABLE;
  ALTER TABLE "OCORRENCIA" ADD CONSTRAINT "OCORRENCIA_FK_TIPO_OCORRENCIA" FOREIGN KEY ("COD_TIPO_OCORRENCIA_FK")
	  REFERENCES "TIPO_OCORRENCIA" ("COD") ENABLE;

  ALTER TABLE "PERFIL_CONTROLE_ACESSO" ADD CONSTRAINT "CONTROLE_ACESSO_FK_PERFIL" FOREIGN KEY ("COD_PERFIL_FK")
	  REFERENCES "PERFIL" ("COD_PERFIL") ENABLE;
  ALTER TABLE "PERFIL_CONTROLE_ACESSO" ADD CONSTRAINT "PERFIL_CONTROLE_ACESSO_FK_PERFIL_PAGINA" FOREIGN KEY ("COD_PAGE")
	  REFERENCES "PERFIL_PAGINA" ("COD_PERFIL_PAGINA") ENABLE;

  ALTER TABLE "PERFIL_GERENCIA_ACESSO" ADD CONSTRAINT "PERFIL_GERENCIA_ACESSO_FK_PERFIL" FOREIGN KEY ("COD_PERFIL_FK")
	  REFERENCES "PERFIL" ("COD_PERFIL") ENABLE;
  ALTER TABLE "PERFIL_GERENCIA_ACESSO" ADD CONSTRAINT "PERFIL_GERENCIA_ACESSO_FK_BAR_UORG" FOREIGN KEY ("COD_UORG_FK")
	  REFERENCES "UORG" ("COD") ENABLE;

  ALTER TABLE "PERSPECTIVA" ADD CONSTRAINT "PERSPECTIVA_FK_PLANO_ESTRATEGICO" FOREIGN KEY ("COD_PLANO_ESTRATEGICO_FK")
	  REFERENCES "PLANO_ESTRATEGICO" ("COD_PLANO_ESTRATEGICO") ON DELETE SET NULL ENABLE;

  ALTER TABLE "PLANO" ADD CONSTRAINT "PLANO_FK_SITUACAO_REGISTRO" FOREIGN KEY ("SITUACAO")
	  REFERENCES "SITUACAO_REGISTRO" ("COD_SITUACAO_REGISTRO") ENABLE;
  ALTER TABLE "PLANO" ADD CONSTRAINT "PLANO_FK_ENTREGA_SEMESTRE" FOREIGN KEY ("COD_SEMESTRE_FK")
	  REFERENCES "PLANO_ENTREGA_SEMESTRE" ("COD_SEMESTRE") ENABLE;
  ALTER TABLE "PLANO" ADD CONSTRAINT "PLANO_FK_BAR_UORG" FOREIGN KEY ("COD_UORG")
	  REFERENCES "UORG" ("COD") ENABLE;

  ALTER TABLE "PLANO_ENTREGA" ADD CONSTRAINT "PLANO_ENTREGA_FK_PLANO" FOREIGN KEY ("COD_PLANO")
	  REFERENCES "PLANO" ("COD_PLANO") ENABLE;
  ALTER TABLE "PLANO_ENTREGA" ADD CONSTRAINT "PLANO_ENTREGA_FK_PROJETO" FOREIGN KEY ("COD_PROJETO")
	  REFERENCES "PROJETO" ("COD_PROJETO") ENABLE;
  ALTER TABLE "PLANO_ENTREGA" ADD CONSTRAINT "PLANO_ENTREGA_FK_TAREFA" FOREIGN KEY ("SELECIONE_ENTREGA")
	  REFERENCES "PROJETO_TAREFA" ("COD_PROJETO_TAREFA") ENABLE;
  ALTER TABLE "PLANO_ENTREGA" ADD CONSTRAINT "PLANO_ENTREGA_FK_BAR_UORG" FOREIGN KEY ("COD_UORG")
	  REFERENCES "UORG" ("COD") ENABLE;
  ALTER TABLE "PLANO_ENTREGA" ADD CONSTRAINT "PLANO_ENTREGA_FK_BAR_UORG_DESTINATARIO" FOREIGN KEY ("DESTINATARIO")
	  REFERENCES "UORG" ("COD") ENABLE;
  ALTER TABLE "PLANO_ENTREGA" ADD CONSTRAINT "PLANO_ENTREGA_FK_BAR_UORG_DEMANDANTE" FOREIGN KEY ("DEMANDANTE")
	  REFERENCES "UORG" ("COD") ENABLE;

   COMMENT ON COLUMN "PLANO_ENTREGA"."DESCRICAO_ENTREGA" IS 'Descrição da Entrega';
   COMMENT ON COLUMN "PLANO_ENTREGA"."DATA_INICIO" IS 'Data Inicio.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."DATA_FIM" IS 'Data Fim.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."CATEGORIA" IS 'Categoria.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."COD_UORG" IS 'Uorg reponsável pelo projeto.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."COD_PROJETO" IS 'Projetos';
   COMMENT ON COLUMN "PLANO_ENTREGA"."PRIMEIRO_NIVEL_MACROPROCESSO" IS '1 Nivel Macroprocesso:.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."SEGUNDO_NIVEL" IS '2 Nivel.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."TERCEIRO_NIVEL" IS '3 Nível.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."RESULTADO_SOCIEDADE" IS 'Resultado para sociedade.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."QUARTO_NIVEL" IS '4 nivel.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."DEMANDANTE" IS 'Demandante.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."DESTINATARIO" IS 'Destinatario.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."TIPO_META" IS 'Tipo de meta.';
   COMMENT ON COLUMN "PLANO_ENTREGA"."META" IS 'Meta';

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_INTEGRACAO_API_PLANO_ENTREGA" 
AFTER INSERT OR UPDATE ON PLANO_ENTREGA
FOR EACH ROW
DECLARE
--
BEGIN
  --
   PCK_API_MGI.PRC_REGISTRO_INTEGRACAO (P_API         => 'PCK_API_MGI'
                                       ,P_PROCESSO    => 'PLANO_ENTREGA'
                                       ,P_CHAVE       => NVL(:NEW.COD_PLANO, :OLD.COD_PLANO));
  --
END;
/
ALTER TRIGGER "TRG_INTEGRACAO_API_PLANO_ENTREGA" ENABLE;

  ALTER TABLE "PLANO_ESTRATEGICO_OBJETIVOS" ADD CONSTRAINT "PLANO_ESTRATEGICO_OBJETIVOS_ID_FK" FOREIGN KEY ("ID_PLANO_ESTRATEGICO")
	  REFERENCES "PLANO_ESTRATEGICO" ("COD_PLANO_ESTRATEGICO") ENABLE;
  ALTER TABLE "PLANO_ESTRATEGICO_OBJETIVOS" ADD CONSTRAINT "PLANO_ESTRATEGICO_OBJETIVOS_PERSP_FK" FOREIGN KEY ("ID_PLANO_ESTRATEGICO_PERSPECTIVAS")
	  REFERENCES "PLANO_ESTRATEGICO_PERSPECTIVAS" ("ID") ENABLE;

  ALTER TABLE "PLANO_ESTRATEGICO_PERSPECTIVAS" ADD CONSTRAINT "PLANO_ESTRATEGICO_PERSPECTIVAS_ID_FK" FOREIGN KEY ("ID_PLANO_ESTRATEGICO")
	  REFERENCES "PLANO_ESTRATEGICO" ("COD_PLANO_ESTRATEGICO") ENABLE;

  ALTER TABLE "PLANO_TRABALHO" ADD CONSTRAINT "PLANO_TRABALHO_FK_SERVIDOR" FOREIGN KEY ("COD_SERVIDOR")
	  REFERENCES "SERVIDOR" ("COD") ENABLE;
  ALTER TABLE "PLANO_TRABALHO" ADD CONSTRAINT "PLANO_TRABALHO_FK_UORG" FOREIGN KEY ("COD_UORG")
	  REFERENCES "UORG" ("COD") ENABLE;

  ALTER TABLE "PLANO_TRABALHO_ATIVIDADE" ADD CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_FK_PLANO_ENTREGA" FOREIGN KEY ("COD_PLANO_ENTREGA")
	  REFERENCES "PLANO_ENTREGA" ("COD_PLANO_ENTREGA") DISABLE;
  ALTER TABLE "PLANO_TRABALHO_ATIVIDADE" ADD CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_CON" FOREIGN KEY ("COD_PLANO_TRABALHO")
	  REFERENCES "PLANO_TRABALHO" ("COD_PLANO_TRABALHO") ENABLE;
  ALTER TABLE "PLANO_TRABALHO_ATIVIDADE" ADD CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_FK_BAR_UORG" FOREIGN KEY ("COD_UORG")
	  REFERENCES "UORG" ("COD") ENABLE;
  ALTER TABLE "PLANO_TRABALHO_ATIVIDADE" ADD CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_FK_PLANO_TRABALHO_ATIVIDADE_TIPO" FOREIGN KEY ("COD_PLANO_TRABALHO_ATIVIDADE_TIPO_FK")
	  REFERENCES "PLANO_TRABALHO_ATIVIDADE_TIPO" ("COD_PLANO_TRABALHO_ATIVIDADE_TIPO") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_INTEGRACAO_API_PLANO_TRABALHO" 
AFTER INSERT OR UPDATE ON PLANO_TRABALHO_ATIVIDADE
FOR EACH ROW
DECLARE
--
 CURSOR C_PARTICIPANTE IS
 SELECT TC.COD_TERMO_CIENCIA
   FROM PLANO_TRABALHO PT
     ,  TERMO_CIENCIA TC
  WHERE PT.COD_SERVIDOR       = TC.COD_SERVIDOR_FK
    AND PT.COD_PLANO_TRABALHO = NVL(:NEW.COD_PLANO_TRABALHO, :OLD.COD_PLANO_TRABALHO)
    AND TC.DATA_ASSINATURA    IS NOT NULL;
--
 CURSOR C_PLANO_ENTREGA IS
 SELECT DISTINCT PE.COD_PLANO
   FROM PLANO_ENTREGA PE
  WHERE PE.COD_PLANO_ENTREGA = NVL(:NEW.COD_PLANO_ENTREGA, :OLD.COD_PLANO_ENTREGA);
--
BEGIN
  --
   FOR X IN C_PARTICIPANTE LOOP
    --
     PCK_API_MGI.PRC_REGISTRO_INTEGRACAO (P_API         => 'PCK_API_MGI'
                                         ,P_PROCESSO    => 'TERMO_CIENCIA'
                                         ,P_CHAVE       => X.COD_TERMO_CIENCIA);
    --
   END LOOP;
  --
   FOR Y IN C_PLANO_ENTREGA LOOP
    --
     PCK_API_MGI.PRC_REGISTRO_INTEGRACAO (P_API         => 'PCK_API_MGI'
                                         ,P_PROCESSO    => 'PLANO_ENTREGA'
                                         ,P_CHAVE       => Y.COD_PLANO);
    --
   END LOOP;
  --
   PCK_API_MGI.PRC_REGISTRO_INTEGRACAO (P_API         => 'PCK_API_MGI'
                                       ,P_PROCESSO    => 'PLANO_TRABALHO'
                                       ,P_CHAVE       => NVL(:NEW.COD_PLANO_TRABALHO, :OLD.COD_PLANO_TRABALHO));
  --
END;
/
ALTER TRIGGER "TRG_INTEGRACAO_API_PLANO_TRABALHO" ENABLE;

  ALTER TABLE "PLANO_TRABALHO_ATIVIDADE_EXECUCAO" ADD CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_EXECUCAO_FK_PLANO_TRABALHO_ATIVIDADE" FOREIGN KEY ("COD_PLANO_TRABALHO_ATIVIDADE")
	  REFERENCES "PLANO_TRABALHO_ATIVIDADE" ("COD_ATIVIDADE") ENABLE;
  ALTER TABLE "PLANO_TRABALHO_ATIVIDADE_EXECUCAO" ADD CONSTRAINT "PLANO_TRABALHO_ATIVIDADE_EXECUCAO_FK_USUARIO" FOREIGN KEY ("COD_USUARIO")
	  REFERENCES "USUARIO" ("ID") ENABLE;

   COMMENT ON TABLE "PLANO_TRABALHO_ATVIVIDADE_MENCAO"  IS 'HEFESTO';

  ALTER TABLE "PLANO_TRABALHO_COMENTARIO" ADD CONSTRAINT "PLANO_TRABALHO_COMENTARIO_FK_PLANO_TRABALHO" FOREIGN KEY ("COD_PLANO_TRABALHO")
	  REFERENCES "PLANO_TRABALHO" ("COD_PLANO_TRABALHO") ENABLE;
  ALTER TABLE "PLANO_TRABALHO_COMENTARIO" ADD CONSTRAINT "PLANO_TRABALHO_COMENTARIO_FK_USUARIO" FOREIGN KEY ("COD_USUARIO")
	  REFERENCES "USUARIO" ("ID") ENABLE;

  ALTER TABLE "PROJETO" ADD CONSTRAINT "PROJETO_FK_OBJETIVO" FOREIGN KEY ("COD_OBJETIVO")
	  REFERENCES "OBJETIVO" ("COD_OBJETIVO") ENABLE;
  ALTER TABLE "PROJETO" ADD CONSTRAINT "PROJETO_FK_INDICADOR" FOREIGN KEY ("COD_INDICADOR")
	  REFERENCES "INDICADOR" ("COD_INDICADOR") ENABLE;
  ALTER TABLE "PROJETO" ADD CONSTRAINT "PROJETO_FK_PERSPECTIVA" FOREIGN KEY ("COD_PERSPECTIVA")
	  REFERENCES "PERSPECTIVA" ("COD_PERSPECTIVA") ENABLE;
  ALTER TABLE "PROJETO" ADD CONSTRAINT "PROJETO_FK_CADEIA_VALOR" FOREIGN KEY ("PRIMEIRO_NIVEL_CADEIA")
	  REFERENCES "CADEIA_VALOR" ("COD_CADEIA_VALOR") DISABLE;
  ALTER TABLE "PROJETO" ADD CONSTRAINT "PROJETO_FK_CADEIA_VALOR_2" FOREIGN KEY ("SEGUNDO_NIVEL_CADEIA")
	  REFERENCES "CADEIA_VALOR_NIVEL2" ("COD_CADEIA_VALOR_NIVEL2") DISABLE;
  ALTER TABLE "PROJETO" ADD CONSTRAINT "PROJETO_FK_CADEIA_VALOR_3" FOREIGN KEY ("TERCEIRO_NIVEL_CADEIA")
	  REFERENCES "CADEIA_VALOR_NIVEL3" ("COD_CADEIA_VALOR_NIVEL3") DISABLE;
  ALTER TABLE "PROJETO" ADD CONSTRAINT "PROJETO_FK_BAR_UORG" FOREIGN KEY ("COD_UORG_FK")
	  REFERENCES "UORG" ("COD") ENABLE;
  ALTER TABLE "PROJETO" ADD CONSTRAINT "PROJETO_FK_BAR_PESSOA_FISICA" FOREIGN KEY ("COD_GERENTE")
	  REFERENCES "PESSOA_FISICA" ("COD") ENABLE;

  ALTER TABLE "PROJETO_TAREFA" ADD CONSTRAINT "PROJETO_TAREFA_FK_PROJETO" FOREIGN KEY ("COD_PROJETO_FK")
	  REFERENCES "PROJETO" ("COD_PROJETO") ENABLE;

   COMMENT ON COLUMN "SITUACAO_REGISTRO"."COD_SITUACAO_REGISTRO" IS 'Id da situação do registro';
   COMMENT ON COLUMN "SITUACAO_REGISTRO"."SITUACAO" IS 'Descrição das possíveis situações';
   COMMENT ON COLUMN "SITUACAO_REGISTRO"."COD_PERFIL_FK" IS 'Id perfil de usuário';
   COMMENT ON TABLE "SITUACAO_REGISTRO"  IS 'HEFESTO';

  ALTER TABLE "TERMO_CIENCIA" ADD CONSTRAINT "TERMO_CIENCIA_FK_SITUACAO_TERMO" FOREIGN KEY ("SITUACAO")
	  REFERENCES "SITUACAO_TERMO_CIENCIA" ("COD_SITUACAO_TERMO_CIENCIA") ENABLE;
  ALTER TABLE "TERMO_CIENCIA" ADD CONSTRAINT "TERMO_CIENCIA_FK_REGIME" FOREIGN KEY ("COD_REGIME_EXECUCAO_FK")
	  REFERENCES "TERMO_CIENCIA_REGIME" ("COD_REGIME_EXECUCAO") ENABLE;
  ALTER TABLE "TERMO_CIENCIA" ADD CONSTRAINT "TERMO_CIENCIA_FK_BAR_SERVIDOR" FOREIGN KEY ("COD_SERVIDOR_FK")
	  REFERENCES "SERVIDOR" ("COD") ENABLE;

   COMMENT ON COLUMN "TERMO_CIENCIA"."DATA_ASSINATURA" IS 'Data de assinatura do TCR.';

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_LOG_TERMO_CIENCIA" 
AFTER INSERT OR UPDATE OR DELETE ON TERMO_CIENCIA
FOR EACH ROW
DECLARE
    V_ACTION VARCHAR2(100);
    V_COLUMN VARCHAR2(100);
    V_TABLE_NAME VARCHAR2(100);
BEGIN

    V_TABLE_NAME := 'TERMO_CIENCIA';

    IF INSERTING THEN
        V_ACTION := 'INSERT';
    ELSIF UPDATING THEN
        V_ACTION := 'UPDATE';
    ELSIF DELETING THEN
        V_ACTION := 'DELETE';
    END IF;

     -- REGISTRA 
    IF V_ACTION in ('INSERT','DELETE') THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     '',
                        P_COLUMM_LABEL    =>     '',
                        P_OLD_VALUES      =>     '',
                        P_NEW_VALUES      =>     '',
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;


    -- REGISTRA ALTERAÇÕES NO CAMPO COD_REGIME_EXECUCAO_FK
    IF V_ACTION in ('UPDATE') AND :OLD.COD_REGIME_EXECUCAO_FK <> :NEW.COD_REGIME_EXECUCAO_FK THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'COD_REGIME_EXECUCAO_FK',
                        P_COLUMM_LABEL    =>     'Regime de execução:',
                        P_OLD_VALUES      =>     :OLD.COD_REGIME_EXECUCAO_FK,
                        P_NEW_VALUES      =>     :NEW.COD_REGIME_EXECUCAO_FK,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;


     -- REGISTRA ALTERAÇÕES NO CAMPO NOME_SERVIDOR
    IF V_ACTION in ('UPDATE') AND :OLD.COD_SERVIDOR_FK <> :NEW.COD_SERVIDOR_FK THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'NOME_SERVIDOR',
                        P_COLUMM_LABEL    =>     'Nome do servidor:',
                        P_OLD_VALUES      =>     :OLD.COD_SERVIDOR_FK,
                        P_NEW_VALUES      =>     :NEW.COD_SERVIDOR_FK,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO STATUS
    IF V_ACTION in ('UPDATE') AND :OLD.IND_ATIVO <> :NEW.IND_ATIVO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'IND_ATIVO',
                        P_COLUMM_LABEL    =>     'Status:',
                        P_OLD_VALUES      =>     (CASE WHEN :OLD.IND_ATIVO = 'A' THEN 'ATIVO' ELSE 'INATIVO' END),
                        P_NEW_VALUES      =>     (CASE WHEN :NEW.IND_ATIVO = 'A' THEN 'ATIVO' ELSE 'INATIVO' END),
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;


    -- REGISTRA ALTERAÇÕES NO CAMPO JUSTIFICATIVA
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.JUSTIFICATIVA, ' ') <> :NEW.JUSTIFICATIVA THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'JUSTIFICATIVA',
                        P_COLUMM_LABEL    =>     'Justificativa:',
                        P_OLD_VALUES      =>     :OLD.JUSTIFICATIVA,
                        P_NEW_VALUES      =>     :NEW.JUSTIFICATIVA,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO CARGA_HORARIA_DIARIA
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.CARGA_HORARIA_DIARIA, '') <> :NEW.CARGA_HORARIA_DIARIA THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'CARGA_HORARIA_DIARIA',
                        P_COLUMM_LABEL    =>     'Carga horária diária:',
                        P_OLD_VALUES      =>     :OLD.CARGA_HORARIA_DIARIA,
                        P_NEW_VALUES      =>     :NEW.CARGA_HORARIA_DIARIA,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO TEMPO_PADRAO_PLANO_TRABALHO
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.TEMPO_PADRAO_PLANO_TRABALHO, ' ') <> :NEW.TEMPO_PADRAO_PLANO_TRABALHO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'TEMPO_PADRAO_PLANO_TRABALHO',
                        P_COLUMM_LABEL    =>     'Tempo padrão do plano de trabalho:',
                        P_OLD_VALUES      =>     :OLD.TEMPO_PADRAO_PLANO_TRABALHO,
                        P_NEW_VALUES      =>     :NEW.TEMPO_PADRAO_PLANO_TRABALHO,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO PRAZO_CONVOCACAO
    IF V_ACTION in ('UPDATE') AND  :OLD.PRAZO_CONVOCACAO <> :NEW.PRAZO_CONVOCACAO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'PRAZO_CONVOCACAO',
                        P_COLUMM_LABEL    =>     'Prazo de convocação:',
                        P_OLD_VALUES      =>     :OLD.PRAZO_CONVOCACAO,
                        P_NEW_VALUES      =>     :NEW.PRAZO_CONVOCACAO,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO DATA_INICIO
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.DATA_INICIO, '') <> :NEW.DATA_INICIO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'DATA_INICIO',
                        P_COLUMM_LABEL    =>     'Data de ínicio:',
                        P_OLD_VALUES      =>     :OLD.DATA_INICIO,
                        P_NEW_VALUES      =>     :NEW.DATA_INICIO,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO DATA_FIM
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.DATA_FIM, '') <> :NEW.DATA_FIM THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'DATA_FIM',
                        P_COLUMM_LABEL    =>     'Data fim:',
                        P_OLD_VALUES      =>     :OLD.DATA_FIM,
                        P_NEW_VALUES      =>     :NEW.DATA_FIM,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO NUMERO_PROCESSO
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.NUMERO_PROCESSO, ' ') <> :NEW.NUMERO_PROCESSO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'NUMERO_PROCESSO',
                        P_COLUMM_LABEL    =>     'Número do processo:',
                        P_OLD_VALUES      =>     :OLD.NUMERO_PROCESSO,
                        P_NEW_VALUES      =>     :NEW.NUMERO_PROCESSO,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;


    -- REGISTRA ALTERAÇÕES NO CAMPO SITUACAO
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.SITUACAO, '') <> :NEW.SITUACAO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'SITUACAO',
                        P_COLUMM_LABEL    =>     'Situação:',
                        P_OLD_VALUES      =>     (CASE WHEN :OLD.SITUACAO = 2 THEN 'Aguardando assinatura' ELSE 'Assinado' END),
                        P_NEW_VALUES      =>     (CASE WHEN :NEW.SITUACAO = 2 THEN 'Aguardando assinatura' ELSE 'Assinado' END),
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;

    -- REGISTRA ALTERAÇÕES NO CAMPO DE_ACORDO
    IF V_ACTION in ('UPDATE') AND  NVL(:OLD.DE_ACORDO, ' ') <> :NEW.DE_ACORDO THEN

        PCK_LOG.PRC_INSERT_LOG (
                        P_TABLE_NAME      =>     V_TABLE_NAME,
                        P_ACTION          =>     V_ACTION,
                        P_COLUMM          =>     'DE_ACORDO',
                        P_COLUMM_LABEL    =>     'De acordo:',
                        P_OLD_VALUES      =>     :OLD.DE_ACORDO,
                        P_NEW_VALUES      =>     :NEW.DE_ACORDO,
                        P_ID              =>     :NEW.COD_TERMO_CIENCIA);

    END IF;



END;
/
ALTER TRIGGER "TRG_LOG_TERMO_CIENCIA" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_INTEGRACAO_API_TERMO_CIENCIA" 
AFTER INSERT OR UPDATE ON TERMO_CIENCIA
FOR EACH ROW
DECLARE
--
BEGIN
  --
   IF INSERTING AND :NEW.DATA_ASSINATURA IS NOT NULL
    THEN
      --
       PCK_API_MGI.PRC_REGISTRO_INTEGRACAO (P_API         => 'PCK_API_MGI'
                                           ,P_PROCESSO    => 'TERMO_CIENCIA'
                                           ,P_CHAVE       => :NEW.COD_TERMO_CIENCIA);
      --
   END IF;
  --
   IF UPDATING AND ((:NEW.DATA_ASSINATURA IS NOT NULL) OR :OLD.DATA_ASSINATURA IS NOT NULL)
    THEN
      --
       PCK_API_MGI.PRC_REGISTRO_INTEGRACAO (P_API         => 'PCK_API_MGI'
                                           ,P_PROCESSO    => 'TERMO_CIENCIA'
                                           ,P_CHAVE       => :OLD.COD_TERMO_CIENCIA);
      --
   END IF;

  --
END;
/
ALTER TRIGGER "TRG_INTEGRACAO_API_TERMO_CIENCIA" ENABLE;

  ALTER TABLE "TERMO_CIENCIA_TURNO" ADD CONSTRAINT "TURNO_FK_DIA_SEMANA" FOREIGN KEY ("COD_DIA_SEMANA_FK")
	  REFERENCES "DIA_SEMANA" ("COD_DIA_SEMANA") ENABLE;
  ALTER TABLE "TERMO_CIENCIA_TURNO" ADD CONSTRAINT "TERMO_CIENCIA_TURNO_FK_TERMO" FOREIGN KEY ("COD_TERMO_CIENCIA_FK")
	  REFERENCES "TERMO_CIENCIA" ("COD_TERMO_CIENCIA") ENABLE;

  ALTER TABLE "USUARIO_SOLUCAO_PERMISSAO" ADD CONSTRAINT "USUARIO_SOLUCAO_PERMISSAO_FK_USUARIO" FOREIGN KEY ("ID_USUARIO")
	  REFERENCES "USUARIO" ("ID") DISABLE;

   COMMENT ON TABLE "USUARIO_SOLUCAO_PERMISSAO"  IS 'CANTAQ';